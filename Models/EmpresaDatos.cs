// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace DRR.Core.DBEmpresaEjemplo.Models
{
    [Index("RazonSocial", Name = "IX_EmpresaDatos_RazonSocial")]
    public partial class EmpresaDatos
    {
        public EmpresaDatos()
        {
            BancoTarjeta = new HashSet<BancoTarjeta>();
            EmpresaCertificadoAfip = new HashSet<EmpresaCertificadoAfip>();
            EmpresaCodigoActividad = new HashSet<EmpresaCodigoActividad>();
            EmpresaImpuestoZona = new HashSet<EmpresaImpuestoZona>();
            Impuesto = new HashSet<Impuesto>();
            PermisoEmpresa = new HashSet<PermisoEmpresa>();
            Sector = new HashSet<Sector>();
            SincronizacionTerminal = new HashSet<SincronizacionTerminal>();
        }

        [Key]
        [Column("EmpresaID")]
        public int EmpresaId { get; set; }
        [StringLength(150)]
        [Unicode(false)]
        public string RazonSocial { get; set; }
        [Column("CUIT")]
        public long? Cuit { get; set; }
        [StringLength(250)]
        [Unicode(false)]
        public string Domicilio { get; set; }
        [StringLength(150)]
        public string Telefono { get; set; }
        public bool? StockRegistra { get; set; }
        public bool? StockNegativo { get; set; }
        [Column("CategoriaImpuestoID")]
        public byte? CategoriaImpuestoId { get; set; }
        [Column(TypeName = "date")]
        public DateTime? InicioActividad { get; set; }
        public bool? StockDepositoRegistra { get; set; }
        [Column("E_Mail")]
        [StringLength(250)]
        [Unicode(false)]
        public string EMail { get; set; }
        [StringLength(250)]
        [Unicode(false)]
        public string PaginaWeb { get; set; }
        /// <summary>
        /// Servidor de Correo Saliente SMTP
        /// </summary>
        [StringLength(250)]
        [Unicode(false)]
        public string SmtpServer { get; set; }
        /// <summary>
        /// Nombre de la Cuenta/Usuario para el Servidor correo SMTP
        /// </summary>
        [Column("CuentaSMTP")]
        [StringLength(150)]
        [Unicode(false)]
        public string CuentaSmtp { get; set; }
        /// <summary>
        /// Clave para la Cuenta/Usuario del Servidor de Correo SMTP
        /// </summary>
        [Column("PasswordSMTP")]
        [StringLength(150)]
        [Unicode(false)]
        public string PasswordSmtp { get; set; }
        public byte[] Logo { get; set; }
        [StringLength(150)]
        [Unicode(false)]
        public string NombreFantasia { get; set; }
        public int? SmtpPort { get; set; }
        /// <summary>
        /// Indica si el servidor de Coreo saliente (SMTP) requiere autenticación
        /// </summary>
        [Column("SslSMTPEnabled")]
        public bool? SslSmtpenabled { get; set; }
        [Column("CiudadID")]
        public int? CiudadId { get; set; }
        public int? DiasModificacionPrecio { get; set; }
        public byte? RegimenFacturacion { get; set; }
        [StringLength(250)]
        [Unicode(false)]
        public string Propietario { get; set; }
        [Unicode(false)]
        public string DescripcionEmpresa { get; set; }
        [Column(TypeName = "date")]
        public DateTime? FechaArrastreCtaCte { get; set; }
        [StringLength(30)]
        [Unicode(false)]
        public string NroImpuestoProvincial { get; set; }
        public byte? CantidadItemsVenta { get; set; }
        /// <summary>
        /// Cantidad de decimales que se presentan los importes monetarios de Venta
        /// </summary>
        public byte DecimalesVenta { get; set; }
        /// <summary>
        /// Cantidad de decimales que se presentan los importes monetarios de Compra
        /// </summary>
        public byte DecimalesCompra { get; set; }
        /// <summary>
        /// Decimales utilizados para operaciones monetarias q no son consideradas de venta o compra
        /// </summary>
        public byte DecimalesGral { get; set; }
        /// <summary>
        /// Indica la cantidad de dias a tener encuenta para informar cliente con faturas Morosas (Morosos=FechaActual&lt;FechaVencimiento+DiasGracia)
        /// </summary>
        public byte? DiasGracia { get; set; }
        /// <summary>
        /// Indica la Modalidad a Utilizar para la liquidacion comisiones vendedor 0-Sobre Neto    1-Determina  Neto de comprobante Otros
        /// </summary>
        public byte? ModoLiquidComision { get; set; }
        /// <summary>
        /// Se especifica el Porc. interes mora DIARIO a aplicar al generar nota debito por mora en pago facturas vencidas
        /// </summary>
        [Column(TypeName = "decimal(9, 4)")]
        public decimal? InteresMoraDia { get; set; }
        /// <summary>
        /// 0-No Aplica, 1-Ventas Generan Despacho, 2-Compras Generan Recepcion
        /// </summary>
        public short? StockTipo { get; set; }
        /// <summary>
        /// N° de Sucursal
        /// </summary>
        [Column("CentralSucursalID")]
        public short? CentralSucursalId { get; set; }
        /// <summary>
        /// Indico si se permite definir precios y costos x sucursal 
        /// </summary>
        public bool PreciosPorSucursal { get; set; }
        public short? RealizaEncuesta { get; set; }
        /// <summary>
        /// Si tiene valor distinto de 0 indico que es una terminal
        /// </summary>
        [Column("TerminalID")]
        public int? TerminalId { get; set; }
        [Column("IsAzureDB")]
        public bool IsAzureDb { get; set; }
        [Column("PesableDigitosPLU")]
        public byte? PesableDigitosPlu { get; set; }
        [StringLength(20)]
        public string TelefonoMovil { get; set; }
        [Column(TypeName = "xml")]
        public string ConfiguracionConsultor { get; set; }
        [Column(TypeName = "xml")]
        public string ConfiguracionPuntoVenta { get; set; }
        public short? BaucherDiasVencimiento { get; set; }
        public short? BaucherDiasUtilizar { get; set; }
        [StringLength(200)]
        [Unicode(false)]
        public string CanalYoutube { get; set; }
        [StringLength(200)]
        [Unicode(false)]
        public string PaginaFacebook { get; set; }
        [StringLength(400)]
        [Unicode(false)]
        public string FacebookToken { get; set; }
        [Column("BancoTarjetaID1")]
        public int? BancoTarjetaId1 { get; set; }
        [Column("BancoTarjetaID2")]
        public int? BancoTarjetaId2 { get; set; }
        [Column(TypeName = "xml")]
        public string ConfigTelegram { get; set; }
        [Column(TypeName = "xml")]
        public string ConfigWzp { get; set; }
        public byte? GestionCtaCte { get; set; }
        [Column(TypeName = "money")]
        public decimal? MinimoConsumidorFinal { get; set; }
        public byte? TipoCalculoComision { get; set; }
        public byte? ActulizaPrecio { get; set; }
        [StringLength(30)]
        public string NroImpuestoMunicipal { get; set; }
        [StringLength(50)]
        public string IncRegPubComercio { get; set; }
        [StringLength(50)]
        [Unicode(false)]
        public string IncDirrecPersJuridica { get; set; }
        [StringLength(50)]
        public string CoopMatriculaNacional { get; set; }
        [StringLength(50)]
        public string CoopMatriculaProvincial { get; set; }
        [Unicode(false)]
        public string GoogleJsonCalendar { get; set; }
        [Column("FirmanteID")]
        public int? FirmanteId { get; set; }
        [Column("OfertaTipoID")]
        public byte? OfertaTipoId { get; set; }

        [ForeignKey("BancoTarjetaId1")]
        [InverseProperty("EmpresaDatosBancoTarjetaId1Navigation")]
        public virtual BancoTarjeta BancoTarjetaId1Navigation { get; set; }
        [ForeignKey("BancoTarjetaId2")]
        [InverseProperty("EmpresaDatosBancoTarjetaId2Navigation")]
        public virtual BancoTarjeta BancoTarjetaId2Navigation { get; set; }
        [ForeignKey("CentralSucursalId")]
        [InverseProperty("EmpresaDatos")]
        public virtual Sucursal CentralSucursal { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<BancoTarjeta> BancoTarjeta { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<EmpresaCertificadoAfip> EmpresaCertificadoAfip { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<EmpresaCodigoActividad> EmpresaCodigoActividad { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<EmpresaImpuestoZona> EmpresaImpuestoZona { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<Impuesto> Impuesto { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<PermisoEmpresa> PermisoEmpresa { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<Sector> Sector { get; set; }
        [InverseProperty("Empresa")]
        public virtual ICollection<SincronizacionTerminal> SincronizacionTerminal { get; set; }
    }
}