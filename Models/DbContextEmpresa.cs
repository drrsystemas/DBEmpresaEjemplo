// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DRR.Core.DBEmpresaEjemplo.Models
{
    public partial class DbContextEmpresa : DbContext
    {
        public DbContextEmpresa()
        {
        }

        public DbContextEmpresa(DbContextOptions<DbContextEmpresa> options)
            : base(options)
        {
        }

        public virtual DbSet<AccesoMensaje> AccesoMensaje { get; set; }
        public virtual DbSet<AccesoTipo> AccesoTipo { get; set; }
        public virtual DbSet<AfipmisCombantesRecibidos> AfipmisCombantesRecibidos { get; set; }
        public virtual DbSet<AutorizacionCompra> AutorizacionCompra { get; set; }
        public virtual DbSet<AutorizacionCompraCancelacion> AutorizacionCompraCancelacion { get; set; }
        public virtual DbSet<AutorizacionCompraEstado> AutorizacionCompraEstado { get; set; }
        public virtual DbSet<Balanza> Balanza { get; set; }
        public virtual DbSet<BancoTarjeta> BancoTarjeta { get; set; }
        public virtual DbSet<BancoTarjetaConciliacion> BancoTarjetaConciliacion { get; set; }
        public virtual DbSet<BancoTarjetaDebe> BancoTarjetaDebe { get; set; }
        public virtual DbSet<BancoTarjetaFirmante> BancoTarjetaFirmante { get; set; }
        public virtual DbSet<BancoTarjetaFirmanteAutorizado> BancoTarjetaFirmanteAutorizado { get; set; }
        public virtual DbSet<BancoTarjetaHaber> BancoTarjetaHaber { get; set; }
        public virtual DbSet<BancoTarjetaHaberLiquidacion> BancoTarjetaHaberLiquidacion { get; set; }
        public virtual DbSet<BancoTarjetaLote> BancoTarjetaLote { get; set; }
        public virtual DbSet<BancoTarjeteLoteDetalle> BancoTarjeteLoteDetalle { get; set; }
        public virtual DbSet<BasculaBalanza> BasculaBalanza { get; set; }
        public virtual DbSet<BasculaCapataz> BasculaCapataz { get; set; }
        public virtual DbSet<BasculaCapatazCuadrilla> BasculaCapatazCuadrilla { get; set; }
        public virtual DbSet<BasculaEntidadSucursal> BasculaEntidadSucursal { get; set; }
        public virtual DbSet<BasculaOperador> BasculaOperador { get; set; }
        public virtual DbSet<BasculaPesaje> BasculaPesaje { get; set; }
        public virtual DbSet<BasculaPesajeDesglose> BasculaPesajeDesglose { get; set; }
        public virtual DbSet<BasculaPesajeLiquid> BasculaPesajeLiquid { get; set; }
        public virtual DbSet<BasculaPesajeLiquidDetalle> BasculaPesajeLiquidDetalle { get; set; }
        public virtual DbSet<BasculaProducto> BasculaProducto { get; set; }
        public virtual DbSet<BasculaProductoDeposito> BasculaProductoDeposito { get; set; }
        public virtual DbSet<BasculaResumen> BasculaResumen { get; set; }
        public virtual DbSet<BasculaSecadero> BasculaSecadero { get; set; }
        public virtual DbSet<BilletesDesglose> BilletesDesglose { get; set; }
        public virtual DbSet<BuscarConfiguracion> BuscarConfiguracion { get; set; }
        public virtual DbSet<ChequeTerceros> ChequeTerceros { get; set; }
        public virtual DbSet<Chequera> Chequera { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<ClienteCanal> ClienteCanal { get; set; }
        public virtual DbSet<ClienteCanalProducto> ClienteCanalProducto { get; set; }
        public virtual DbSet<ClienteClasificacion> ClienteClasificacion { get; set; }
        public virtual DbSet<ClienteDescuento> ClienteDescuento { get; set; }
        public virtual DbSet<ClienteRepresentada> ClienteRepresentada { get; set; }
        public virtual DbSet<ClienteVendedor> ClienteVendedor { get; set; }
        public virtual DbSet<Cobrador> Cobrador { get; set; }
        public virtual DbSet<ComisionEspecial> ComisionEspecial { get; set; }
        public virtual DbSet<ComunicadoModelo> ComunicadoModelo { get; set; }
        public virtual DbSet<Contacto> Contacto { get; set; }
        public virtual DbSet<ContactoTipo> ContactoTipo { get; set; }
        public virtual DbSet<CuentaCorrienteAnticipo> CuentaCorrienteAnticipo { get; set; }
        public virtual DbSet<CuentaCorrienteAnticipoCancela> CuentaCorrienteAnticipoCancela { get; set; }
        public virtual DbSet<CuentaCorrienteCancelacion> CuentaCorrienteCancelacion { get; set; }
        public virtual DbSet<CuentaCorrienteRegistro> CuentaCorrienteRegistro { get; set; }
        public virtual DbSet<CuentaCorrienteRegistroTerminal> CuentaCorrienteRegistroTerminal { get; set; }
        public virtual DbSet<CuentasAsignacion> CuentasAsignacion { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<Deposito> Deposito { get; set; }
        public virtual DbSet<DepositoEncargado> DepositoEncargado { get; set; }
        public virtual DbSet<DepositoEncargadoDeposito> DepositoEncargadoDeposito { get; set; }
        public virtual DbSet<DepositoMovimiento> DepositoMovimiento { get; set; }
        public virtual DbSet<DepositoMovimientoItem> DepositoMovimientoItem { get; set; }
        public virtual DbSet<DiasFeriados> DiasFeriados { get; set; }
        public virtual DbSet<DiasMesLaborables> DiasMesLaborables { get; set; }
        public virtual DbSet<DonacionInstitucion> DonacionInstitucion { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<EmpleadoAcceso> EmpleadoAcceso { get; set; }
        public virtual DbSet<EmpleadoClasificacion> EmpleadoClasificacion { get; set; }
        public virtual DbSet<EmpleadoDiasVacacionesPeriodo> EmpleadoDiasVacacionesPeriodo { get; set; }
        public virtual DbSet<EmpleadoInasistencia> EmpleadoInasistencia { get; set; }
        public virtual DbSet<EmpleadoPuestoJerarquia> EmpleadoPuestoJerarquia { get; set; }
        public virtual DbSet<EmpleadoTurno> EmpleadoTurno { get; set; }
        public virtual DbSet<EmpleadoVacacionesFrancos> EmpleadoVacacionesFrancos { get; set; }
        public virtual DbSet<EmpresaCertificadoAfip> EmpresaCertificadoAfip { get; set; }
        public virtual DbSet<EmpresaCodigoActividad> EmpresaCodigoActividad { get; set; }
        public virtual DbSet<EmpresaDatos> EmpresaDatos { get; set; }
        public virtual DbSet<EmpresaImpuestoZona> EmpresaImpuestoZona { get; set; }
        public virtual DbSet<Encuesta> Encuesta { get; set; }
        public virtual DbSet<EncuestaOpcion> EncuestaOpcion { get; set; }
        public virtual DbSet<EncuestaRespuesta> EncuestaRespuesta { get; set; }
        public virtual DbSet<EncuestaRespuestaOpcion> EncuestaRespuestaOpcion { get; set; }
        public virtual DbSet<Entidad> Entidad { get; set; }
        public virtual DbSet<EntidadAderente> EntidadAderente { get; set; }
        public virtual DbSet<EntidadClasificacion> EntidadClasificacion { get; set; }
        public virtual DbSet<EntidadCodigoActividad> EntidadCodigoActividad { get; set; }
        public virtual DbSet<EntidadDatoFiliatorio> EntidadDatoFiliatorio { get; set; }
        public virtual DbSet<EntidadSucursal> EntidadSucursal { get; set; }
        public virtual DbSet<EntidadSucursalArchivos> EntidadSucursalArchivos { get; set; }
        public virtual DbSet<EntidadSucursalComercio> EntidadSucursalComercio { get; set; }
        public virtual DbSet<EntidadSucursalDomicilio> EntidadSucursalDomicilio { get; set; }
        public virtual DbSet<EntidadSucursalEmail> EntidadSucursalEmail { get; set; }
        public virtual DbSet<EntidadSucursalEvento> EntidadSucursalEvento { get; set; }
        public virtual DbSet<EntidadSucursalImagen> EntidadSucursalImagen { get; set; }
        public virtual DbSet<EntidadSucursalImpuesto> EntidadSucursalImpuesto { get; set; }
        public virtual DbSet<EntidadSucursalImpuestoZona> EntidadSucursalImpuestoZona { get; set; }
        public virtual DbSet<EntidadSucursalTelefono> EntidadSucursalTelefono { get; set; }
        public virtual DbSet<EntidadSucursalTipoComercio> EntidadSucursalTipoComercio { get; set; }
        public virtual DbSet<Equipo> Equipo { get; set; }
        public virtual DbSet<Evento> Evento { get; set; }
        public virtual DbSet<EventoAnual> EventoAnual { get; set; }
        public virtual DbSet<EventoClasificacion> EventoClasificacion { get; set; }
        public virtual DbSet<EventoColaboradores> EventoColaboradores { get; set; }
        public virtual DbSet<EventoDiario> EventoDiario { get; set; }
        public virtual DbSet<EventoMantenimiento> EventoMantenimiento { get; set; }
        public virtual DbSet<EventoMensual> EventoMensual { get; set; }
        public virtual DbSet<EventoPrioridad> EventoPrioridad { get; set; }
        public virtual DbSet<EventoSemanal> EventoSemanal { get; set; }
        public virtual DbSet<FiscalAuditoria> FiscalAuditoria { get; set; }
        public virtual DbSet<FiscalInformeSemanal> FiscalInformeSemanal { get; set; }
        public virtual DbSet<FrigorificoAnimaIngresolProducto> FrigorificoAnimaIngresolProducto { get; set; }
        public virtual DbSet<FrigorificoAnimalPieza> FrigorificoAnimalPieza { get; set; }
        public virtual DbSet<FrigorificoAnimalPiezaTipo> FrigorificoAnimalPiezaTipo { get; set; }
        public virtual DbSet<FrigorificoAnimalTipo> FrigorificoAnimalTipo { get; set; }
        public virtual DbSet<FrigorificoCorral> FrigorificoCorral { get; set; }
        public virtual DbSet<FrigorificoEgreso> FrigorificoEgreso { get; set; }
        public virtual DbSet<FrigorificoEntidad> FrigorificoEntidad { get; set; }
        public virtual DbSet<FrigorificoFaena> FrigorificoFaena { get; set; }
        public virtual DbSet<FrigorificoFaenaDetalle> FrigorificoFaenaDetalle { get; set; }
        public virtual DbSet<FrigorificoFaenaDetallePieza> FrigorificoFaenaDetallePieza { get; set; }
        public virtual DbSet<FrigorificoIngreso> FrigorificoIngreso { get; set; }
        public virtual DbSet<FrigorificoPiezaEgresoProducto> FrigorificoPiezaEgresoProducto { get; set; }
        public virtual DbSet<FrigorificoTipificacion> FrigorificoTipificacion { get; set; }
        public virtual DbSet<FrigorificoTipificador> FrigorificoTipificador { get; set; }
        public virtual DbSet<FrigorificoTropa> FrigorificoTropa { get; set; }
        public virtual DbSet<Hotel> Hotel { get; set; }
        public virtual DbSet<HotelElemento> HotelElemento { get; set; }
        public virtual DbSet<HotelHabitacionAuditoria> HotelHabitacionAuditoria { get; set; }
        public virtual DbSet<HotelHabitacionAuditoriaItem> HotelHabitacionAuditoriaItem { get; set; }
        public virtual DbSet<HotelHabitacionElemento> HotelHabitacionElemento { get; set; }
        public virtual DbSet<HotelHabitacionElementoCategoria> HotelHabitacionElementoCategoria { get; set; }
        public virtual DbSet<HotelRestTurno> HotelRestTurno { get; set; }
        public virtual DbSet<HotelSector> HotelSector { get; set; }
        public virtual DbSet<HotelSectorHabitacion> HotelSectorHabitacion { get; set; }
        public virtual DbSet<Huella> Huella { get; set; }
        public virtual DbSet<ImpresionRegistro> ImpresionRegistro { get; set; }
        public virtual DbSet<Impuesto> Impuesto { get; set; }
        public virtual DbSet<ImpuestoDesglose> ImpuestoDesglose { get; set; }
        public virtual DbSet<ImpuestoFormuarioLiquidacionDetalle> ImpuestoFormuarioLiquidacionDetalle { get; set; }
        public virtual DbSet<ImpuestoFormulario> ImpuestoFormulario { get; set; }
        public virtual DbSet<ImpuestoFormularioLiquidacion> ImpuestoFormularioLiquidacion { get; set; }
        public virtual DbSet<Informes> Informes { get; set; }
        public virtual DbSet<LibroDiario> LibroDiario { get; set; }
        public virtual DbSet<LibroDiarioAgrupado> LibroDiarioAgrupado { get; set; }
        public virtual DbSet<LibroDiarioBalance> LibroDiarioBalance { get; set; }
        public virtual DbSet<LibroDiarioBalanceItem> LibroDiarioBalanceItem { get; set; }
        public virtual DbSet<LibroDiarioItem> LibroDiarioItem { get; set; }
        public virtual DbSet<Licencia> Licencia { get; set; }
        public virtual DbSet<LicenciaIndiceTabla> LicenciaIndiceTabla { get; set; }
        public virtual DbSet<MonedaTipo> MonedaTipo { get; set; }
        public virtual DbSet<Noticia> Noticia { get; set; }
        public virtual DbSet<NovedadRegistroTabla> NovedadRegistroTabla { get; set; }
        public virtual DbSet<OperacionAdelanto> OperacionAdelanto { get; set; }
        public virtual DbSet<OperacionAdelantoCancelacion> OperacionAdelantoCancelacion { get; set; }
        public virtual DbSet<OperacionAltaModicacion> OperacionAltaModicacion { get; set; }
        public virtual DbSet<OperacionArchivo> OperacionArchivo { get; set; }
        public virtual DbSet<OperacionAutorizacion> OperacionAutorizacion { get; set; }
        public virtual DbSet<OperacionCobro> OperacionCobro { get; set; }
        public virtual DbSet<OperacionCobroWeb> OperacionCobroWeb { get; set; }
        public virtual DbSet<OperacionCobroWebImagen> OperacionCobroWebImagen { get; set; }
        public virtual DbSet<OperacionCobroWebItem> OperacionCobroWebItem { get; set; }
        public virtual DbSet<OperacionComision> OperacionComision { get; set; }
        public virtual DbSet<OperacionComisionCompra> OperacionComisionCompra { get; set; }
        public virtual DbSet<OperacionComisionImpuesto> OperacionComisionImpuesto { get; set; }
        public virtual DbSet<OperacionCompra> OperacionCompra { get; set; }
        public virtual DbSet<OperacionCompraCaea> OperacionCompraCaea { get; set; }
        public virtual DbSet<OperacionConsignacion> OperacionConsignacion { get; set; }
        public virtual DbSet<OperacionControladorFiscal> OperacionControladorFiscal { get; set; }
        public virtual DbSet<OperacionCredito> OperacionCredito { get; set; }
        public virtual DbSet<OperacionCreditoCuota> OperacionCreditoCuota { get; set; }
        public virtual DbSet<OperacionCreditoCuotaCobrada> OperacionCreditoCuotaCobrada { get; set; }
        public virtual DbSet<OperacionCreditoPlanesPago> OperacionCreditoPlanesPago { get; set; }
        public virtual DbSet<OperacionDescuento> OperacionDescuento { get; set; }
        public virtual DbSet<OperacionDespacho> OperacionDespacho { get; set; }
        public virtual DbSet<OperacionDespachoEstado> OperacionDespachoEstado { get; set; }
        public virtual DbSet<OperacionDespachoItem> OperacionDespachoItem { get; set; }
        public virtual DbSet<OperacionDespachoItemDetalle> OperacionDespachoItemDetalle { get; set; }
        public virtual DbSet<OperacionDetallePago> OperacionDetallePago { get; set; }
        public virtual DbSet<OperacionEntrega> OperacionEntrega { get; set; }
        public virtual DbSet<OperacionFormaPago> OperacionFormaPago { get; set; }
        public virtual DbSet<OperacionFormaPagoDesgloce> OperacionFormaPagoDesgloce { get; set; }
        public virtual DbSet<OperacionFormaPagoPermiso> OperacionFormaPagoPermiso { get; set; }
        public virtual DbSet<OperacionImpresionUsuario> OperacionImpresionUsuario { get; set; }
        public virtual DbSet<OperacionImpuesto> OperacionImpuesto { get; set; }
        public virtual DbSet<OperacionImpuestoZona> OperacionImpuestoZona { get; set; }
        public virtual DbSet<OperacionImputacion> OperacionImputacion { get; set; }
        public virtual DbSet<OperacionImputacionCentroCosto> OperacionImputacionCentroCosto { get; set; }
        public virtual DbSet<OperacionImputacionDesgloseCuenta> OperacionImputacionDesgloseCuenta { get; set; }
        public virtual DbSet<OperacionImputacionImpuesto> OperacionImputacionImpuesto { get; set; }
        public virtual DbSet<OperacionInterDeposito> OperacionInterDeposito { get; set; }
        public virtual DbSet<OperacionInventario> OperacionInventario { get; set; }
        public virtual DbSet<OperacionInventarioProducto> OperacionInventarioProducto { get; set; }
        public virtual DbSet<OperacionInventarioProductoAdicional> OperacionInventarioProductoAdicional { get; set; }
        public virtual DbSet<OperacionItemProdPedidoCompraOperacionItemProdCompra> OperacionItemProdPedidoCompraOperacionItemProdCompra { get; set; }
        public virtual DbSet<OperacionItemProdPedidoVentaOperacionItemProdVenta> OperacionItemProdPedidoVentaOperacionItemProdVenta { get; set; }
        public virtual DbSet<OperacionItemProductCtrlEnvase> OperacionItemProductCtrlEnvase { get; set; }
        public virtual DbSet<OperacionItemProducto> OperacionItemProducto { get; set; }
        public virtual DbSet<OperacionItemProductoCentroCosto> OperacionItemProductoCentroCosto { get; set; }
        public virtual DbSet<OperacionItemProductoCompra> OperacionItemProductoCompra { get; set; }
        public virtual DbSet<OperacionItemProductoCubierta> OperacionItemProductoCubierta { get; set; }
        public virtual DbSet<OperacionItemProductoHotelRest> OperacionItemProductoHotelRest { get; set; }
        public virtual DbSet<OperacionItemProductoImpuesto> OperacionItemProductoImpuesto { get; set; }
        public virtual DbSet<OperacionItemProductoLeyenda> OperacionItemProductoLeyenda { get; set; }
        public virtual DbSet<OperacionItemProductoOrdenServicio> OperacionItemProductoOrdenServicio { get; set; }
        public virtual DbSet<OperacionItemProductoPedidoCompra> OperacionItemProductoPedidoCompra { get; set; }
        public virtual DbSet<OperacionItemProductoPedidoCompraReposicion> OperacionItemProductoPedidoCompraReposicion { get; set; }
        public virtual DbSet<OperacionItemProductoReservado> OperacionItemProductoReservado { get; set; }
        public virtual DbSet<OperacionItemProductoVenta> OperacionItemProductoVenta { get; set; }
        public virtual DbSet<OperacionItemProductoVentaBaucher> OperacionItemProductoVentaBaucher { get; set; }
        public virtual DbSet<OperacionItemProductoVentaComisEspec> OperacionItemProductoVentaComisEspec { get; set; }
        public virtual DbSet<OperacionItemProductoVentaOrdenServicio> OperacionItemProductoVentaOrdenServicio { get; set; }
        public virtual DbSet<OperacionLeyenda> OperacionLeyenda { get; set; }
        public virtual DbSet<OperacionLiquidoProducto> OperacionLiquidoProducto { get; set; }
        public virtual DbSet<OperacionPago> OperacionPago { get; set; }
        public virtual DbSet<OperacionPagoAutorizacion> OperacionPagoAutorizacion { get; set; }
        public virtual DbSet<OperacionPagoAutorizacionCancelacion> OperacionPagoAutorizacionCancelacion { get; set; }
        public virtual DbSet<OperacionPedidoCompra> OperacionPedidoCompra { get; set; }
        public virtual DbSet<OperacionPedidoCompraDespachoItem> OperacionPedidoCompraDespachoItem { get; set; }
        public virtual DbSet<OperacionPedidoCompraRecepcionItem> OperacionPedidoCompraRecepcionItem { get; set; }
        public virtual DbSet<OperacionPedidoVenta> OperacionPedidoVenta { get; set; }
        public virtual DbSet<OperacionPedidoVentaHotelRest> OperacionPedidoVentaHotelRest { get; set; }
        public virtual DbSet<OperacionPedidoVentaHotelRestEstado> OperacionPedidoVentaHotelRestEstado { get; set; }
        public virtual DbSet<OperacionPedidoVentaWeb> OperacionPedidoVentaWeb { get; set; }
        public virtual DbSet<OperacionPedidoVentaWebItem> OperacionPedidoVentaWebItem { get; set; }
        public virtual DbSet<OperacionRecepcion> OperacionRecepcion { get; set; }
        public virtual DbSet<OperacionRecepcionCodigoNoHallado> OperacionRecepcionCodigoNoHallado { get; set; }
        public virtual DbSet<OperacionRecepcionEstado> OperacionRecepcionEstado { get; set; }
        public virtual DbSet<OperacionRecepcionItem> OperacionRecepcionItem { get; set; }
        public virtual DbSet<OperacionRecepcionItemDetalle> OperacionRecepcionItemDetalle { get; set; }
        public virtual DbSet<OperacionRecepcionItemProduccionProgramacionItem> OperacionRecepcionItemProduccionProgramacionItem { get; set; }
        public virtual DbSet<OperacionRecepcionItemVentaItem> OperacionRecepcionItemVentaItem { get; set; }
        public virtual DbSet<OperacionRegistroUsoComprobantes> OperacionRegistroUsoComprobantes { get; set; }
        public virtual DbSet<OperacionRegistroUsoTalonario> OperacionRegistroUsoTalonario { get; set; }
        public virtual DbSet<OperacionRelacionOperacion> OperacionRelacionOperacion { get; set; }
        public virtual DbSet<OperacionRendicion> OperacionRendicion { get; set; }
        public virtual DbSet<OperacionRendicionBilletes> OperacionRendicionBilletes { get; set; }
        public virtual DbSet<OperacionRendicionDetalle> OperacionRendicionDetalle { get; set; }
        public virtual DbSet<OperacionRendicionPase> OperacionRendicionPase { get; set; }
        public virtual DbSet<OperacionResumen> OperacionResumen { get; set; }
        public virtual DbSet<OperacionResumenDetalle> OperacionResumenDetalle { get; set; }
        public virtual DbSet<OperacionRetencion> OperacionRetencion { get; set; }
        public virtual DbSet<OperacionRetencionFacturas> OperacionRetencionFacturas { get; set; }
        public virtual DbSet<OperacionTalonarioEncabezado> OperacionTalonarioEncabezado { get; set; }
        public virtual DbSet<OperacionTalonarioNumeracion> OperacionTalonarioNumeracion { get; set; }
        public virtual DbSet<OperacionTransporte> OperacionTransporte { get; set; }
        public virtual DbSet<OperacionVale> OperacionVale { get; set; }
        public virtual DbSet<OperacionValeCancelacion> OperacionValeCancelacion { get; set; }
        public virtual DbSet<OperacionValeContra> OperacionValeContra { get; set; }
        public virtual DbSet<OperacionValeContraTerminal> OperacionValeContraTerminal { get; set; }
        public virtual DbSet<OperacionVenta> OperacionVenta { get; set; }
        public virtual DbSet<OperacionVentaBaucher> OperacionVentaBaucher { get; set; }
        public virtual DbSet<OperacionVentaBaucherCancelacion> OperacionVentaBaucherCancelacion { get; set; }
        public virtual DbSet<OperacionVentaCaea> OperacionVentaCaea { get; set; }
        public virtual DbSet<OperacionVentaCierreZ> OperacionVentaCierreZ { get; set; }
        public virtual DbSet<OperacionVentaExportacion> OperacionVentaExportacion { get; set; }
        public virtual DbSet<OrdenServicio> OrdenServicio { get; set; }
        public virtual DbSet<OrdenServicioClasificacion> OrdenServicioClasificacion { get; set; }
        public virtual DbSet<OrdenServicioDetalleMantenimiento> OrdenServicioDetalleMantenimiento { get; set; }
        public virtual DbSet<OrdenServicioDetallePrioridad> OrdenServicioDetallePrioridad { get; set; }
        public virtual DbSet<OrdenServicioEquipo> OrdenServicioEquipo { get; set; }
        public virtual DbSet<OrdenServicioEstado> OrdenServicioEstado { get; set; }
        public virtual DbSet<OrdenServicioHabitacion> OrdenServicioHabitacion { get; set; }
        public virtual DbSet<OrdenServicioNroSerie> OrdenServicioNroSerie { get; set; }
        public virtual DbSet<OrdenServicioTecnico> OrdenServicioTecnico { get; set; }
        public virtual DbSet<OrdenServicioTransporte> OrdenServicioTransporte { get; set; }
        public virtual DbSet<OrdenServioTipoEstado> OrdenServioTipoEstado { get; set; }
        public virtual DbSet<Pagador> Pagador { get; set; }
        public virtual DbSet<Pallet> Pallet { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<PermisoEmpresa> PermisoEmpresa { get; set; }
        public virtual DbSet<PermisoEmpresaNroCrtmic> PermisoEmpresaNroCrtmic { get; set; }
        public virtual DbSet<PlanDeCuenta> PlanDeCuenta { get; set; }
        public virtual DbSet<PlanDeCuentaCentroCosto> PlanDeCuentaCentroCosto { get; set; }
        public virtual DbSet<PlanDeCuentaCentroCostoCuenta> PlanDeCuentaCentroCostoCuenta { get; set; }
        public virtual DbSet<PlanDeCuentaClasificacion> PlanDeCuentaClasificacion { get; set; }
        public virtual DbSet<PlanDeCuentaImpuesto> PlanDeCuentaImpuesto { get; set; }
        public virtual DbSet<PlanDeCuentaInventario> PlanDeCuentaInventario { get; set; }
        public virtual DbSet<PlanDeCuentaInventarioAsiento> PlanDeCuentaInventarioAsiento { get; set; }
        public virtual DbSet<PlanDeCuentaInventarioBienTipo> PlanDeCuentaInventarioBienTipo { get; set; }
        public virtual DbSet<PlanDeCuentaInventarioConsignacion> PlanDeCuentaInventarioConsignacion { get; set; }
        public virtual DbSet<PlanDeCuentaInventarioConsignacionAsignacion> PlanDeCuentaInventarioConsignacionAsignacion { get; set; }
        public virtual DbSet<PlanDeCuentaInventarioSeccion> PlanDeCuentaInventarioSeccion { get; set; }
        public virtual DbSet<PlanDeCuentaProyeccion> PlanDeCuentaProyeccion { get; set; }
        public virtual DbSet<PlanDeCuentaTablaIndice> PlanDeCuentaTablaIndice { get; set; }
        public virtual DbSet<PlanDeCuentaTablaIndiceDetalle> PlanDeCuentaTablaIndiceDetalle { get; set; }
        public virtual DbSet<PlanDeCuentaTipoAjuste> PlanDeCuentaTipoAjuste { get; set; }
        public virtual DbSet<PlanDeCuentasTotalizadora> PlanDeCuentasTotalizadora { get; set; }
        public virtual DbSet<PlanDeCuentasTotalizadoraTipo> PlanDeCuentasTotalizadoraTipo { get; set; }
        public virtual DbSet<Produccion> Produccion { get; set; }
        public virtual DbSet<ProduccionGasto> ProduccionGasto { get; set; }
        public virtual DbSet<ProduccionGastoMaquina> ProduccionGastoMaquina { get; set; }
        public virtual DbSet<ProduccionGastoProceso> ProduccionGastoProceso { get; set; }
        public virtual DbSet<ProduccionGastoProducto> ProduccionGastoProducto { get; set; }
        public virtual DbSet<ProduccionInsumosOperacionRecepcionItem> ProduccionInsumosOperacionRecepcionItem { get; set; }
        public virtual DbSet<ProduccionInsumosOrden> ProduccionInsumosOrden { get; set; }
        public virtual DbSet<ProduccionInsumosOrdenItem> ProduccionInsumosOrdenItem { get; set; }
        public virtual DbSet<ProduccionItem> ProduccionItem { get; set; }
        public virtual DbSet<ProduccionMaquina> ProduccionMaquina { get; set; }
        public virtual DbSet<ProduccionMaquinaOperario> ProduccionMaquinaOperario { get; set; }
        public virtual DbSet<ProduccionOperario> ProduccionOperario { get; set; }
        public virtual DbSet<ProduccionOrden> ProduccionOrden { get; set; }
        public virtual DbSet<ProduccionOrdenEstadoTipo> ProduccionOrdenEstadoTipo { get; set; }
        public virtual DbSet<ProduccionOrdenItem> ProduccionOrdenItem { get; set; }
        public virtual DbSet<ProduccionOrdenItemDesglose> ProduccionOrdenItemDesglose { get; set; }
        public virtual DbSet<ProduccionOrdenItemProceso> ProduccionOrdenItemProceso { get; set; }
        public virtual DbSet<ProduccionOrdenItemProgramacion> ProduccionOrdenItemProgramacion { get; set; }
        public virtual DbSet<ProduccionOrdenItemProgramacionInsumos> ProduccionOrdenItemProgramacionInsumos { get; set; }
        public virtual DbSet<ProduccionOrdenItemTipoEstado> ProduccionOrdenItemTipoEstado { get; set; }
        public virtual DbSet<ProduccionOrdenItemTipoPrioridad> ProduccionOrdenItemTipoPrioridad { get; set; }
        public virtual DbSet<ProduccionProceso> ProduccionProceso { get; set; }
        public virtual DbSet<ProduccionProcesoMaquina> ProduccionProcesoMaquina { get; set; }
        public virtual DbSet<ProduccionProgramacion> ProduccionProgramacion { get; set; }
        public virtual DbSet<ProduccionProgramacionItem> ProduccionProgramacionItem { get; set; }
        public virtual DbSet<ProduccionTecnico> ProduccionTecnico { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<ProductoBase> ProductoBase { get; set; }
        public virtual DbSet<ProductoBaseImagen> ProductoBaseImagen { get; set; }
        public virtual DbSet<ProductoCaracteristica1> ProductoCaracteristica1 { get; set; }
        public virtual DbSet<ProductoCaracteristica1Tipo> ProductoCaracteristica1Tipo { get; set; }
        public virtual DbSet<ProductoCaracteristica2> ProductoCaracteristica2 { get; set; }
        public virtual DbSet<ProductoCaracteristica2Tipo> ProductoCaracteristica2Tipo { get; set; }
        public virtual DbSet<ProductoCaracteristica3> ProductoCaracteristica3 { get; set; }
        public virtual DbSet<ProductoCaracteristica3Tipo> ProductoCaracteristica3Tipo { get; set; }
        public virtual DbSet<ProductoClasificacion> ProductoClasificacion { get; set; }
        public virtual DbSet<ProductoCodigoActividad> ProductoCodigoActividad { get; set; }
        public virtual DbSet<ProductoCodigoBarra> ProductoCodigoBarra { get; set; }
        public virtual DbSet<ProductoCombo> ProductoCombo { get; set; }
        public virtual DbSet<ProductoComboActivacion> ProductoComboActivacion { get; set; }
        public virtual DbSet<ProductoComboItem> ProductoComboItem { get; set; }
        public virtual DbSet<ProductoComboItemOpcion> ProductoComboItemOpcion { get; set; }
        public virtual DbSet<ProductoComisionEspecial> ProductoComisionEspecial { get; set; }
        public virtual DbSet<ProductoCosto> ProductoCosto { get; set; }
        public virtual DbSet<ProductoCostoDescuento> ProductoCostoDescuento { get; set; }
        public virtual DbSet<ProductoCostoDescuentoHistorico> ProductoCostoDescuentoHistorico { get; set; }
        public virtual DbSet<ProductoCostoHistorico> ProductoCostoHistorico { get; set; }
        public virtual DbSet<ProductoCostoRecargo> ProductoCostoRecargo { get; set; }
        public virtual DbSet<ProductoCostoRecargoHistorico> ProductoCostoRecargoHistorico { get; set; }
        public virtual DbSet<ProductoCostoTipo> ProductoCostoTipo { get; set; }
        public virtual DbSet<ProductoEnvase> ProductoEnvase { get; set; }
        public virtual DbSet<ProductoEnvaseConsignacion> ProductoEnvaseConsignacion { get; set; }
        public virtual DbSet<ProductoFamilia> ProductoFamilia { get; set; }
        public virtual DbSet<ProductoFamiliaTipo> ProductoFamiliaTipo { get; set; }
        public virtual DbSet<ProductoFamiliaTipoSector> ProductoFamiliaTipoSector { get; set; }
        public virtual DbSet<ProductoHotelRest> ProductoHotelRest { get; set; }
        public virtual DbSet<ProductoHotelRestCategoria> ProductoHotelRestCategoria { get; set; }
        public virtual DbSet<ProductoHotelRestReserva> ProductoHotelRestReserva { get; set; }
        public virtual DbSet<ProductoImpuesto> ProductoImpuesto { get; set; }
        public virtual DbSet<ProductoLista> ProductoLista { get; set; }
        public virtual DbSet<ProductoListaPrecio> ProductoListaPrecio { get; set; }
        public virtual DbSet<ProductoListaPrecioComision> ProductoListaPrecioComision { get; set; }
        public virtual DbSet<ProductoListaSucursal> ProductoListaSucursal { get; set; }
        public virtual DbSet<ProductoListadoColector> ProductoListadoColector { get; set; }
        public virtual DbSet<ProductoMarca> ProductoMarca { get; set; }
        public virtual DbSet<ProductoMarcaManufactur> ProductoMarcaManufactur { get; set; }
        public virtual DbSet<ProductoMarcaServis> ProductoMarcaServis { get; set; }
        public virtual DbSet<ProductoMarcaTipo> ProductoMarcaTipo { get; set; }
        public virtual DbSet<ProductoNroSerie> ProductoNroSerie { get; set; }
        public virtual DbSet<ProductoNroSerieAtributo> ProductoNroSerieAtributo { get; set; }
        public virtual DbSet<ProductoNroSerieDetalle> ProductoNroSerieDetalle { get; set; }
        public virtual DbSet<ProductoNroSerieEstado> ProductoNroSerieEstado { get; set; }
        public virtual DbSet<ProductoNroSerieLote> ProductoNroSerieLote { get; set; }
        public virtual DbSet<ProductoNroSerieLoteEstado> ProductoNroSerieLoteEstado { get; set; }
        public virtual DbSet<ProductoNroSerieLoteFraccion> ProductoNroSerieLoteFraccion { get; set; }
        public virtual DbSet<ProductoNroSerieMovimiento> ProductoNroSerieMovimiento { get; set; }
        public virtual DbSet<ProductoNuevaListaPrecio> ProductoNuevaListaPrecio { get; set; }
        public virtual DbSet<ProductoOferta> ProductoOferta { get; set; }
        public virtual DbSet<ProductoOferta2> ProductoOferta2 { get; set; }
        public virtual DbSet<ProductoOferta2BonoSorteo> ProductoOferta2BonoSorteo { get; set; }
        public virtual DbSet<ProductoOferta2Configuracion> ProductoOferta2Configuracion { get; set; }
        public virtual DbSet<ProductoOferta2Normal> ProductoOferta2Normal { get; set; }
        public virtual DbSet<ProductoOferta2PrecioBonifCantidad> ProductoOferta2PrecioBonifCantidad { get; set; }
        public virtual DbSet<ProductoOferta2PromoXcantidad> ProductoOferta2PromoXcantidad { get; set; }
        public virtual DbSet<ProductoOferta2VoucherCompra> ProductoOferta2VoucherCompra { get; set; }
        public virtual DbSet<ProductoPallet> ProductoPallet { get; set; }
        public virtual DbSet<ProductoPalletItem> ProductoPalletItem { get; set; }
        public virtual DbSet<ProductoPrecioHistorico> ProductoPrecioHistorico { get; set; }
        public virtual DbSet<ProductoPresentacion> ProductoPresentacion { get; set; }
        public virtual DbSet<ProductoPresentacionTipo> ProductoPresentacionTipo { get; set; }
        public virtual DbSet<ProductoProcesoInsumo> ProductoProcesoInsumo { get; set; }
        public virtual DbSet<ProductoProcesoPrecio> ProductoProcesoPrecio { get; set; }
        public virtual DbSet<ProductoProveedor> ProductoProveedor { get; set; }
        public virtual DbSet<ProductoProveedorInventario> ProductoProveedorInventario { get; set; }
        public virtual DbSet<ProductoProveedorInventarioItems> ProductoProveedorInventarioItems { get; set; }
        public virtual DbSet<ProductoRelacionProducto> ProductoRelacionProducto { get; set; }
        public virtual DbSet<ProductoStock> ProductoStock { get; set; }
        public virtual DbSet<ProductoUbicacion> ProductoUbicacion { get; set; }
        public virtual DbSet<ProductoUbicacionStock> ProductoUbicacionStock { get; set; }
        public virtual DbSet<ProductoVencimiento> ProductoVencimiento { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<ProveedorBanco> ProveedorBanco { get; set; }
        public virtual DbSet<ProveedorClasificacion> ProveedorClasificacion { get; set; }
        public virtual DbSet<ProveedorMarca> ProveedorMarca { get; set; }
        public virtual DbSet<Proyecto> Proyecto { get; set; }
        public virtual DbSet<Publicidad> Publicidad { get; set; }
        public virtual DbSet<RepartoDespachos> RepartoDespachos { get; set; }
        public virtual DbSet<RepartoPedido> RepartoPedido { get; set; }
        public virtual DbSet<RepartoRendicion> RepartoRendicion { get; set; }
        public virtual DbSet<RepartoVentaDirecta> RepartoVentaDirecta { get; set; }
        public virtual DbSet<Reporte> Reporte { get; set; }
        public virtual DbSet<Ruta> Ruta { get; set; }
        public virtual DbSet<Sector> Sector { get; set; }
        public virtual DbSet<Seguro> Seguro { get; set; }
        public virtual DbSet<SeguroPoliza> SeguroPoliza { get; set; }
        public virtual DbSet<Servis> Servis { get; set; }
        public virtual DbSet<ServisEstado> ServisEstado { get; set; }
        public virtual DbSet<ServisItem> ServisItem { get; set; }
        public virtual DbSet<ServisProcesos> ServisProcesos { get; set; }
        public virtual DbSet<SincronizacionTerminal> SincronizacionTerminal { get; set; }
        public virtual DbSet<Socios> Socios { get; set; }
        public virtual DbSet<SociosClasificacion> SociosClasificacion { get; set; }
        public virtual DbSet<SoporteAbono> SoporteAbono { get; set; }
        public virtual DbSet<SoporteAbonoCasoTarea> SoporteAbonoCasoTarea { get; set; }
        public virtual DbSet<SoporteCaso> SoporteCaso { get; set; }
        public virtual DbSet<SoporteCasoEstado> SoporteCasoEstado { get; set; }
        public virtual DbSet<SoporteCasoTarea> SoporteCasoTarea { get; set; }
        public virtual DbSet<SoporteCasoTipo> SoporteCasoTipo { get; set; }
        public virtual DbSet<SoporteClienteConecxion> SoporteClienteConecxion { get; set; }
        public virtual DbSet<SoporteTareasEtapas> SoporteTareasEtapas { get; set; }
        public virtual DbSet<SoporteTecnico> SoporteTecnico { get; set; }
        public virtual DbSet<SoporteTecnicoServicios> SoporteTecnicoServicios { get; set; }
        public virtual DbSet<Sucursal> Sucursal { get; set; }
        public virtual DbSet<Supervisor> Supervisor { get; set; }
        public virtual DbSet<SupervisorVendedor> SupervisorVendedor { get; set; }
        public virtual DbSet<TableDb> TableDb { get; set; }
        public virtual DbSet<TableroControl> TableroControl { get; set; }
        public virtual DbSet<Transporte> Transporte { get; set; }
        public virtual DbSet<TransporteAduana> TransporteAduana { get; set; }
        public virtual DbSet<TransporteAutorizacionCarga> TransporteAutorizacionCarga { get; set; }
        public virtual DbSet<TransporteAutorizacionCargaDetalle> TransporteAutorizacionCargaDetalle { get; set; }
        public virtual DbSet<TransporteAutorizacionCargaDetalleTransporteCarga> TransporteAutorizacionCargaDetalleTransporteCarga { get; set; }
        public virtual DbSet<TransporteAutorizacionRemito> TransporteAutorizacionRemito { get; set; }
        public virtual DbSet<TransporteCapacidad> TransporteCapacidad { get; set; }
        public virtual DbSet<TransporteCarga> TransporteCarga { get; set; }
        public virtual DbSet<TransporteCargaAdicionales> TransporteCargaAdicionales { get; set; }
        public virtual DbSet<TransporteCargaCierrePeriodo> TransporteCargaCierrePeriodo { get; set; }
        public virtual DbSet<TransporteCargaCierrePeriodoDetalle> TransporteCargaCierrePeriodoDetalle { get; set; }
        public virtual DbSet<TransporteCargaCierrePeriodoTipoCarga> TransporteCargaCierrePeriodoTipoCarga { get; set; }
        public virtual DbSet<TransporteCargaCierrePeriodoVehiculos> TransporteCargaCierrePeriodoVehiculos { get; set; }
        public virtual DbSet<TransporteCargaConceptosAdicionales> TransporteCargaConceptosAdicionales { get; set; }
        public virtual DbSet<TransporteCargaConvencionColectivo> TransporteCargaConvencionColectivo { get; set; }
        public virtual DbSet<TransporteCargaConvenioColectivoDetalle> TransporteCargaConvenioColectivoDetalle { get; set; }
        public virtual DbSet<TransporteCargaEstado> TransporteCargaEstado { get; set; }
        public virtual DbSet<TransporteCargaEstadoFactura> TransporteCargaEstadoFactura { get; set; }
        public virtual DbSet<TransporteCargaEstadoFlete> TransporteCargaEstadoFlete { get; set; }
        public virtual DbSet<TransporteCargaLiquidacion> TransporteCargaLiquidacion { get; set; }
        public virtual DbSet<TransporteCargaMovimiento> TransporteCargaMovimiento { get; set; }
        public virtual DbSet<TransporteCargaMovimientoDetalle> TransporteCargaMovimientoDetalle { get; set; }
        public virtual DbSet<TransporteCargaValorComercialTipo> TransporteCargaValorComercialTipo { get; set; }
        public virtual DbSet<TransporteClaseBultos> TransporteClaseBultos { get; set; }
        public virtual DbSet<TransporteClasificacion> TransporteClasificacion { get; set; }
        public virtual DbSet<TransporteCombustibleConsumoConductor> TransporteCombustibleConsumoConductor { get; set; }
        public virtual DbSet<TransporteCombustibleConsumoVehiculo> TransporteCombustibleConsumoVehiculo { get; set; }
        public virtual DbSet<TransporteCombustibleImputacion> TransporteCombustibleImputacion { get; set; }
        public virtual DbSet<TransporteCombustibleRuteo> TransporteCombustibleRuteo { get; set; }
        public virtual DbSet<TransporteConductor> TransporteConductor { get; set; }
        public virtual DbSet<TransporteConductorEnteCarnet> TransporteConductorEnteCarnet { get; set; }
        public virtual DbSet<TransporteContrareembolso> TransporteContrareembolso { get; set; }
        public virtual DbSet<TransporteCrt> TransporteCrt { get; set; }
        public virtual DbSet<TransporteCrtestado> TransporteCrtestado { get; set; }
        public virtual DbSet<TransporteCrtviajes> TransporteCrtviajes { get; set; }
        public virtual DbSet<TransporteCubierta> TransporteCubierta { get; set; }
        public virtual DbSet<TransporteCubiertaMovimientoDetalle> TransporteCubiertaMovimientoDetalle { get; set; }
        public virtual DbSet<TransporteCubiertaTipo> TransporteCubiertaTipo { get; set; }
        public virtual DbSet<TransporteCubiertaUbicacion> TransporteCubiertaUbicacion { get; set; }
        public virtual DbSet<TransporteMandado> TransporteMandado { get; set; }
        public virtual DbSet<TransporteMantenimiento> TransporteMantenimiento { get; set; }
        public virtual DbSet<TransporteMantenimientoDetalle> TransporteMantenimientoDetalle { get; set; }
        public virtual DbSet<TransporteMic> TransporteMic { get; set; }
        public virtual DbSet<TransporteMiccrt> TransporteMiccrt { get; set; }
        public virtual DbSet<TransporteMovimientoDestino> TransporteMovimientoDestino { get; set; }
        public virtual DbSet<TransporteOrigenDestino> TransporteOrigenDestino { get; set; }
        public virtual DbSet<TransportePasCarnet> TransportePasCarnet { get; set; }
        public virtual DbSet<TransportePasCarnetDetalle> TransportePasCarnetDetalle { get; set; }
        public virtual DbSet<TransportePasEnteCarnetTipo> TransportePasEnteCarnetTipo { get; set; }
        public virtual DbSet<TransportePasEntregaBoletoDetalle> TransportePasEntregaBoletoDetalle { get; set; }
        public virtual DbSet<TransportePasEntregaRolloBoleto> TransportePasEntregaRolloBoleto { get; set; }
        public virtual DbSet<TransportePasLinea> TransportePasLinea { get; set; }
        public virtual DbSet<TransportePasLineaPunto> TransportePasLineaPunto { get; set; }
        public virtual DbSet<TransportePasLineaRecorrido> TransportePasLineaRecorrido { get; set; }
        public virtual DbSet<TransportePasLiquidacion> TransportePasLiquidacion { get; set; }
        public virtual DbSet<TransportePasLiquidacionDesglose> TransportePasLiquidacionDesglose { get; set; }
        public virtual DbSet<TransportePasLiquidacionDetalle> TransportePasLiquidacionDetalle { get; set; }
        public virtual DbSet<TransportePasLiquidacionPlanilla> TransportePasLiquidacionPlanilla { get; set; }
        public virtual DbSet<TransportePasProgramacionDia> TransportePasProgramacionDia { get; set; }
        public virtual DbSet<TransportePasProgramacionDiaDetalle> TransportePasProgramacionDiaDetalle { get; set; }
        public virtual DbSet<TransportePasRecorrido> TransportePasRecorrido { get; set; }
        public virtual DbSet<TransportePasRecorridoDetalle> TransportePasRecorridoDetalle { get; set; }
        public virtual DbSet<TransportePasRecorridoTipo> TransportePasRecorridoTipo { get; set; }
        public virtual DbSet<TransporteRemitos> TransporteRemitos { get; set; }
        public virtual DbSet<TransporteRemitosViajes> TransporteRemitosViajes { get; set; }
        public virtual DbSet<TransporteTipoCarga> TransporteTipoCarga { get; set; }
        public virtual DbSet<TransporteTipoCargaCalculoCc> TransporteTipoCargaCalculoCc { get; set; }
        public virtual DbSet<TransporteTipoCargaProducto> TransporteTipoCargaProducto { get; set; }
        public virtual DbSet<TransporteUnidad> TransporteUnidad { get; set; }
        public virtual DbSet<TransporteVehiculo> TransporteVehiculo { get; set; }
        public virtual DbSet<TransporteVehiculoConductor> TransporteVehiculoConductor { get; set; }
        public virtual DbSet<TransporteVehiculoDatoCompra> TransporteVehiculoDatoCompra { get; set; }
        public virtual DbSet<TransporteVehiculoEstadoUso> TransporteVehiculoEstadoUso { get; set; }
        public virtual DbSet<TransporteVehiculoEvento> TransporteVehiculoEvento { get; set; }
        public virtual DbSet<TransporteVehiculoFoto> TransporteVehiculoFoto { get; set; }
        public virtual DbSet<TransporteVehiculoMantenimiento> TransporteVehiculoMantenimiento { get; set; }
        public virtual DbSet<TransporteVehiculoServicioTipo> TransporteVehiculoServicioTipo { get; set; }
        public virtual DbSet<TransporteVehiculoTipoCarga> TransporteVehiculoTipoCarga { get; set; }
        public virtual DbSet<TransporteViaje> TransporteViaje { get; set; }
        public virtual DbSet<TransporteViajeAdicionales> TransporteViajeAdicionales { get; set; }
        public virtual DbSet<TransporteViajeCelular> TransporteViajeCelular { get; set; }
        public virtual DbSet<TransporteViajeEstado> TransporteViajeEstado { get; set; }
        public virtual DbSet<TransproteCargaRemitos> TransproteCargaRemitos { get; set; }
        public virtual DbSet<Turno> Turno { get; set; }
        public virtual DbSet<UnidadFacturacion> UnidadFacturacion { get; set; }
        public virtual DbSet<UnidadFacturacionClasificacion> UnidadFacturacionClasificacion { get; set; }
        public virtual DbSet<UnidadFacturacionConceptos> UnidadFacturacionConceptos { get; set; }
        public virtual DbSet<UnidadFacturacionEquipo> UnidadFacturacionEquipo { get; set; }
        public virtual DbSet<UnidadFacturacionEquipoEstado> UnidadFacturacionEquipoEstado { get; set; }
        public virtual DbSet<UnidadFacturacionEquipoTomaEstado> UnidadFacturacionEquipoTomaEstado { get; set; }
        public virtual DbSet<UnidadFacturacionItem> UnidadFacturacionItem { get; set; }
        public virtual DbSet<UnidadFacturacionPeriodo> UnidadFacturacionPeriodo { get; set; }
        public virtual DbSet<UnidadFacturacionPeriodoVentas> UnidadFacturacionPeriodoVentas { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioAuditoria> UsuarioAuditoria { get; set; }
        public virtual DbSet<UsuarioAuditoriaTabla> UsuarioAuditoriaTabla { get; set; }
        public virtual DbSet<UsuarioAutorizacionSolicitud> UsuarioAutorizacionSolicitud { get; set; }
        public virtual DbSet<UsuarioAutorizacionSolicitudTipo> UsuarioAutorizacionSolicitudTipo { get; set; }
        public virtual DbSet<Vendedor> Vendedor { get; set; }
        public virtual DbSet<VendedorClasificacion> VendedorClasificacion { get; set; }
        public virtual DbSet<VendedorRepresentada> VendedorRepresentada { get; set; }
        public virtual DbSet<VersionLog> VersionLog { get; set; }
        public virtual DbSet<ZonaGeografica> ZonaGeografica { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccesoMensaje>(entity =>
            {
                entity.Property(e => e.MensajeId).ValueGeneratedNever();

                entity.Property(e => e.EmpleadoId).HasComment("Nro Lejajo como empleado");

                entity.HasOne(d => d.Departamento)
                    .WithMany(p => p.AccesoMensaje)
                    .HasForeignKey(d => d.DepartamentoId)
                    .HasConstraintName("FK_AccesoMensaje_Departamento");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.AccesoMensaje)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_AccesoMensaje_Empleado");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.AccesoMensaje)
                    .HasForeignKey(d => d.TurnoId)
                    .HasConstraintName("FK_AccesoMensaje_Turno");
            });

            modelBuilder.Entity<AccesoTipo>(entity =>
            {
                entity.Property(e => e.TipoAccesoId).ValueGeneratedNever();

                entity.Property(e => e.EntradaSalida).HasComment("1-Entrada 0-Salida");
            });

            modelBuilder.Entity<AfipmisCombantesRecibidos>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.AfipmisCombantesRecibidos)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CompraId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AFIPMisCombantesRecibidos_OperacionCompra");
            });

            modelBuilder.Entity<AutorizacionCompra>(entity =>
            {
                entity.HasKey(e => new { e.AutCompraId, e.TipoOperacionId });

                entity.Property(e => e.AutCompraId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_AutorizacionCompra_Usuario");

                entity.HasOne(d => d.AutCompraEstado)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.AutCompraEstadoId)
                    .HasConstraintName("FK_AutorizacionCompra_AutorizacionCompraEstado");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizacionCompra_Empleado");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizacionCompra_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_AutorizacionCompra_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_AutorizacionCompra_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.AutorizacionCompra)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AutorizacionCompra_Sucursal");
            });

            modelBuilder.Entity<AutorizacionCompraCancelacion>(entity =>
            {
                entity.HasOne(d => d.AutorizacionCompra)
                    .WithMany(p => p.AutorizacionCompraCancelacion)
                    .HasForeignKey(d => new { d.AutCompraId, d.TipoOperacionIdautCompra })
                    .HasConstraintName("FK_AutorizacionCompraCancelacion_AutorizacionCompra");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.AutorizacionCompraCancelacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroPagoId })
                    .HasConstraintName("FK_AutorizacionCompraCancelacion_OperacionCompra");
            });

            modelBuilder.Entity<AutorizacionCompraEstado>(entity =>
            {
                entity.Property(e => e.AutCompraEstadoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Balanza>(entity =>
            {
                entity.Property(e => e.BalanzaId).ValueGeneratedNever();

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.Balanza)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_Balanza_ProductoLista");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Balanza)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Balanza_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Balanza)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Balanza_Sucursal");
            });

            modelBuilder.Entity<BancoTarjeta>(entity =>
            {
                entity.HasComment("Las Distintas Cuentas de Banco y Tarjetas q se utilizan en la empresa");

                entity.Property(e => e.BancoTarjetaId)
                    .ValueGeneratedNever()
                    .HasComment("Cuenta de Banco o Tarjeta");

                entity.Property(e => e.BancoCbu).IsFixedLength();

                entity.Property(e => e.CuentaId).HasComment("Cuenta contable a la que esta relacionada");

                entity.Property(e => e.Observaciones).HasComment("Ingreso todos los datos referentes a la cuenta de este banco/tarjeta");

                entity.Property(e => e.ProveedorId).HasComment("Nro Proveedor, utilizado para indicar al realizar los pagos por deposito o por carga de gastos en Compras");

                entity.Property(e => e.Reporte).HasComment("Reporte a Utilizar para Impresion Cheque");

                entity.Property(e => e.ReporteDiferido).HasComment("Reporte a Utilizar para Impresion Cheque Diferido");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalBanco).HasComment("Nro de la Sucursal del Banco");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TipoCuenta).HasComment("1-Cuenta Banco 2-Cuenta Tarjeta");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.BancoTarjeta)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_BancoTarjeta_PlanDeCuentas");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.BancoTarjeta)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_BancoTarjeta_EmpresaDatos");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.BancoTarjeta)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_BancoTarjeta_Proveedor");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.BancoTarjeta)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_BancoTarjeta_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BancoTarjeta)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BancoTarjeta_Sucursal");
            });

            modelBuilder.Entity<BancoTarjetaConciliacion>(entity =>
            {
                entity.HasComment("Permite llebar registro de las conciliaciones bancarias/Tarjetas Realizadas");

                entity.Property(e => e.ConciliacionId).ValueGeneratedNever();

                entity.Property(e => e.BancoTarjetaId).HasComment("Cuenta de Banco o Tarjeta");

                entity.Property(e => e.ConciliacionAnteriorId).HasComment("Conciliacion anterior de la que se obiene el saldo Inicial ");

                entity.Property(e => e.DesdeFecha).HasComment("Periodo Fecha Desde");

                entity.Property(e => e.HastaFecha).HasComment("Periodo Fecha Hasta");

                entity.Property(e => e.SaldoInicial).HasComment("Saldo Inicial");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.BancoTarjetaConciliacion)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .HasConstraintName("FK_BancoTarjetaConciliacion_BancoTarjeta");
            });

            modelBuilder.Entity<BancoTarjetaDebe>(entity =>
            {
                entity.HasComment("Detalle Debitos Banco/Tarjeta - Depositos saldos a fabor");

                entity.Property(e => e.BancoTarjetaId).HasComment("Cuenta de Banco o Tarjeta");

                entity.Property(e => e.ChequeId).HasComment("Inica el Registro vinculado cheque terecero q se deposito");

                entity.Property(e => e.Detalle).HasComment("Datos referidos a la realizacion del depostito o trnasferencia a nuestra cuenta");

                entity.Property(e => e.Emisor).HasComment("quien realiza el Deposito o trasnferencia");

                entity.Property(e => e.FechaDebitado).HasComment("Fecha en la que el banco acredita en nuestra cuenta el Importe");

                entity.Property(e => e.FechaEmision).HasComment("Fecha en la que se realiza la transferencia / Deposito");

                entity.Property(e => e.Importe).HasComment("Importe del Deposito/Transferencia");

                entity.Property(e => e.LoteTarjeta).HasComment("Nro de Cierre lote que se emite en el POSNet");

                entity.Property(e => e.OperacionesDebitoTipoId).HasComment("1-Deposito Efectivo 2-Deposito Valores 3-Transferencias Recibidas 4-Intereses Percibidos 5-Ingresos Extras  100-Otros");

                entity.Property(e => e.PagoId).HasComment("Nro Imputacion del PAGO");

                entity.Property(e => e.RegistroEntidadId).HasComment("");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado por medio de esta relacion con OperacionDetallePago se puede determinar mediante q comprobante y Operacion ingreso este debito al banco");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoEntidadId).HasComment("");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .HasConstraintName("FK_BancoTarjetaDebe_BancoTarjeta");

                entity.HasOne(d => d.Cheque)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.ChequeId)
                    .HasConstraintName("FK_BancoTarjetaDebe_ChequeTerceros");

                entity.HasOne(d => d.Conciliacion)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.ConciliacionId)
                    .HasConstraintName("FK_BancoTarjetaDebe_BancoTarjetaConciliacion");

                entity.HasOne(d => d.RegistroLote)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.RegistroLoteId)
                    .HasConstraintName("FK_BancoTarjetaDebe_BancoTarjeteLoteDetalle");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BancoTarjetaDebe_OperacionDetallePago");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BancoTarjetaDebe_Sucursal");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.BancoTarjetaDebe)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.PagoId })
                    .HasConstraintName("FK_BancoTarjetaDebe_OperacionPago");
            });

            modelBuilder.Entity<BancoTarjetaFirmanteAutorizado>(entity =>
            {
                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.BancoTarjetaFirmanteAutorizado)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BancoTarjetaFirmanteAutorizado_BancoTarjeta");

                entity.HasOne(d => d.Firmante)
                    .WithMany(p => p.BancoTarjetaFirmanteAutorizado)
                    .HasForeignKey(d => d.FirmanteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BancoTarjetaFirmanteAutorizado_BancoTarjetaFirmante");
            });

            modelBuilder.Entity<BancoTarjetaHaber>(entity =>
            {
                entity.Property(e => e.BancoTarjetaId).HasComment("Cuenta de Banco o Tarjeta");

                entity.Property(e => e.Beneficiario).HasComment("Quien recibe el Cheque (a quien se paga)");

                entity.Property(e => e.ChequeId).HasComment("Inica el Registro vinculado cheque terecero q se deposito (utilizado para cuenta Banco Adm.cartera - de Cheques)");

                entity.Property(e => e.Detalle).HasComment("Datos referidos a la realizacion del depostito o trnasferencia a nuestra cuenta");

                entity.Property(e => e.FechaAcreditacion).HasComment("Fecha en la que el banco acredita en nuestra cuenta el Importe");

                entity.Property(e => e.FechaEmision).HasComment("Fecha en la que se realiza la transferencia / Deposito");

                entity.Property(e => e.FechaPago).HasComment("Fecha de Pago (Utilizado para Cheques/Tarjetas)");

                entity.Property(e => e.Importe).HasComment("Importe del cheque");

                entity.Property(e => e.OperacionesDebitoTipoId).HasComment("101-Cheque 102-Extraccion 103-Trasnferencia Pgo. 104-Interese Pagados 105-Gastos 200-Otros");

                entity.Property(e => e.RegistroEntidadId).HasComment("");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado por medio de esta relacion con OperacionDetallePago se puede determinar mediante q comprobante y Operacion ingreso este debito al banco");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoEntidadId).HasComment("");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .HasConstraintName("FK_BancoTarjetaHaber_BancoTarjeta");

                entity.HasOne(d => d.Conciliacion)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.ConciliacionId)
                    .HasConstraintName("FK_BancoTarjetaHaber_BancoTarjetaConciliacion");

                entity.HasOne(d => d.LiquidBanco)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.LiquidBancoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_BancoTarjetaHaber_BancoTarjetaHaberLiquidacion");

                entity.HasOne(d => d.NroChequeraNavigation)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.NroChequera)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BancoTarjetaHaber_Chequera");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BancoTarjetaHaber_OperacionDetallePago");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BancoTarjetaHaber)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BancoTarjetaHaber_Sucursal");
            });

            modelBuilder.Entity<BancoTarjetaHaberLiquidacion>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.BancoTarjetaHaberLiquidacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_BancoTarjetaHaberLiquidacion_Usuario");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.BancoTarjetaHaberLiquidacion)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_BancoTarjetaHaberLiquidacion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BancoTarjetaHaberLiquidacion)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BancoTarjetaHaberLiquidacion_Sucursal");
            });

            modelBuilder.Entity<BancoTarjetaLote>(entity =>
            {
                entity.Property(e => e.LoteTarjeta).HasComment("Nro de Cierre lote que se emite en el POSNet");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.BancoTarjetaLote)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_BancoTarjetaLote_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BancoTarjetaLote)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BancoTarjetaLote_Sucursal");
            });

            modelBuilder.Entity<BancoTarjeteLoteDetalle>(entity =>
            {
                entity.Property(e => e.BancoTarjetaId).HasComment("Cuenta de Banco o Tarjeta");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.BancoTarjeteLoteDetalle)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BancoTarjeteLoteDetalle_BancoTarjeta");

                entity.HasOne(d => d.Lote)
                    .WithMany(p => p.BancoTarjeteLoteDetalle)
                    .HasForeignKey(d => d.LoteId)
                    .HasConstraintName("FK_BancoTarjeteLoteDetalle_BancoTarjetaLote");
            });

            modelBuilder.Entity<BasculaBalanza>(entity =>
            {
                entity.Property(e => e.BalanzaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BasculaCapataz>(entity =>
            {
                entity.Property(e => e.CapatazId).ValueGeneratedNever();

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.BasculaCapataz)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaCapataz_EntidadSucursal");
            });

            modelBuilder.Entity<BasculaCapatazCuadrilla>(entity =>
            {
                entity.HasKey(e => e.CuadrilleroId)
                    .HasName("PK_BasculaGrupoTrabajo");

                entity.HasComment("Determina todos los Empleados q estan bajo un determinado Capataz");

                entity.Property(e => e.CuadrilleroId).ValueGeneratedNever();

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.TipoCalculo).HasComment("0-No aplica 1-repite Cantidad TIkete Bascula, 2-Dsglosa la cantidad por cada empleado (la suma del desglose del ticket tiene q coincidir con la del ticket)");

                entity.Property(e => e.TipoId).HasComment("0=Tumba; 1=Arrastra; 2=Carga");

                entity.HasOne(d => d.Capataz)
                    .WithMany(p => p.BasculaCapatazCuadrilla)
                    .HasForeignKey(d => d.CapatazId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaGrupoTrabajo_BasculaCapataz");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.BasculaCapatazCuadrilla)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaCapatazCuadrilla_EntidadSucursal");
            });

            modelBuilder.Entity<BasculaEntidadSucursal>(entity =>
            {
                entity.HasComment("Precio q se paga lote de donde estan sacando la Madera, quue se paga al conductor");

                entity.Property(e => e.RegEntidadSucBas).ValueGeneratedNever();

                entity.Property(e => e.CoeficAjusteCantidad).HasComment("Coeficiente a Aplicar para el calculo descueto/recargo");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.TipoRegistroBascula).HasComment("0-Inhabilitado 1-Ingreso 2-Salida (Valor Binario)");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.BasculaEntidadSucursal)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_BasculaEntidadSucursal_EntidadSucursal");
            });

            modelBuilder.Entity<BasculaOperador>(entity =>
            {
                entity.Property(e => e.OperBasculaId).ValueGeneratedNever();

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.BasculaOperador)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaOperador_Empleado");
            });

            modelBuilder.Entity<BasculaPesaje>(entity =>
            {
                entity.Property(e => e.BalanzaId).HasComment("Balanza q Realiza el pesaje");

                entity.Property(e => e.CoeficAjusteCantidad).HasComment("Coeficiente a Aplicar para el calculo descueto/recargo");

                entity.Property(e => e.ConductorId).HasComment("Nro de Conductor/Chofer");

                entity.Property(e => e.DesTara).HasComment("Peso del Vehiculo al Salir");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad Indica CLiente o Proveedor al que corresponde el registro ");

                entity.Property(e => e.NroRemito).HasComment("Ingresamos el nro de remito q nos trae el productor");

                entity.Property(e => e.RegProdBasculaId).HasComment("Trae el CodigoIDvinculado en este momento");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro de venta o Compra a la q pertenece");

                entity.Property(e => e.ResumenBasculaId).HasComment("Determina en que cierre esta incluido ");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.Tara).HasComment("Peso total del vehiculo al Ingresar");

                entity.Property(e => e.TipoOperacionId).HasComment("21-Recepcion 20-Despacho (No utilizar para la Numeracion Comprobante)");

                entity.Property(e => e.TipoRegistroBascula).HasComment("0-Inhabilitado 1-Ingreso 2-Salida (Valor Binario)");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_BasculaPesaje_Usuario");

                entity.HasOne(d => d.Balanza)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.BalanzaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesaje_BasculaBalanza");

                entity.HasOne(d => d.BasaculaLiq)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.BasaculaLiqId)
                    .HasConstraintName("FK_BasculaPesaje_BasculaPesajeLiquid");

                entity.HasOne(d => d.Capataz)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.CapatazId)
                    .HasConstraintName("FK_BasculaPesaje_BasculaCapataz");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesaje_Producto");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_BasculaPesaje_TransporteConductor");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_BasculaPesaje_Deposito");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_BasculaPesaje_EntidadSucursal");

                entity.HasOne(d => d.OperBascula)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.OperBasculaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesaje_BasculaOperador");

                entity.HasOne(d => d.RegEntidadSucBasNavigation)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.RegEntidadSucBas)
                    .HasConstraintName("FK_BasculaPesaje_BasculaEntidadSucursal");

                entity.HasOne(d => d.RegProdBascula)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.RegProdBasculaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesaje_BasculaProducto");

                entity.HasOne(d => d.ResumenBascula)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.ResumenBasculaId)
                    .HasConstraintName("FK_BasculaPesaje_BasculaResumen");

                entity.HasOne(d => d.Secadero)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.SecaderoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_BasculaPesaje_BasculaSecadero");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_BasculaPesaje_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_BasculaPesaje_Sucursal");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_BasculaPesaje_TransporteVehiculo");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_BasculaPesaje_OperacionDespacho");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.BasculaPesaje)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_BasculaPesaje_OperacionRecepcion");
            });

            modelBuilder.Entity<BasculaPesajeDesglose>(entity =>
            {
                entity.HasKey(e => e.RegistoId)
                    .HasName("PK_BasculaPesajeGrupoTrabajo");

                entity.Property(e => e.TipoCalculo).HasComment("0-No aplica 1-repite Cantidad TIkete Bascula, 2-Dsglosa la cantidad por cada empleado (la suma del desglose del ticket tiene q coincidir con la del ticket)");

                entity.HasOne(d => d.Pesaje)
                    .WithMany(p => p.BasculaPesajeDesglose)
                    .HasForeignKey(d => d.PesajeId)
                    .HasConstraintName("FK_BasculaPesajeGrupoTrabajo_BasculaPesaje");
            });

            modelBuilder.Entity<BasculaPesajeLiquid>(entity =>
            {
                entity.HasOne(d => d.Capataz)
                    .WithMany(p => p.BasculaPesajeLiquid)
                    .HasForeignKey(d => d.CapatazId)
                    .HasConstraintName("FK_BasculaPesajeLiquid_BasculaCapataz");

                entity.HasOne(d => d.RegEntidadSucBasNavigation)
                    .WithMany(p => p.BasculaPesajeLiquid)
                    .HasForeignKey(d => d.RegEntidadSucBas)
                    .HasConstraintName("FK_BasculaPesajeLiquid_BasculaEntidadSucursal");

                entity.HasOne(d => d.RegProdBascula)
                    .WithMany(p => p.BasculaPesajeLiquid)
                    .HasForeignKey(d => d.RegProdBasculaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesajeLiquid_BasculaProducto");
            });

            modelBuilder.Entity<BasculaPesajeLiquidDetalle>(entity =>
            {
                entity.HasOne(d => d.BasaculaLiq)
                    .WithMany(p => p.BasculaPesajeLiquidDetalle)
                    .HasForeignKey(d => d.BasaculaLiqId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesajeLiquidDetalle_BasculaPesajeLiquid");

                entity.HasOne(d => d.Cuadrillero)
                    .WithMany(p => p.BasculaPesajeLiquidDetalle)
                    .HasForeignKey(d => d.CuadrilleroId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaPesajeLiquidDetalle_BasculaCapatazCuadrilla");
            });

            modelBuilder.Entity<BasculaProducto>(entity =>
            {
                entity.Property(e => e.RegProdBasculaId).ValueGeneratedNever();

                entity.Property(e => e.TipoRegistroBascula).HasComment("0-Inhabilitado 1-Ingreso 2-Salida (Valor Binario)");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.BasculaProducto)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaProducto_Producto");
            });

            modelBuilder.Entity<BasculaProductoDeposito>(entity =>
            {
                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.HasOne(d => d.Balanza)
                    .WithMany(p => p.BasculaProductoDeposito)
                    .HasForeignKey(d => d.BalanzaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaProductoDeposito_BasculaBalanza");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.BasculaProductoDeposito)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaProductoDeposito_Deposito");

                entity.HasOne(d => d.RegProdBascula)
                    .WithMany(p => p.BasculaProductoDeposito)
                    .HasForeignKey(d => d.RegProdBasculaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BasculaProductoDeposito_BasculaProducto");
            });

            modelBuilder.Entity<BasculaResumen>(entity =>
            {
                entity.HasOne(d => d.Balanza)
                    .WithMany(p => p.BasculaResumen)
                    .HasForeignKey(d => d.BalanzaId)
                    .HasConstraintName("FK_BasculaResumen_BasculaBalanza");
            });

            modelBuilder.Entity<BasculaSecadero>(entity =>
            {
                entity.Property(e => e.SecaderoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BilletesDesglose>(entity =>
            {
                entity.Property(e => e.DesgloseId).ValueGeneratedNever();

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.BilletesDesglose)
                    .HasForeignKey(d => d.MonedaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BilletesDesglose_MonedaTipo");
            });

            modelBuilder.Entity<BuscarConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.AlmaUserId, e.TableId });

                entity.Property(e => e.TipoBusqueda).HasComment("0-Completa 1-Primeras Letras 2-Exacto");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.BuscarConfiguracion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_BuscarConfiguracion_Usuario");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.BuscarConfiguracion)
                    .HasForeignKey(d => d.TableId)
                    .HasConstraintName("FK_BuscarConfiguracion_TableDB");
            });

            modelBuilder.Entity<ChequeTerceros>(entity =>
            {
                entity.Property(e => e.BancoDescrip).HasComment("Nombre del Banco");

                entity.Property(e => e.BancoFilialId).HasComment("De AlmaNET.BancoFilial");

                entity.Property(e => e.BancoId).HasComment("De AlmaNET.Banco");

                entity.Property(e => e.Beneficiario).HasComment("Persona q recibe el cheque");

                entity.Property(e => e.BeneficiarioRegistroEntidadId).HasComment("Cual es el Numero q corresponde al BeneficiarioTipoEntidadID");

                entity.Property(e => e.BeneficiarioTipoEntidadId).HasComment("Que tipo entidad q es  Beneficiario/ Persona a la que se le da el Cheque (Cliente/Proveedor etc.)");

                entity.Property(e => e.Ciudad).HasComment("Nombre Ciudad/Localidad");

                entity.Property(e => e.CiudadId).HasComment("Codigo Ciudad");

                entity.Property(e => e.CuentaNro).HasComment("Nro de Cuenta");

                entity.Property(e => e.DetalleIngreso).HasComment("Descripcion detalle motivo por el que ingreso el Cheque");

                entity.Property(e => e.DetalleSalida).HasComment("Detalle Salida Cheque");

                entity.Property(e => e.FechaReemitido).HasComment("Fecha en que se dio el cheque");

                entity.Property(e => e.IngresoRegistroPagoId).HasComment("Nro del registro del Pago realizado por el cual Ingreso el Cheque");

                entity.Property(e => e.NroIdentificacion).HasComment("Nro de Cuit/ Nro Documento, Cedula etc.");

                entity.Property(e => e.Provincia).HasComment("Nombre Provincia Estado");

                entity.Property(e => e.SalidaRegistroPagoId).HasComment("Nro del registro del Pago realizado por el cual Salio el Cheque");

                entity.Property(e => e.TenedorCheque).HasComment("Quien la persona q entrega el cheque");

                entity.Property(e => e.TenedorEsTitularCta).HasComment("Indica si el Tenedor del Cheque es el Titular de la Cuenta (Titular CUenta== a la persona q nos entrega el Cheque)");

                entity.Property(e => e.TenedorRegistroEntidadId).HasComment("Cual es el Numero q corresponde al TenedorTipoEntidadID");

                entity.Property(e => e.TenedorTipoEntidadId).HasComment("Que tipo entidad es  Tenedor (Cliente/Proveedor etc.)");

                entity.Property(e => e.TipoNroIdentificacion).HasComment("0-Nada 1-Fiscal 2-Documento // Se obtiene de AlmaNet EntidadNroIdentificacionTipo");

                entity.Property(e => e.TitularCuenta).HasComment("Nombre/Razon Social Titular de la Cuenta");

                entity.Property(e => e.TitularRegistroEntidadId).HasComment("Cual es el Numero q corresponde al TitularTipoEntidadID");

                entity.Property(e => e.TitularTipoEntidadId).HasComment("Que tipo entidad es  Titular de la Cuenta (Cliente/Proveedor etc.)");

                entity.HasOne(d => d.IngresoRegistroPago)
                    .WithMany(p => p.ChequeTercerosIngresoRegistroPago)
                    .HasForeignKey(d => d.IngresoRegistroPagoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ChequeTerceros_OperacionDetallePago");

                entity.HasOne(d => d.SalidaRegistroPago)
                    .WithMany(p => p.ChequeTercerosSalidaRegistroPago)
                    .HasForeignKey(d => d.SalidaRegistroPagoId)
                    .HasConstraintName("FK_ChequeTerceros_OperacionDetallePago1");
            });

            modelBuilder.Entity<Chequera>(entity =>
            {
                entity.Property(e => e.NroChequera).ValueGeneratedNever();

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.Chequera)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_Chequera_Usuario");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.Chequera)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chequera_BancoTarjeta");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.Chequera)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_Chequera_Empleado");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Chequera)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Chequera_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Chequera)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chequera_Sucursal");
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.Property(e => e.ClienteId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Cliente");

                entity.Property(e => e.AdelantoCuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.CanalId).HasComment("Canal de Venta");

                entity.Property(e => e.ClasificacionId).HasComment("Clasificacion del Cliente");

                entity.Property(e => e.DatosDeEntrega).HasComment("Detalle adicional para la Entrega,");

                entity.Property(e => e.DescuentoVenta).HasComment("Descuento tomar para las operaciones de venta");

                entity.Property(e => e.DiaEntrega).HasComment("Binario q indica los dias de la Seman/Mes q se realiza la entrega");

                entity.Property(e => e.EntidadSucId).HasComment("EntidadSucursal a la q pertenece");

                entity.Property(e => e.FechaAlta).HasComment("Fecha Alta");

                entity.Property(e => e.FormaPagoId).HasComment("Indicar la forma de pago utilizada por defecto al  realizar la venta se obtiene de OperacionFormaPago");

                entity.Property(e => e.FormaPagoIdcobro).HasComment("Indicar la forma de pago utilizada por defecto al  realizar un COBRO se obtiene de OperacionFormaPago");

                entity.Property(e => e.Inhabilitado).HasComment("Indica si esta Inhabilitado");

                entity.Property(e => e.LimiteCredito).HasComment("Indica el limite de credito asignado al Cliente");

                entity.Property(e => e.ListaPrecId).HasComment("Lista de Precio q utiliza");

                entity.Property(e => e.MuestraSaldoVentas).HasComment("Indica q al realizar ventas muestra el saldo de Operaciones anteriroes, aplica a Impresion Facturas, toma Pedidos, etc");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento esta Compra");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal que atiende a este cliente (default)");

                entity.Property(e => e.TipoEntidadId).HasComment("Viene de AlmaNET EntidadTipo utilizado para relacionar con registro de Operaciones (1)");

                entity.Property(e => e.TipoEntrega).HasComment("Refiere a si la entrega es Semanl, menual, etc");

                entity.HasOne(d => d.AdelantoCuenta)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.AdelantoCuentaId)
                    .HasConstraintName("FK_Cliente_PlanDeCuenta");

                entity.HasOne(d => d.Canal)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.CanalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Cliente_ClienteCanal");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Cliente_ClienteClasificacion");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Cliente)
                    .HasForeignKey<Cliente>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Cliente_EntidadSucursal");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.ClienteFormaPago)
                    .HasForeignKey(d => d.FormaPagoId)
                    .HasConstraintName("FK_Cliente_OperacionFormaPago");

                entity.HasOne(d => d.FormaPagoIdcobroNavigation)
                    .WithMany(p => p.ClienteFormaPagoIdcobroNavigation)
                    .HasForeignKey(d => d.FormaPagoIdcobro)
                    .HasConstraintName("FK_Cliente_OperacionFormaPago1");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.ListaPrecId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Cliente_ProductoLista");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Cliente_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Cliente_Sucursal");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.SupervisorId)
                    .HasConstraintName("FK_Cliente_Supervisor");
            });

            modelBuilder.Entity<ClienteCanal>(entity =>
            {
                entity.HasKey(e => e.CanalId)
                    .HasName("PK_EntidadClienteCanal");

                entity.HasComment("Permite Identificar al Cliente con un Formato de Venta Ejem. Mayorista, Minorista ");

                entity.Property(e => e.CanalId).ValueGeneratedNever();

                entity.Property(e => e.TipoDescuento).HasComment("0-No aplica 1-Se considera como Maximo a Poder Aplicar 2-Aplica Por defecto 3-Aplica siempre");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.ClienteCanal)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_ClienteCanal_ProductoLista");
            });

            modelBuilder.Entity<ClienteCanalProducto>(entity =>
            {
                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.Property(e => e.TipoBonificacion).HasComment("1-Se considera como Maximo a Poder Aplicar 2-Aplica Por defecto 3-Aplica siempre");

                entity.HasOne(d => d.Canal)
                    .WithMany(p => p.ClienteCanalProducto)
                    .HasForeignKey(d => d.CanalId)
                    .HasConstraintName("FK_ClienteCanalProducto_ClienteCanal");
            });

            modelBuilder.Entity<ClienteClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ClienteDescuento>(entity =>
            {
                entity.HasOne(d => d.Canal)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.CanalId)
                    .HasConstraintName("FK_ClienteDescuento_ClienteCanal");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.ClasificacionId)
                    .HasConstraintName("FK_ClienteDescuento_ClienteClasificacion");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClienteDescuento_ClienteDescuento");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.FormaPagoId)
                    .HasConstraintName("FK_ClienteDescuento_OperacionFormaPago");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_ClienteDescuento_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ClienteDescuento)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ClienteDescuento_Sucursal");
            });

            modelBuilder.Entity<ClienteRepresentada>(entity =>
            {
                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.ClienteRepresentada)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_ClienteRepresentada_Cliente");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ClienteRepresentada)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClienteRepresentada_Proveedor");
            });

            modelBuilder.Entity<ClienteVendedor>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_EntidadClienteVendedor");

                entity.Property(e => e.RegistroId).HasComment("Campo unico");

                entity.Property(e => e.ClienteId).HasComment("Cliente al que esta relacionado");

                entity.Property(e => e.Comicion).HasComment("% Comision q percibe por las ventas a este Cliente");

                entity.Property(e => e.DiaVisita).HasComment("Binario q indica dias de Visita");

                entity.Property(e => e.TipoVisita).HasComment("Refiere a si la visita del vendedor es Semal, menual, etc");

                entity.Property(e => e.VendedorId).HasComment("Codigo Vendedor");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.ClienteVendedor)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_EntidadClienteVendedor_EntidadClientes");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ClienteVendedor)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_ClienteVendedor_Proveedor");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.ClienteVendedor)
                    .HasForeignKey(d => d.VendedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntidadClienteVendedor_EntidadVendedores");
            });

            modelBuilder.Entity<Cobrador>(entity =>
            {
                entity.Property(e => e.CobradorId).ValueGeneratedNever();

                entity.Property(e => e.Comicion).HasComment("Porcentaje Comicion que Percive por las Ventas");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Cobrador)
                    .HasForeignKey<Cobrador>(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadCobrador_EntidadSucursal");
            });

            modelBuilder.Entity<ComisionEspecial>(entity =>
            {
                entity.HasKey(e => e.RegComisEspId)
                    .HasName("PK_ComisionesEpeciales");

                entity.Property(e => e.AplicaSoloVendedor).HasComment("Indica que la comosion solo es cuando esta entidad es el Vendedor de la Operacion de Venta");

                entity.Property(e => e.EntidadId).HasComment("CampoUnico");

                entity.Property(e => e.FamiliaId).HasComment("Campo Unico Registro");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ComisionEspecial)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ComisionesEpeciales_Producto");

                entity.HasOne(d => d.Entidad)
                    .WithMany(p => p.ComisionEspecial)
                    .HasForeignKey(d => d.EntidadId)
                    .HasConstraintName("FK_ComisionesEpeciales_Entidad");

                entity.HasOne(d => d.Familia)
                    .WithMany(p => p.ComisionEspecial)
                    .HasForeignKey(d => d.FamiliaId)
                    .HasConstraintName("FK_ComisionesEpeciales_ProductoFamilia");
            });

            modelBuilder.Entity<Contacto>(entity =>
            {
                entity.Property(e => e.ContactoId).ValueGeneratedNever();

                entity.Property(e => e.ContactoTipoId).HasComment("Se obtine de AlmaNet ContactoTipo");

                entity.HasOne(d => d.ContactoTipo)
                    .WithMany(p => p.Contacto)
                    .HasForeignKey(d => d.ContactoTipoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Contacto_ContactoTipo");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.Contacto)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_Contacto_EntidadSucursal");
            });

            modelBuilder.Entity<ContactoTipo>(entity =>
            {
                entity.HasComment("Define el Tipo de Contacto, Credito, Tecnico, Vendedor etc.");
            });

            modelBuilder.Entity<CuentaCorrienteAnticipo>(entity =>
            {
                entity.Property(e => e.AnticipoId)
                    .ValueGeneratedNever()
                    .HasComment("ID Anticipo");

                entity.Property(e => e.Detalle).HasComment("Descripcion Sobre el Anticipo");

                entity.Property(e => e.ImporteAnticipo).HasComment("Importe Anticipo");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion que Genera el Anticipo");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento Que Genera el Anticipo, (Cobro o Pagos) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.CuentaCorrienteAnticipo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CuentaCorrienteAnticipo_OperacionCobro");
            });

            modelBuilder.Entity<CuentaCorrienteAnticipoCancela>(entity =>
            {
                entity.Property(e => e.RegAntipoCancId)
                    .ValueGeneratedNever()
                    .HasComment("Campo Unico");

                entity.Property(e => e.AnticipoId).HasComment("ID Anticipo");

                entity.Property(e => e.Detalle).HasComment("Descripcion Adicional");

                entity.Property(e => e.ImporteIngresa).HasComment("Importe q cancela");

                entity.Property(e => e.RegistroPagoId).HasComment("Operacion sobre la que se Realiza el Cancela (ver OpercionPagoDetalle--OperacionXXXXX)");

                entity.HasOne(d => d.Anticipo)
                    .WithMany(p => p.CuentaCorrienteAnticipoCancela)
                    .HasForeignKey(d => d.AnticipoId)
                    .HasConstraintName("FK_CuentaCorrienteAnticipoCancela_CuentaCorrienteAnticipo");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.CuentaCorrienteAnticipoCancela)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_CuentaCorrienteAnticipoCancela_OperacionDetallePago");
            });

            modelBuilder.Entity<CuentaCorrienteCancelacion>(entity =>
            {
                entity.HasKey(e => e.CtaCtePagoId)
                    .HasName("PK_CuentaCorrientePago");

                entity.Property(e => e.CtaCtePagoId).HasComment("Registro UNICO");

                entity.Property(e => e.CtaCteRegId).HasComment("Registro de Cuenta Corriente q se paga");

                entity.Property(e => e.Detalle).HasComment("Permite ingresar alguna referencia subre la cancelacion de esta deuda");

                entity.Property(e => e.ImportePago).HasComment("Importe que se Paga/Ingresa");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion que Realiza la cancelacion");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.CtaCteReg)
                    .WithMany(p => p.CuentaCorrienteCancelacion)
                    .HasForeignKey(d => d.CtaCteRegId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CuentaCorrientePago_CuentaCorrienteRegistro");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.CuentaCorrienteCancelacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_CuentaCorrienteCancelacion_OperacionCobro");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.CuentaCorrienteCancelacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_CuentaCorrienteCancelacion_OperacionPago");
            });

            modelBuilder.Entity<CuentaCorrienteRegistro>(entity =>
            {
                entity.HasKey(e => e.CtaCteRegId)
                    .HasName("PK_CuentasCorrientesRegistros");

                entity.Property(e => e.SaldoCtaCte).HasComment("");

                entity.HasOne(d => d.RegistroPago)
                    .WithOne(p => p.CuentaCorrienteRegistro)
                    .HasForeignKey<CuentaCorrienteRegistro>(d => d.RegistroPagoId)
                    .HasConstraintName("FK_CuentaCorrienteRegistro_OperacionPagoDetalle");
            });

            modelBuilder.Entity<CuentaCorrienteRegistroTerminal>(entity =>
            {
                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.CuentaCorrienteRegistroTerminal)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_CuentaCorrienteRegistroTerminal_OperacionDetallePago");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.CuentaCorrienteRegistroTerminal)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CuentaCorrienteRegistroTerminal_SincronizacionTerminal");
            });

            modelBuilder.Entity<CuentasAsignacion>(entity =>
            {
                entity.Property(e => e.CuentaAsignacionId).ValueGeneratedNever();

                entity.Property(e => e.CuentaId).HasComment("Codigo Cuenta");

                entity.Property(e => e.DetalleUso).HasComment("Indica la aplicion contable q tiene la cuenta");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.CuentasAsignacion)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_CuentasAsignacion_PlanDeCuenta");
            });

            modelBuilder.Entity<Departamento>(entity =>
            {
                entity.Property(e => e.DepartamentoId).ValueGeneratedNever();

                entity.Property(e => e.DepartamentoNro).HasComment("Nro de Familia que se le asigna (Se comienza a emumerar  de 1 a por cada Familia) nu puede repetirse el mismo numero de familia en una misma SubFamiliaDe");

                entity.Property(e => e.Orden).HasComment("Idem a Familia Completo pero rellena con 0 para que quede correctamete ordenado los Registros ([dbo].[HerarchyOrder]([FamiliaCompleto]))");
            });

            modelBuilder.Entity<Deposito>(entity =>
            {
                entity.HasComment("Los distintos depositos que tiene la empresa");

                entity.Property(e => e.DepositoId)
                    .ValueGeneratedNever()
                    .HasComment("Nro de Deposito");

                entity.Property(e => e.DiasDeposito).HasComment("Indica la cantidad de de dias q se guarda el producto , hasta q comienza a tener cargo por almacenamiento");

                entity.Property(e => e.Domicilio).HasComment("Domicilio del Deposito");

                entity.Property(e => e.EncargDepositoId).HasComment("Empleado q esta encagado del control de Stock del deposito");

                entity.Property(e => e.FechaCtrlStockDep).HasComment("Fecha Control de Stock (Fecha Ultimo Inventario del Deposito, en caso de q el control de stock se haga sobre deposito y no sobre la fecha control stock establecida en el producto)");

                entity.Property(e => e.PrecioDespachoTipo).HasComment("Null o 0-Utiliza la Lista precio, 10-Inidica utiliza PPP(Precio Promedio Ponderado)");

                entity.Property(e => e.ProductoUbicacionId).HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.HasOne(d => d.EncargDeposito)
                    .WithMany(p => p.Deposito)
                    .HasForeignKey(d => d.EncargDepositoId)
                    .HasConstraintName("FK_Deposito_DepositoEncargado");

                entity.HasOne(d => d.ProductoUbicacion)
                    .WithMany(p => p.Deposito)
                    .HasForeignKey(d => d.ProductoUbicacionId)
                    .HasConstraintName("FK_Deposito_ProductoUbicacion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Deposito)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Deposito_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Deposito)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Deposito_Sucursal");
            });

            modelBuilder.Entity<DepositoEncargado>(entity =>
            {
                entity.HasComment("Indica los Responsable deposito autorizado para hacer los despachos y recepciones");

                entity.Property(e => e.EncargDepositoId).ValueGeneratedNever();

                entity.Property(e => e.ModalidadDespacho).HasComment("Indica que modalidad Aplica para el Despacho 0-Permite Despacho Parcial 1-Solo despacho completo");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.DepositoEncargado)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_DepositoEncargado_Empleado");
            });

            modelBuilder.Entity<DepositoEncargadoDeposito>(entity =>
            {
                entity.HasComment("Indico cuales son los encargados para cada Deposito");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.DepositoEncargadoDeposito)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_DepositoEncargadoDeposito_Deposito");

                entity.HasOne(d => d.EncargDeposito)
                    .WithMany(p => p.DepositoEncargadoDeposito)
                    .HasForeignKey(d => d.EncargDepositoId)
                    .HasConstraintName("FK_DepositoEncargadoDeposito_DepositoEncargado");
            });

            modelBuilder.Entity<DepositoMovimiento>(entity =>
            {
                entity.HasComment("Cabecera de todos los registros de Entrada y Salida de Deposito");

                entity.Property(e => e.Comprobante).HasComment("Comprobante que Genera el Movimiento (Ejem. Fact.A 2-323");

                entity.Property(e => e.DepositoId).HasComment("Deposito en el que registro moviomiento");

                entity.Property(e => e.Detalle).HasComment("Algun Comentario adicional que se desea agregar");

                entity.Property(e => e.EncargDepositoId).HasComment("Empleado a Cargo de Recibir o Despachar");

                entity.Property(e => e.FechaHora).HasComment("Fecha y Hora registro");

                entity.Property(e => e.RecepcionDespachoId).HasComment("Nro Registro Operacion relacionado (nro Despacho, o nro Recepcion)");

                entity.Property(e => e.TipoOperacionId).HasComment("11-Despacho, 21-Recepcion");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.DepositoMovimiento)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_DepositoMovimiento_Deposito");

                entity.HasOne(d => d.EncargDeposito)
                    .WithMany(p => p.DepositoMovimiento)
                    .HasForeignKey(d => d.EncargDepositoId)
                    .HasConstraintName("FK_DepositoMovimiento_DepositoEncargado");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.DepositoMovimiento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RecepcionDespachoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositoMovimiento_OperacionDespacho");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.DepositoMovimiento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RecepcionDespachoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositoMovimiento_OperacionRecepcion");
            });

            modelBuilder.Entity<DepositoMovimientoItem>(entity =>
            {
                entity.Property(e => e.DepositoDetItemId).HasComment("Nro Registro");

                entity.Property(e => e.Cantidad).HasComment("Cantidad que ingreso o salio (Contemplar uq puede tratarse de kilos) Las  Salidas se registran en Negativo");

                entity.Property(e => e.ProductoUbicacionId).HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.Property(e => e.RegistroMovDepId).HasComment("Registro Movimiento Deposito");

                entity.Property(e => e.RegistroOperacionItemId).HasComment("Nro Item del despacho o recepcion");

                entity.Property(e => e.TipoOperacionId).HasComment("20-Despach 21-Recepcion  de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.DepositoMovimientoItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositoMovimientoItem_Producto");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.DepositoMovimientoItem)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositoMovimientoItem_ProductoPresentacionTipo");

                entity.HasOne(d => d.ProductoUbicacion)
                    .WithMany(p => p.DepositoMovimientoItem)
                    .HasForeignKey(d => d.ProductoUbicacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositoMovimientoItem_ProductoUbicacion");

                entity.HasOne(d => d.RegistroMovDep)
                    .WithMany(p => p.DepositoMovimientoItem)
                    .HasForeignKey(d => d.RegistroMovDepId)
                    .HasConstraintName("FK_DepositoMovimientoItem_DepositoMovimiento");
            });

            modelBuilder.Entity<DiasFeriados>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DonacionInstitucion>(entity =>
            {
                entity.Property(e => e.Donante).HasComment("Nombre persona o entidad q realizo la donacion");

                entity.Property(e => e.Importe).HasComment("Importe de la Donacion");

                entity.Property(e => e.InstitucionBeneficenciaId).HasComment("Indica a q institucion se designa el pago (vuelto)");

                entity.Property(e => e.NroIdentificacion).HasComment("Nro de Cuit/ Nro Documento, Cedula etc.");

                entity.Property(e => e.PagoId).HasComment("oden de pago con la q se liquido la donacion a la institucion de Beneficicencia");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado, por el cual se registro el vuelto a la entidad");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.DonacionInstitucion)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DonacionInstitucion_OperacionDetallePago");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.DonacionInstitucion)
                    .HasForeignKey(d => d.TerminalId)
                    .HasConstraintName("FK_DonacionInstitucion_SincronizacionTerminal");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.DonacionInstitucion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.PagoId })
                    .HasConstraintName("FK_DonacionInstitucion_OperacionPago2");
            });

            modelBuilder.Entity<Empleado>(entity =>
            {
                entity.Property(e => e.EmpleadoId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Lejajo como empleado");

                entity.Property(e => e.DiasVacaciones).HasComment("");

                entity.Property(e => e.EmpleadoJerarquiaId).HasComment("Codigo para el Puesto");

                entity.Property(e => e.EmpleadoTipoId).HasComment("Permite desglosar por tipo Ejem. Operario, Vendedor, Tecnico");

                entity.Property(e => e.EmpleadorId).HasComment("Indica el ID de la Entidad para la cual Trabaja");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.ClasificacionId)
                    .HasConstraintName("FK_Empleado_EmpleadoClasificacion");

                entity.HasOne(d => d.Departamento)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.DepartamentoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Empleado_Departamento");

                entity.HasOne(d => d.EmpleadoJerarquia)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.EmpleadoJerarquiaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Empleado_EmpleadoPuestoJerarquia");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Empleado)
                    .HasForeignKey<Empleado>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Empleado_EntidadSucursal");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Empleado_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Empleado_Sucursal");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.Empleado)
                    .HasForeignKey(d => d.TurnoId)
                    .HasConstraintName("FK_Empleado_EmpleadoTurno");
            });

            modelBuilder.Entity<EmpleadoAcceso>(entity =>
            {
                entity.Property(e => e.AccesoId).ValueGeneratedNever();

                entity.Property(e => e.EmpleadoId).HasComment("ID con que se registra el movimiento");

                entity.Property(e => e.TipoAccesoIdingreso).HasComment("0-Normal 1-Retiro Justificado 2- Retira por Urgencia");

                entity.Property(e => e.TipoAccesoIdsalida).HasComment("0-Normal 1-Retiro Justificado 2- Retira por Urgencia");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.EmpleadoAcceso)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_EmpleadoAcceso_Empleado");

                entity.HasOne(d => d.TipoAccesoIdingresoNavigation)
                    .WithMany(p => p.EmpleadoAccesoTipoAccesoIdingresoNavigation)
                    .HasForeignKey(d => d.TipoAccesoIdingreso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmpleadoAcceso_AccesoTipo");

                entity.HasOne(d => d.TipoAccesoIdsalidaNavigation)
                    .WithMany(p => p.EmpleadoAccesoTipoAccesoIdsalidaNavigation)
                    .HasForeignKey(d => d.TipoAccesoIdsalida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmpleadoAcceso_AccesoTipo1");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.EmpleadoAcceso)
                    .HasForeignKey(d => d.TurnoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EmpleadoAcceso_Turno");
            });

            modelBuilder.Entity<EmpleadoClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmpleadoDiasVacacionesPeriodo>(entity =>
            {
                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.EmpleadoDiasVacacionesPeriodo)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmpleadoDiasVacacionesPeriodo_Empleado");
            });

            modelBuilder.Entity<EmpleadoInasistencia>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_EmpleadoInasistencias");

                entity.HasComment("Rigistro de todas las faltas al trabjao de los distintos empleados");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CantidadTiempo).HasComment("* Eliminar ");

                entity.Property(e => e.Descripcion).HasComment("Una descripcion de cual fue la causa de la inasistencia");

                entity.Property(e => e.FechaInasistencia).HasComment("Fecha/Dia que el empleado falto");

                entity.Property(e => e.Justificada).HasComment("si es verdadero no se descuenta");

                entity.Property(e => e.TipoInasistencia).HasComment("Se obtiene de AlmaNET.InasistenciaTipo (1- enfermedad 2-Fallecimiento Familiar 3-Enfermedad Familiar en 1er Grado");

                entity.Property(e => e.TipoUnidadTiempo).HasComment("Tipo unidad de Tiempo");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.EmpleadoInasistencia)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_EmpleadoInasistencias_Empleado");
            });

            modelBuilder.Entity<EmpleadoPuestoJerarquia>(entity =>
            {
                entity.Property(e => e.EmpleadoJerarquiaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo para el Puesto");

                entity.Property(e => e.Descripcion).HasComment("Descripcion del Puesto");

                entity.Property(e => e.EmpleadoHierarchy).HasComment("Jerarquia del Puesto");

                entity.Property(e => e.JerarquiaNro).HasComment("Nro de Familia que se le asigna (Se comienza a emumerar  de 1 a por cada Familia) nu puede repetirse el mismo numero de familia en una misma SubFamiliaDe");

                entity.Property(e => e.Orden).HasComment("Idem a Familia Completo pero rellena con 0 para que quede correctamete ordenado los Registros ([dbo].[HerarchyOrder]([FamiliaCompleto]))");
            });

            modelBuilder.Entity<EmpleadoTurno>(entity =>
            {
                entity.Property(e => e.EmpleadoId).HasComment("Nro Lejajo como empleado");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.EmpleadoTurno)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_EmpleadoTurno_Empleado");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.EmpleadoTurno)
                    .HasForeignKey(d => d.TurnoId)
                    .HasConstraintName("FK_EmpleadoTurno_Turno");
            });

            modelBuilder.Entity<EmpleadoVacacionesFrancos>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_EmpleadoVacaciones");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.Finalizado).HasComment("Indica si el registro de la vacación corresponde a la finalización de la misma.");

                entity.Property(e => e.SancionId).HasComment("Para el caso de tener una sancion indico el tipo de sancion a aplicar");

                entity.Property(e => e.TipoCargaId).HasComment("Codio tipo Carga q puede Trasnportar");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.EmpleadoVacacionesFrancos)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_EmpleadoVacacionesFrancos_Usuario");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.EmpleadoVacacionesFrancos)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_EmpleadoVacaciones_Empleado");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.EmpleadoVacacionesFrancos)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_EmpleadoVacacionesFrancos_TransporteTipoCarga");
            });

            modelBuilder.Entity<EmpresaCertificadoAfip>(entity =>
            {
                entity.Property(e => e.AfipCertificadoCae).HasComment("Certificado que se requiere para generar el tiket de acceso");

                entity.Property(e => e.AfipContraseña).HasComment("Contrasena a utilizar para trabajar con el sertificado");

                entity.Property(e => e.AfipServOnOff).HasComment("Indica si esta habilitado el servicio");

                entity.Property(e => e.AfipServicio).HasComment("Servicio indica el tipo de facturacion electronica");

                entity.Property(e => e.AfipTicketAcceso).HasComment("Ticket acceso token q valida la fecha, cuit  y mediante el cual podemos habilitar la facturacion electronica");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.EmpresaCertificadoAfip)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_EmpresaCertificadoAFIP_EmpresaDatos");
            });

            modelBuilder.Entity<EmpresaCodigoActividad>(entity =>
            {
                entity.HasKey(e => new { e.CodigoActividadId, e.EmpresaId })
                    .HasName("PK_EmpresaCodigoActividad_1");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.EmpresaCodigoActividad)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_EmpresaCodigoActividad_EmpresaDatos");
            });

            modelBuilder.Entity<EmpresaDatos>(entity =>
            {
                entity.Property(e => e.EmpresaId).ValueGeneratedNever();

                entity.Property(e => e.CentralSucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.CuentaSmtp).HasComment("Nombre de la Cuenta/Usuario para el Servidor correo SMTP");

                entity.Property(e => e.DecimalesCompra).HasComment("Cantidad de decimales que se presentan los importes monetarios de Compra");

                entity.Property(e => e.DecimalesGral).HasComment("Decimales utilizados para operaciones monetarias q no son consideradas de venta o compra");

                entity.Property(e => e.DecimalesVenta).HasComment("Cantidad de decimales que se presentan los importes monetarios de Venta");

                entity.Property(e => e.DiasGracia).HasComment("Indica la cantidad de dias a tener encuenta para informar cliente con faturas Morosas (Morosos=FechaActual<FechaVencimiento+DiasGracia)");

                entity.Property(e => e.InteresMoraDia).HasComment("Se especifica el Porc. interes mora DIARIO a aplicar al generar nota debito por mora en pago facturas vencidas");

                entity.Property(e => e.ModoLiquidComision).HasComment("Indica la Modalidad a Utilizar para la liquidacion comisiones vendedor 0-Sobre Neto    1-Determina  Neto de comprobante Otros");

                entity.Property(e => e.PasswordSmtp).HasComment("Clave para la Cuenta/Usuario del Servidor de Correo SMTP");

                entity.Property(e => e.PreciosPorSucursal).HasComment("Indico si se permite definir precios y costos x sucursal ");

                entity.Property(e => e.SmtpServer).HasComment("Servidor de Correo Saliente SMTP");

                entity.Property(e => e.SslSmtpenabled).HasComment("Indica si el servidor de Coreo saliente (SMTP) requiere autenticación");

                entity.Property(e => e.StockTipo).HasComment("0-No Aplica, 1-Ventas Generan Despacho, 2-Compras Generan Recepcion");

                entity.Property(e => e.TelefonoMovil).IsFixedLength();

                entity.Property(e => e.TerminalId).HasComment("Si tiene valor distinto de 0 indico que es una terminal");

                entity.HasOne(d => d.BancoTarjetaId1Navigation)
                    .WithMany(p => p.EmpresaDatosBancoTarjetaId1Navigation)
                    .HasForeignKey(d => d.BancoTarjetaId1)
                    .HasConstraintName("FK_EmpresaDatos_BancoTarjeta");

                entity.HasOne(d => d.BancoTarjetaId2Navigation)
                    .WithMany(p => p.EmpresaDatosBancoTarjetaId2Navigation)
                    .HasForeignKey(d => d.BancoTarjetaId2)
                    .HasConstraintName("FK_EmpresaDatos_BancoTarjeta1");

                entity.HasOne(d => d.CentralSucursal)
                    .WithMany(p => p.EmpresaDatos)
                    .HasForeignKey(d => d.CentralSucursalId)
                    .HasConstraintName("FK_EmpresaDatos_Sucursal");
            });

            modelBuilder.Entity<EmpresaImpuestoZona>(entity =>
            {
                entity.HasKey(e => e.RegistroImpZonaId)
                    .HasName("PK_EmpresaImpuestosZona_1");

                entity.HasComment("Refiere a los impuestos por Zona del Vendedor");

                entity.Property(e => e.AplicaCasaCentral).HasComment("Indica si el impuesto tambien aplica para Operaciones donde no se especifico SucursalID (Null)");

                entity.Property(e => e.PorcImpuesto).HasComment("Utiliza el espscificado en AlmaNET.ImpuestoPorZonaComprador en caso de estar en Null");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.ZonaImpuestoId).HasComment("Se obtiene de AlmaNET");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.EmpresaImpuestoZona)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_EmpresaImpuestoZona_EmpresaDatos");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.EmpresaImpuestoZona)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EmpresaImpuestoZona_Sucursal");
            });

            modelBuilder.Entity<Encuesta>(entity =>
            {
                entity.HasComment("Indica el Listado de Preguntas Cuetionarios encuesta a relizar");

                entity.Property(e => e.CustionarioId).HasComment("Indica la Pregunta a Realizar");
            });

            modelBuilder.Entity<EncuestaOpcion>(entity =>
            {
                entity.HasOne(d => d.Custionario)
                    .WithMany(p => p.EncuestaOpcion)
                    .HasForeignKey(d => d.CustionarioId)
                    .HasConstraintName("FK_EncuestaOpcion_Encuesta");
            });

            modelBuilder.Entity<EncuestaRespuesta>(entity =>
            {
                entity.Property(e => e.Detalle).HasComment("Para el caso q la opcion de respuesta tenga q estar argumentada");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.RegistroOperacionId).HasComment("Para el caso q esta encuesta este vincualda a alguan Operacion realizada por la empresa");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Operacion sobre la q se realiza la encuesta");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EncuestaRespuesta)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EncuestaRespuesta_EntidadSucursal");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.EncuestaRespuesta)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EncuestaRespuesta_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionRendicion)
                    .WithMany(p => p.EncuestaRespuesta)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.RendicionId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EncuestaRespuesta_OperacionRendicion");
            });

            modelBuilder.Entity<EncuestaRespuestaOpcion>(entity =>
            {
                entity.HasOne(d => d.Opcion)
                    .WithMany(p => p.EncuestaRespuestaOpcion)
                    .HasForeignKey(d => d.OpcionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EncuestaRespuestaOpcion_EncuestaOpcion");

                entity.HasOne(d => d.Respuesta)
                    .WithMany(p => p.EncuestaRespuestaOpcion)
                    .HasForeignKey(d => d.RespuestaId)
                    .HasConstraintName("FK_EncuestaRespuestaOpcion_EncuestaRespuesta");
            });

            modelBuilder.Entity<Entidad>(entity =>
            {
                entity.Property(e => e.EntidadId).HasComment("CampoUnico");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Resp. Inscripto- Resp. Monotributo, Consumidor Final, Etc. Se obtiene de AlmaNET ImpuestoCategoria");

                entity.Property(e => e.ClasificacionId).HasComment("(Permite agrupar las entidades)");

                entity.Property(e => e.EsEmpleador).HasComment("Indica si la entidad posee Empleados");

                entity.Property(e => e.NroIdentificacion).HasComment("Nro de Cuit/ Nro Documento, Cedula etc.");

                entity.Property(e => e.PrincipalCodigoActividadId).HasComment("Indica cual es codigo de actividad Principal se obtiene de AlmaNET.ImpuestoCodigoActividad");

                entity.Property(e => e.TipoEmpresaId).HasComment("Tipo de Empresa, Fabrica, Comercio Minorista, Comercio Mayorista, Multinacional, se obtiene de AlmaNET.EmpresaTipo");

                entity.Property(e => e.TipoNroIdentificacion).HasComment("0-Nada 1-Fiscal CUIT 2-Documento // Se obtiene de AlmaNet EntidadIdentificacionTipo");

                entity.Property(e => e.UtilComisionEspecial).HasComment("Indica q aplica comisiones Especiales");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Entidad)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Entidad_EntidadClasificacion");
            });

            modelBuilder.Entity<EntidadAderente>(entity =>
            {
                entity.Property(e => e.AderenteId).IsFixedLength();

                entity.Property(e => e.Sexo).IsFixedLength();
            });

            modelBuilder.Entity<EntidadClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EntidadCodigoActividad>(entity =>
            {
                entity.HasComment("Se indica todas las actividades aq la que se dedica la Entidad/Empresa");

                entity.Property(e => e.RegEntidCodigActiv)
                    .ValueGeneratedNever()
                    .HasComment("");

                entity.Property(e => e.CodigoActividadId).HasComment("Indica cual es codigo de actividad se obtiene de AlmaNET.ImpuestoCodigoActividad");

                entity.HasOne(d => d.Entidad)
                    .WithMany(p => p.EntidadCodigoActividad)
                    .HasForeignKey(d => d.EntidadId)
                    .HasConstraintName("FK_EntidadCodigoActividad_Entidad");
            });

            modelBuilder.Entity<EntidadDatoFiliatorio>(entity =>
            {
                entity.HasComment("Datos Filiatorios Respecto a la Entidad");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CiudadId).HasComment("Codigo Ciudad- Se optiene de AlmaNet.PaisProvinciaEstadoCiudad - Permite optener la Nacionalidad y localidad de la q es Oriundo");

                entity.Property(e => e.EstadoCivilId).HasComment("se Obtiene de AlmaNet.EstadiCivilTipo");

                entity.Property(e => e.Sexo)
                    .IsFixedLength()
                    .HasComment("M-Masculino F-Femenino");

                entity.HasOne(d => d.Entidad)
                    .WithOne(p => p.EntidadDatoFiliatorio)
                    .HasForeignKey<EntidadDatoFiliatorio>(d => d.EntidadId)
                    .HasConstraintName("FK_EntidadDatoFiliatorio_Entidad");
            });

            modelBuilder.Entity<EntidadSucursal>(entity =>
            {
                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.ComercioId).HasComment("Codigo Tipo de Comercio");

                entity.Property(e => e.DefTipoDomicilioId).HasComment("Tipo de Domicilio a utilizar por defecto de AlmaNET.DomicilioTipo");

                entity.Property(e => e.DefTipoEmailId).HasComment("Tipo de Email a utilizar por defecto al enviar Correos de AlmaNET EmailTipo");

                entity.Property(e => e.DefTipoTelefonoId).HasComment("Tipo de telefono a utilizar por Defecto de AlmaNET.TelefonoTipo");

                entity.Property(e => e.DenominacionAdicional).HasComment("Permite especificar un denominacion adicional para la entidad seg. la sucursal ");

                entity.Property(e => e.EntidadId).HasComment("Codigo de la Entidad a la que pertenece la Sucursal");

                entity.Property(e => e.Observaciones).HasComment("Comentarios Extensos - Observaciones");

                entity.Property(e => e.RutaId).HasComment("Indica el Orden del Recorido (Reparto)");

                entity.Property(e => e.SucursalTipo).HasComment("Tipo de Sucursal (Viene se AlmaNET EntidadSucursalTipo) ejm. CasaCentral, Filial, Franquicia");

                entity.Property(e => e.TransporteId).HasComment("Codigo de trasnporte COn el que se envia o recibe Mercaderia de esta EntidadSucursal");

                entity.Property(e => e.ZonaId).HasComment("Indica la Zona en la q se encuentra la Sucursal");

                entity.HasOne(d => d.Comercio)
                    .WithMany(p => p.EntidadSucursal)
                    .HasForeignKey(d => d.ComercioId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EntidadSucursal_EntidadSucusalComercio");

                entity.HasOne(d => d.Entidad)
                    .WithMany(p => p.EntidadSucursal)
                    .HasForeignKey(d => d.EntidadId)
                    .HasConstraintName("FK_EntidadSucursal_Entidad");

                entity.HasOne(d => d.Ruta)
                    .WithMany(p => p.EntidadSucursal)
                    .HasForeignKey(d => d.RutaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EntidadSucursal_Ruta");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.EntidadSucursal)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_EntidadSucursal_Transporte");

                entity.HasOne(d => d.Zona)
                    .WithMany(p => p.EntidadSucursal)
                    .HasForeignKey(d => d.ZonaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_EntidadSucursal_ZonaGeografica");
            });

            modelBuilder.Entity<EntidadSucursalArchivos>(entity =>
            {
                entity.HasKey(e => e.RegistroArchivoId)
                    .HasName("PK_EntidadArchivos");

                entity.HasComment("Contiene una Tabla con todos los archivos Referidos a un Cliente, Proveedor,Venededor, Transporte Etc., estos archivos pueden ser planillas de Excel, Documentos de Word, Imagenes Etc.");

                entity.Property(e => e.ClasificacionArchivoId).HasComment("Seleciona  la Clasificacion de AlmaNET.ArchivosClasificacion (Indica si se trata de un Presupuesto, informe, Documento etc.)");

                entity.Property(e => e.DescripcionArchivo).HasComment("Contiene algun detalle que aga referencia al  Archivo (Ejem. Presupuesto Auto xx)");

                entity.Property(e => e.EntidadSucId).HasComment("Sucursal a la que esta relacionado");

                entity.Property(e => e.Extension).HasComment("Extencion para determinar el tipo de archivo que se esta grabando");

                entity.Property(e => e.NroArchivo).HasComment("Para el caso que para una Entidad se necesiten vincular varias imagenes estas se enumeran para facilitar su Sincronizacion");

                entity.Property(e => e.TemplateId).HasComment("Indica el Codigo de Archivo Modelo Utilizado a partir de cual se creo este (AlmaNET.ArchivoModelo.ModeloArchivoID)");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalArchivos)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadArchivos_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalComercio>(entity =>
            {
                entity.HasKey(e => e.ComercioId)
                    .HasName("PK_ClienteComercio");

                entity.Property(e => e.ComercioId).HasComment("Codigo Tipo de Comercio");

                entity.Property(e => e.Abreviatura).HasComment("Abreviatura a utilizar para la denominacion de este comercio");

                entity.Property(e => e.Descripcion).HasComment("Denominacion del Tipo de Comercio");

                entity.Property(e => e.Icono).HasComment("Icono a utilizar en Google  maps para inidcar el comercio");
            });

            modelBuilder.Entity<EntidadSucursalDomicilio>(entity =>
            {
                entity.HasKey(e => e.RegistroDomicilioId)
                    .HasName("PK_EntidadDomicilio");

                entity.Property(e => e.RegistroDomicilioId).HasComment("Campo UNICO");

                entity.Property(e => e.CiudadId).HasComment("Codigo Ciudad Mediante la cual tambien se optiene Provincia y Pais al que pertenece el Domicilio");

                entity.Property(e => e.Domicilio).HasComment("Descripcion Domicilio");

                entity.Property(e => e.EntidadSucId).HasComment("EntidadSucursal de la que es el Domicilio");

                entity.Property(e => e.Latitud).HasComment("Codenada Ubicacuion Geografica");

                entity.Property(e => e.Longitud).HasComment("Codenada Ubicacuion Geografica");

                entity.Property(e => e.TipoDomicilioId).HasComment("Indica el Tipo Domicilio, ejem Particular, Trabajo, etc. viene de AlmaNet DomicilioTipo");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalDomicilio)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadDomicilio_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalEmail>(entity =>
            {
                entity.HasKey(e => e.RegistroEmailId)
                    .HasName("PK_EntidadEmail");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalEmail)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadEmail_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalEvento>(entity =>
            {
                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad al q esta relacionado en caso de tener Relacion");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalEvento)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EntidadSucursalEvento_EntidadSucursal");

                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.EntidadSucursalEvento)
                    .HasForeignKey(d => d.RegEventoId)
                    .HasConstraintName("FK_EntidadSucursalEvento_Evento");
            });

            modelBuilder.Entity<EntidadSucursalImagen>(entity =>
            {
                entity.HasComment("Almacena las Imagenes /Fotografias relacionadas a esta EntidadSuxcursal");

                entity.Property(e => e.EntidadSucId).HasComment("Sucursal a la que esta relacionado");

                entity.Property(e => e.Imagen).HasComment("Imagen Fotografia");

                entity.Property(e => e.NroArchivo).HasComment("Para el caso que para una Entidad se necesiten vincular varias imagenes estas se enumeran para facilitar su Sincronizacion");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalImagen)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadSucursalImagen_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalImpuesto>(entity =>
            {
                entity.HasKey(e => e.EntidadImpuestoId)
                    .HasName("PK_EntidadImpuestos");

                entity.Property(e => e.EximidoHastaFecha).HasComment("Fecha hasta la cual se ecuentra eximido de aplicar el impuesto a fecha posterior se aplica , null aplica");

                entity.Property(e => e.ImpDesgId).HasComment("Indico sub categoria del Impuesto (Ver retenciones, ganancia, IVA)");

                entity.Property(e => e.ImporteDeducir).HasComment("Importe  del Impuesto (Es fijo y no refiere a un calculo)");

                entity.Property(e => e.Porcentaje).HasComment("Para el caso de Percepciones de IVA en algunos casos son disitintos importes segun proveedor");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalImpuesto)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadImpuestos_EntidadSucursal");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.EntidadSucursalImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntidadSucursalImpuesto_Impuesto");
            });

            modelBuilder.Entity<EntidadSucursalImpuestoZona>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_EntidadImpuestoZona_1");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalImpuestoZona)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadImpuestoZona_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalTelefono>(entity =>
            {
                entity.HasKey(e => e.RegistroTelefonoId)
                    .HasName("PK_EntidadTelefono");

                entity.Property(e => e.Comentario).HasComment("REferencia Con quien se comunica");

                entity.Property(e => e.ExtencionTel).HasComment("Nro de Telefono Interno");

                entity.Property(e => e.TelefonoNro).HasComment("Indicar el Nro de Telefono");

                entity.Property(e => e.TipoTelefonoId).HasComment("Indica tel de Trabajo, cel , casa, etc. se obtiene de AlmaNET.TelefonoTipo");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalTelefono)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadTelefono_EntidadSucursal");
            });

            modelBuilder.Entity<EntidadSucursalTipoComercio>(entity =>
            {
                entity.HasComment("Indica los tipo de comercio q comprende una EndidadSucursal");

                entity.Property(e => e.RegistroId).HasComment("CampoUnico");

                entity.Property(e => e.EntidadSucId).HasComment("EntidadSucursalID Relacionada");

                entity.Property(e => e.TipoComercioId).HasComment("TipoComercioID proviene de la Tabla de AlmaNET.ComercioTipo");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.EntidadSucursalTipoComercio)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadSucursalTipoComercio_EntidadSucursal");
            });

            modelBuilder.Entity<Equipo>(entity =>
            {
                entity.Property(e => e.EquipoId).ValueGeneratedNever();

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.Equipo)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_Equipo_Producto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Equipo)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_Equipo_OperacionItemProducto");
            });

            modelBuilder.Entity<Evento>(entity =>
            {
                entity.Property(e => e.RegEventoId).ValueGeneratedNever();

                entity.Property(e => e.AlmaUserId).HasComment("Se Indica para q Usuario de Alma Eesta asiganado el Evento");

                entity.Property(e => e.AvisoTipoId).HasComment("0-Indica q no tiene periodicidad 10-Es un Evento Diario, 20-Evento Semananl, 30-Evento Mensual , 40-Evento Anual");

                entity.Property(e => e.Cancelado).HasComment("Indica si se cancelo");

                entity.Property(e => e.EventoClasificId).HasComment("Me permite Clasificar los evento y asignarle un Color distinto segun su Clasificacion");

                entity.Property(e => e.EventoPeriodicoId).HasComment("En caso de q avisoTipoID =0 ==> EventoPeriodicoID=RegEventoID");

                entity.Property(e => e.EventoPrioridId).HasComment("Indica la Importancia del Evento(Ejem. Alta, Normal, Baja, nionguna)");

                entity.Property(e => e.FechaCompletado).HasComment("Indica la Fecha en q se Realixo");

                entity.Property(e => e.FechaHoraAviso).HasComment("Indica la Fecha y hora q se debe emitir el aviso del Evento");

                entity.Property(e => e.Filer).HasComment("Relaciona con ID de Google Calendar");

                entity.Property(e => e.RegistroAlmaUserId).HasComment("Se Indica para q Usuario de Alma que REGISTRO el Evento");

                entity.Property(e => e.ReprogramadoId).HasComment("Indica en que RegEventoID se reprogramo el Evento");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.EventoAlmaUser)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evento_Usuario");

                entity.HasOne(d => d.EventoClasific)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.EventoClasificId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Evento_EventoClasificacion");

                entity.HasOne(d => d.EventoPriorid)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.EventoPrioridId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Evento_EventoPrioridad");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Evento_Proyecto");

                entity.HasOne(d => d.RegistroAlmaUser)
                    .WithMany(p => p.EventoRegistroAlmaUser)
                    .HasForeignKey(d => d.RegistroAlmaUserId)
                    .HasConstraintName("FK_Evento_Usuario1");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Evento_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Evento)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Evento_Sucursal");

                entity.HasOne(d => d.EventoSemanal)
                    .WithMany(p => p.Evento)
                    .HasPrincipalKey(p => new { p.AvisoTipoId, p.RegPeriodoSemanalId })
                    .HasForeignKey(d => new { d.AvisoTipoId, d.EventoPeriodicoId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Evento_EventoSemanal");

                entity.HasOne(d => d.EventoAnual)
                    .WithMany(p => p.Evento)
                    .HasPrincipalKey(p => new { p.RegPeriodoAnualId, p.AvisoTipoId })
                    .HasForeignKey(d => new { d.EventoPeriodicoId, d.AvisoTipoId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Evento_EventoAnual");

                entity.HasOne(d => d.EventoDiario)
                    .WithMany(p => p.Evento)
                    .HasPrincipalKey(p => new { p.RegPeriodoDiarioId, p.AvisoTipoId })
                    .HasForeignKey(d => new { d.EventoPeriodicoId, d.AvisoTipoId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Evento_EventoDiario");

                entity.HasOne(d => d.EventoMensual)
                    .WithMany(p => p.Evento)
                    .HasPrincipalKey(p => new { p.RegPeriodoMensualId, p.AvisoTipoId })
                    .HasForeignKey(d => new { d.EventoPeriodicoId, d.AvisoTipoId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Evento_EventoMensual");
            });

            modelBuilder.Entity<EventoAnual>(entity =>
            {
                entity.Property(e => e.RegPeriodoAnualId).ValueGeneratedNever();

                entity.Property(e => e.AvisoTipoId).HasComment("Define como valor un Tipo Aviso Anual");

                entity.Property(e => e.Cancelado).HasComment("Indica q el Evento Fue Cancelado");

                entity.Property(e => e.DeLaSemana).HasComment("Indicar si es la Primer, Segunda,Tercer,Cuarta o Ultima Semana del Mes");

                entity.Property(e => e.DelMes).HasComment("Mes al cual refierier el dia o la Repeticion (valor de 1 a 12, Enero Febrero marzo)");

                entity.Property(e => e.DiaDeLaSemana).HasComment("Se indica q Dia de la semana ( Lunes,Martes...)");

                entity.Property(e => e.DiasDelMes).HasComment("Indica el Dia del Mes (0-31)");

                entity.Property(e => e.Duracion).HasComment("Indica la Cantidad de Minutos q dura el Evento");

                entity.Property(e => e.Repeticiones).HasComment("Indica cuantas veces se tiene q repetir el evento para considerarlo como Finalizado");

                entity.Property(e => e.RepetirCada).HasComment("Indica cada Cuantos Años se tiene q Repetir el Evento");
            });

            modelBuilder.Entity<EventoClasificacion>(entity =>
            {
                entity.Property(e => e.EventoClasificId).ValueGeneratedNever();

                entity.Property(e => e.AvisoMinutosAntes).HasComment("Cantidad Minutos antes a la fecha q se crea el Evento, para determinar FechaHoraAviso del Evento (Activa Avisar en evento)");

                entity.Property(e => e.Color).HasComment("Valor de tablas de colores RGB");

                entity.Property(e => e.Detalle).HasComment("Explicacion de Cuando se debe de aplicar esta clasificacion");
            });

            modelBuilder.Entity<EventoColaboradores>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.EventoColaboradores)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventoColaboradores_Usuario");

                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.EventoColaboradores)
                    .HasForeignKey(d => d.RegEventoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventoColaboradores_Evento");
            });

            modelBuilder.Entity<EventoDiario>(entity =>
            {
                entity.Property(e => e.RegPeriodoDiarioId).ValueGeneratedNever();

                entity.Property(e => e.AlmaUserId).HasComment("Se Indica para q Usuario de Alma Eesta asiganado el Evento");

                entity.Property(e => e.AvisoTipoId).HasComment("Define como valor un Tipo Diario");

                entity.Property(e => e.Cancelado).HasComment("Indica q el Evento Fue Cancelado");

                entity.Property(e => e.Dia).HasComment("Indica cada cuantos dia se debe producucir el evento");

                entity.Property(e => e.Duracion).HasComment("Indica la Cantidad de Minutos q dura el Evento");
            });

            modelBuilder.Entity<EventoMantenimiento>(entity =>
            {
                entity.Property(e => e.EventoMantenId).ValueGeneratedNever();

                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.EventoMantenimiento)
                    .HasForeignKey(d => d.RegEventoId)
                    .HasConstraintName("FK_EventoMantenimiento_Evento");

                entity.HasOne(d => d.VehicMant)
                    .WithMany(p => p.EventoMantenimiento)
                    .HasForeignKey(d => d.VehicMantId)
                    .HasConstraintName("FK_EventoMantenimiento_TransporteVehiculoMantenimiento");
            });

            modelBuilder.Entity<EventoMensual>(entity =>
            {
                entity.Property(e => e.RegPeriodoMensualId).ValueGeneratedNever();

                entity.Property(e => e.AvisoTipoId).HasComment("Define como valor un Tipo Aviso Mensual");

                entity.Property(e => e.Cancelado).HasComment("Indica q el Evento Fue Cancelado");

                entity.Property(e => e.DeCadalMes).HasComment("Se indica con valor cada Cuantos meses se tiene q repetir");

                entity.Property(e => e.Duracion).HasComment("Indica la Cantidad de Minutos q dura el Evento");

                entity.Property(e => e.Repeticiones).HasComment("Indica cuantas veces se tiene q repetir el evento para considerarlo como Finalizado");

                entity.Property(e => e.RepetirCadaDia).HasComment("Indicael dia del mes en q se repite el evento Ejem. Cada dia 20 del Mes");
            });

            modelBuilder.Entity<EventoSemanal>(entity =>
            {
                entity.Property(e => e.RegPeriodoSemanalId).ValueGeneratedNever();

                entity.Property(e => e.AvisoTipoId).HasComment("Define como valor un Tipo Aviso Semanal");

                entity.Property(e => e.Cancelado).HasComment("Indica q el Evento Fue Cancelado");

                entity.Property(e => e.Duracion).HasComment("Indica la Cantidad de Minutos q dura el Evento");

                entity.Property(e => e.RepetirCada).HasComment("Indica cada cuantas semanas se tiene q repetir el evento (Ejm. cada 2 Semanas, Cada 1 semana");
            });

            modelBuilder.Entity<FiscalInformeSemanal>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.FiscalInformeSemanal)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_FiscalInformeSemanal_Usuario");
            });

            modelBuilder.Entity<FrigorificoAnimaIngresolProducto>(entity =>
            {
                entity.HasComment("Permite Vincular Ingreo Amnimales con su respectiva Compra (liquidacion)");

                entity.Property(e => e.TipificId).HasComment("Indica el Codigo de Tipificacion de la Pieza (Calidad de la Carne), que la asigan el tipificador");

                entity.Property(e => e.TipoServicioId).HasComment("1-FAENA \r\n2-INVERNADA \r\n3-REPRODUCCION \r\n4-CRIA \r\n5-REMATE DE CARNE \r\n6-FAENA Y VENTA DE CARNE POR CUENTA Y ORDEN");

                entity.HasOne(d => d.AnimaTipol)
                    .WithMany(p => p.FrigorificoAnimaIngresolProducto)
                    .HasForeignKey(d => d.AnimaTipolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoAnimaIngresolProducto_FrigorificoAnimalTipo");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.FrigorificoAnimaIngresolProducto)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoAnimaIngresolProducto_Producto");

                entity.HasOne(d => d.Tipific)
                    .WithMany(p => p.FrigorificoAnimaIngresolProducto)
                    .HasForeignKey(d => d.TipificId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoAnimaIngresolProducto_FrigorificoTipificacion");
            });

            modelBuilder.Entity<FrigorificoAnimalPieza>(entity =>
            {
                entity.Property(e => e.AnimalPiezaId)
                    .ValueGeneratedNever()
                    .HasComment("Campo unico q  indica la pieza especifica par un tipo de Animal");

                entity.Property(e => e.AnimaTipolId).HasComment("");

                entity.Property(e => e.AnimalPiezaTipoId).HasComment("Viene de AlmaNET.FrigorificoAnimalPiezaTipo");

                entity.HasOne(d => d.AnimaTipol)
                    .WithMany(p => p.FrigorificoAnimalPieza)
                    .HasForeignKey(d => d.AnimaTipolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoAnimalPieza_FrigorificoAnimalTipo");

                entity.HasOne(d => d.AnimalPiezaTipo)
                    .WithMany(p => p.FrigorificoAnimalPieza)
                    .HasForeignKey(d => d.AnimalPiezaTipoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoAnimalPieza_FrigorificoAnimalPiezaTipo");
            });

            modelBuilder.Entity<FrigorificoAnimalPiezaTipo>(entity =>
            {
                entity.Property(e => e.EsObilgatorio).HasComment("Indica que en la faena se tiene q especificar si o si un valor para este pieza ");
            });

            modelBuilder.Entity<FrigorificoAnimalTipo>(entity =>
            {
                entity.Property(e => e.AnimaTipolId).ValueGeneratedNever();
            });

            modelBuilder.Entity<FrigorificoCorral>(entity =>
            {
                entity.Property(e => e.CorralId)
                    .ValueGeneratedNever()
                    .HasComment("Indica el Nro de Corral del Frigorifico");

                entity.Property(e => e.Descripcion).HasComment("Descripcion del Corral");
            });

            modelBuilder.Entity<FrigorificoEgreso>(entity =>
            {
                entity.Property(e => e.RegistroEgresoId).ValueGeneratedNever();

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle (Indica en q item de Venta Corresponde el salida de la Media Res)");

                entity.Property(e => e.KgPieza).HasComment("Indica el Peso de la Pieza expresado en KG.");

                entity.HasOne(d => d.ItemFaenaPieza)
                    .WithMany(p => p.FrigorificoEgreso)
                    .HasForeignKey(d => d.ItemFaenaPiezaId)
                    .HasConstraintName("FK_FrigorificoEgreso_FrigorificoFaenaDetallePieza");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FrigorificoEgreso)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_FrigorificoEgreso_OperacionItemProducto");
            });

            modelBuilder.Entity<FrigorificoEntidad>(entity =>
            {
                entity.HasKey(e => new { e.TipoEntidadId, e.NroEntidadId });

                entity.Property(e => e.NroRenspa).HasComment("N° Registro Nacional Sanitario de Productores Agropecuarios");

                entity.Property(e => e.NroRuca).HasComment("N° Registro Único de la Cadena Agroalimentaria");

                entity.Property(e => e.TipoParticipanteId).HasComment("1-Productor/criador\r\n2-Feed lots\r\n3-Invernador\r\n4-Establecimiento faenador y/o frigorífico\r\n5-Consignatario y/o comisionista\r\n6-Consignatario directo\r\n7-Consignatario de Carnes\r\n9-Matarife abastecedor y carnicero y usuario de faena");

                entity.HasOne(d => d.Proveedor)
                    .WithOne(p => p.FrigorificoEntidad)
                    .HasPrincipalKey<Proveedor>(p => new { p.TipoEntidadId, p.ProveedorId })
                    .HasForeignKey<FrigorificoEntidad>(d => new { d.TipoEntidadId, d.NroEntidadId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoEntidad_Proveedor");
            });

            modelBuilder.Entity<FrigorificoFaena>(entity =>
            {
                entity.Property(e => e.FaenaId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Faena con el que se registra el proceso");
            });

            modelBuilder.Entity<FrigorificoFaenaDetalle>(entity =>
            {
                entity.Property(e => e.ItemFaenaId)
                    .ValueGeneratedNever()
                    .HasComment("Item de la Faena");

                entity.Property(e => e.CabezaId).HasComment("Cabeza q ingreso a la faena");

                entity.Property(e => e.Detalle).HasComment("Detalle soble el animal q se esta Faenando");

                entity.Property(e => e.FaenaId).HasComment("Nro Faena con el que se registra el proceso");

                entity.HasOne(d => d.Cabeza)
                    .WithMany(p => p.FrigorificoFaenaDetalle)
                    .HasForeignKey(d => d.CabezaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoFaenaDetalle_FrigorificoIngreso");

                entity.HasOne(d => d.Faena)
                    .WithMany(p => p.FrigorificoFaenaDetalle)
                    .HasForeignKey(d => d.FaenaId)
                    .HasConstraintName("FK_FrigorificoFaenaDetalle_FrigorificoFaena");
            });

            modelBuilder.Entity<FrigorificoFaenaDetallePieza>(entity =>
            {
                entity.HasKey(e => e.ItemFaenaPiezaId)
                    .HasName("PK_FrigorificoFaenaDetallePieza_1");

                entity.Property(e => e.ItemFaenaPiezaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Unico q inida la pieza del animal y permite identificar a quien corresponde");

                entity.Property(e => e.AnimalPiezaId).HasComment("de AlmaNET.FrigorificoAnimalPiezaTipo");

                entity.Property(e => e.ItemFaenaId).HasComment("Item de la Faena");

                entity.Property(e => e.KgPieza).HasComment("Indico cuanto pesa la Pieza del animal");

                entity.Property(e => e.TipificId).HasComment("Indica el Codigo de Tipificacion de la Pieza (Calidad de la Carne), que la asigan el tipificador");

                entity.Property(e => e.TipificadorId).HasComment("Codigo TIpificador, persona encargada de Tipificar las Piezas del Animal");

                entity.HasOne(d => d.AnimalPieza)
                    .WithMany(p => p.FrigorificoFaenaDetallePieza)
                    .HasForeignKey(d => d.AnimalPiezaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoFaenaDetallePieza_FrigorificoAnimalPieza");

                entity.HasOne(d => d.ItemFaena)
                    .WithMany(p => p.FrigorificoFaenaDetallePieza)
                    .HasForeignKey(d => d.ItemFaenaId)
                    .HasConstraintName("FK_FrigorificoFaenaDetallePieza_FrigorificoFaenaDetalle");

                entity.HasOne(d => d.Tipific)
                    .WithMany(p => p.FrigorificoFaenaDetallePieza)
                    .HasForeignKey(d => d.TipificId)
                    .HasConstraintName("FK_FrigorificoFaenaDetallePieza_FrigorificoTipificacionPiezasAnimal");

                entity.HasOne(d => d.Tipificador)
                    .WithMany(p => p.FrigorificoFaenaDetallePieza)
                    .HasForeignKey(d => d.TipificadorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_FrigorificoFaenaDetallePieza_FrigorificoTipificador");
            });

            modelBuilder.Entity<FrigorificoIngreso>(entity =>
            {
                entity.Property(e => e.CabezaId)
                    .ValueGeneratedNever()
                    .HasComment("Indica el Nro de cabeza asignado al Animal");

                entity.Property(e => e.AnimaTipolId).HasComment("Indica el Tipo Animal");

                entity.Property(e => e.CorralId).HasComment("Indica el Nro de Corral del Frigorifico");

                entity.Property(e => e.FechaIngreso).HasComment("Indica la Fecha y hora que ingreso el animal");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle (Indica en q item de Compra Corresponde el Ingreso de esta Cabeza)");

                entity.Property(e => e.KgAnimal).HasComment("Indica el Peso del Animal vivo expresado en KG.");

                entity.Property(e => e.TropaCabezaNro).HasComment("Indica el nro animal dentro de la Tropa");

                entity.HasOne(d => d.Corral)
                    .WithMany(p => p.FrigorificoIngreso)
                    .HasForeignKey(d => d.CorralId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoIngreso_FrigorificoCorral");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FrigorificoIngreso)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_FrigorificoIngreso_OperacionItemProducto");

                entity.HasOne(d => d.Tropa)
                    .WithMany(p => p.FrigorificoIngreso)
                    .HasForeignKey(d => d.TropaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoIngreso_FrigorificoTropa");
            });

            modelBuilder.Entity<FrigorificoPiezaEgresoProducto>(entity =>
            {
                entity.Property(e => e.RegPiezTipId).ValueGeneratedNever();

                entity.Property(e => e.AnimalPiezaId).HasComment("Campo unico q  indica la pieza especifica par un tipo de Animal");

                entity.Property(e => e.CodigoId).HasComment("Codigo Vinculado en Venta");

                entity.Property(e => e.TipificId).HasComment("Indica el Codigo de Tipificacion de la Pieza (Calidad de la Carne), que la asigan el tipificador");

                entity.HasOne(d => d.AnimalPieza)
                    .WithMany(p => p.FrigorificoPiezaEgresoProducto)
                    .HasForeignKey(d => d.AnimalPiezaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoPiezaEgresoProducto_FrigorificoAnimalPieza");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.FrigorificoPiezaEgresoProducto)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoPiezaEgresoProducto_Producto");

                entity.HasOne(d => d.Tipific)
                    .WithMany(p => p.FrigorificoPiezaEgresoProducto)
                    .HasForeignKey(d => d.TipificId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FrigorificoPiezaEgresoProducto_FrigorificoTipificacion");
            });

            modelBuilder.Entity<FrigorificoTipificacion>(entity =>
            {
                entity.HasKey(e => e.TipificId)
                    .HasName("PK_FrigorificoTipificacionPiezasAnimal");

                entity.HasComment("Permite establecer la calidad de cada Animal Pieza");

                entity.Property(e => e.TipificId)
                    .ValueGeneratedNever()
                    .HasComment("Indica el Codigo de Tipificacion de la Pieza (Calidad de la Carne), que la asigan el tipificador");

                entity.Property(e => e.AnimaTipolId).HasComment("indica para que tipo de animal aplica este tipificacion Viene de FrigorificoAnimalTipo");

                entity.Property(e => e.Descripcion).HasComment("Denominacion de la Tipificacion");

                entity.Property(e => e.IngresoEgreso).HasComment("0-Ninguno 1-Ingreso 2-Egreso");

                entity.HasOne(d => d.AnimaTipol)
                    .WithMany(p => p.FrigorificoTipificacion)
                    .HasForeignKey(d => d.AnimaTipolId)
                    .HasConstraintName("FK_FrigorificoTipificacion_FrigorificoAnimalTipo");
            });

            modelBuilder.Entity<FrigorificoTipificador>(entity =>
            {
                entity.Property(e => e.TipificadorId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo TIpificador, persona encargada de Tipificar las Piezas del Animal");

                entity.Property(e => e.Denominacion).HasComment("Nombre / Denominacion de la Persona encargada de Realizar la tipificacion");
            });

            modelBuilder.Entity<FrigorificoTropa>(entity =>
            {
                entity.Property(e => e.TropaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.Property(e => e.HotelId).ValueGeneratedNever();

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Hotel)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Hotel_Sucursal");
            });

            modelBuilder.Entity<HotelElemento>(entity =>
            {
                entity.HasOne(d => d.ElementoCategoria)
                    .WithMany(p => p.HotelElemento)
                    .HasForeignKey(d => d.ElementoCategoriaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelElemento_HotelHabitacionElementoCategoria");
            });

            modelBuilder.Entity<HotelHabitacionAuditoria>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.HotelHabitacionAuditoria)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_HotelHabitacionAuditoria_Usuario");

                entity.HasOne(d => d.Habitacion)
                    .WithMany(p => p.HotelHabitacionAuditoria)
                    .HasForeignKey(d => d.HabitacionId)
                    .HasConstraintName("FK_HotelHabitacionAuditoria_HotelHabitacion");
            });

            modelBuilder.Entity<HotelHabitacionAuditoriaItem>(entity =>
            {
                entity.HasOne(d => d.HabitAudit)
                    .WithMany(p => p.HotelHabitacionAuditoriaItem)
                    .HasForeignKey(d => d.HabitAuditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelHabitacionAuditoriaItem_HotelHabitacionAuditoria");

                entity.HasOne(d => d.OrdenSer)
                    .WithMany(p => p.HotelHabitacionAuditoriaItem)
                    .HasForeignKey(d => d.OrdenSerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelHabitacionAuditoriaItem_OrdenServicioHabitacion");
            });

            modelBuilder.Entity<HotelHabitacionElemento>(entity =>
            {
                entity.Property(e => e.HabitElementoId).ValueGeneratedNever();

                entity.Property(e => e.Detalle).IsFixedLength();

                entity.HasOne(d => d.Elemento)
                    .WithMany(p => p.HotelHabitacionElemento)
                    .HasForeignKey(d => d.ElementoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelHabitacionElemento_HotelElemento");

                entity.HasOne(d => d.Habitacion)
                    .WithMany(p => p.HotelHabitacionElemento)
                    .HasForeignKey(d => d.HabitacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelHabitacionElemento_HotelHabitacion");
            });

            modelBuilder.Entity<HotelHabitacionElementoCategoria>(entity =>
            {
                entity.Property(e => e.Orden).IsFixedLength();
            });

            modelBuilder.Entity<HotelRestTurno>(entity =>
            {
                entity.HasKey(e => e.CierreId)
                    .HasName("PK_HotelRestaurantTurno");

                entity.Property(e => e.EstadoId).HasComment("0-Abierto 1-Cerrado");

                entity.Property(e => e.LogProceso).HasComment("Almacena el dato de todas las tranascciones q se realizaron y en\\ el orden q se producen");

                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento el Pedido");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TipoServId).HasComment("1- RestaurantMesa 10-HotelHabitacion (Tiene como finalidad determinar si pertenece al Hotel o al Restaurant)");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.HotelRestTurno)
                    .HasForeignKey(d => d.ResumenId)
                    .HasConstraintName("FK_HotelRestaurantTurno_OperacionResumen");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.HotelRestTurno)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_HotelRestaurantTurno_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.HotelRestTurno)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_HotelRestaurantTurno_Sucursal");
            });

            modelBuilder.Entity<HotelSector>(entity =>
            {
                entity.Property(e => e.HotelSectorId).ValueGeneratedNever();

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.HotelSector)
                    .HasForeignKey(d => d.HotelId)
                    .HasConstraintName("FK_HotelSector_Hotel");
            });

            modelBuilder.Entity<HotelSectorHabitacion>(entity =>
            {
                entity.HasKey(e => e.HabitacionId)
                    .HasName("PK_HotelHabitacion");

                entity.Property(e => e.HabitacionId).ValueGeneratedNever();

                entity.HasOne(d => d.HotelSector)
                    .WithMany(p => p.HotelSectorHabitacion)
                    .HasForeignKey(d => d.HotelSectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelSectorHabitacion_HotelSector");
            });

            modelBuilder.Entity<Huella>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_Huellas");

                entity.HasComment("1-Pulgar Derecho 2-Indice Derecho 3-Medio Derecho 4-Anular Derecho 5- Meñisco Derecho 6-Pulgar Izquierdo 7-Indice Izquierdo 8-Medio Izquierdo 9-Anular Izquierdo 10- Meñisco Izquierdo ");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.Huella1).HasComment("");

                entity.Property(e => e.TipoHuella).HasComment("0-No Especifica 1-Pulgar Derecho 2-Indice Derecho 3-Corazon/Medio Dercho 4-Anular Derecho 5- Meñique Derecho 6-Pulgar Izquierdo 7-Indice Izquierdo 8-Corazon/Medio Izquierdo 9-Anular Izquierdo 10- Meñique Izquierdo");
            });

            modelBuilder.Entity<ImpresionRegistro>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_OperacionImpresionHistorico");

                entity.Property(e => e.RegistroId).HasComment("Contador Registros");

                entity.Property(e => e.Computer).HasComment("Terminal desde la que se dio la Orden de Impresion");

                entity.Property(e => e.FechaHora).HasComment("En que se registro la impresion");
            });

            modelBuilder.Entity<Impuesto>(entity =>
            {
                entity.HasComment("Contiene los Impuestos con los que se trabaja en esta Empresa");

                entity.Property(e => e.ImpuestoId).ValueGeneratedNever();

                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.EsModificable).HasComment("Indica si puede Modificar el porcentaje o Valor asignado en las operaciones");

                entity.Property(e => e.EsRetencion).HasComment("Especifico q el impuesto es una Retencion");

                entity.Property(e => e.ImporteDeducir).HasComment("Importe  del Impuesto (Es fijo y no refiere a un calculo)");

                entity.Property(e => e.Inhabilitado).HasComment("Indico q el impuesto esta inhabilitado, no aplica en la empresa (no se elimina por estar compormetido en otras operaciones anteriores a la fecha de inhabilitacion)");

                entity.Property(e => e.OperacionAplica).HasComment("0-No establece 1-Ventas 2-Compras 4-Cobros 8-Pagos");

                entity.Property(e => e.SePuedeAdicionar).HasComment("Indica se se puede adicionar de Forma Manual en las Operaciones");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ImpuestoCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Impuesto_PlanDeCuentas");

                entity.HasOne(d => d.CuentaId2Navigation)
                    .WithMany(p => p.ImpuestoCuentaId2Navigation)
                    .HasForeignKey(d => d.CuentaId2)
                    .HasConstraintName("FK_Impuesto_PlanDeCuenta");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.Impuesto)
                    .HasForeignKey(d => d.EmpresaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Impuesto_EmpresaDatos");
            });

            modelBuilder.Entity<ImpuestoDesglose>(entity =>
            {
                entity.HasKey(e => e.ImpDesgId)
                    .HasName("PK_ImpuestoDesglose_1");

                entity.Property(e => e.ImpDesgId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ImpuestoDesglose)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_ImpuestoDesglose_Impuesto");
            });

            modelBuilder.Entity<ImpuestoFormuarioLiquidacionDetalle>(entity =>
            {
                entity.Property(e => e.LiquidacionImpuestoItemId).ValueGeneratedNever();

                entity.HasOne(d => d.Liquidacion)
                    .WithMany(p => p.ImpuestoFormuarioLiquidacionDetalle)
                    .HasForeignKey(d => d.LiquidacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestoFormuarioLiquidacionDetalle_ImpuestoFormularioLiquidacion");
            });

            modelBuilder.Entity<ImpuestoFormulario>(entity =>
            {
                entity.Property(e => e.ImpuestoFormularioId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ImpuestoFormulario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestoFormulario_Usuario");
            });

            modelBuilder.Entity<ImpuestoFormularioLiquidacion>(entity =>
            {
                entity.Property(e => e.LiquidacionId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ImpuestoFormularioLiquidacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ImpuestoFormularioLiquidacion_Usuario");

                entity.HasOne(d => d.Compra)
                    .WithMany(p => p.ImpuestoFormularioLiquidacion)
                    .HasPrincipalKey(p => p.CompraId)
                    .HasForeignKey(d => d.CompraId)
                    .HasConstraintName("FK_ImpuestoFormularioLiquidacion_OperacionCompra");

                entity.HasOne(d => d.ImpuestoFormulario)
                    .WithMany(p => p.ImpuestoFormularioLiquidacion)
                    .HasForeignKey(d => d.ImpuestoFormularioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestoFormularioLiquidacion_ImpuestoFormulario");

                entity.HasOne(d => d.Pago)
                    .WithMany(p => p.ImpuestoFormularioLiquidacion)
                    .HasPrincipalKey(p => p.PagoId)
                    .HasForeignKey(d => d.PagoId)
                    .HasConstraintName("FK_ImpuestoFormularioLiquidacion_OperacionPago");

                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.ImpuestoFormularioLiquidacion)
                    .HasForeignKey(d => d.RegEventoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpuestoFormularioLiquidacion_Evento");
            });

            modelBuilder.Entity<Informes>(entity =>
            {
                entity.Property(e => e.InformeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<LibroDiario>(entity =>
            {
                entity.HasKey(e => e.DiarioId)
                    .HasName("PK_LibroDiario_DiarioID");

                entity.Property(e => e.EstaModificado).HasComment("null o 0- Vinculado con el comprobante, 1- Respeta los cambios realizados");

                entity.Property(e => e.Procesado).HasComment("Indica la fecha y hora de la ultima ves q se proceso, En caso de esta fecha sea mayor a la del balance vinculado, marca el balance como pendiente de Procesar)");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_LibroDiario_Usuario");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.BalanceId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_LibroDiario_LibroDiarioBalance");

                entity.HasOne(d => d.DiarioAgrup)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.DiarioAgrupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_LibroDiario_LibroDiarioAgrupado");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_LibroDiario_Proyecto");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.ResumenId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_LibroDiario_OperacionResumen");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_LibroDiario_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.LibroDiario)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_LibroDiario_Sucursal");

                entity.HasOne(d => d.OperacionCobro)
                    .WithOne(p => p.LibroDiario)
                    .HasForeignKey<LibroDiario>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiario_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithOne(p => p.LibroDiario)
                    .HasForeignKey<LibroDiario>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiario_OperacionCompra");

                entity.HasOne(d => d.OperacionPago)
                    .WithOne(p => p.LibroDiario)
                    .HasForeignKey<LibroDiario>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiario_OperacionPago");

                entity.HasOne(d => d.OperacionVenta)
                    .WithOne(p => p.LibroDiario)
                    .HasForeignKey<LibroDiario>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiario_Ventas");
            });

            modelBuilder.Entity<LibroDiarioAgrupado>(entity =>
            {
                entity.Property(e => e.DiarioAgrupId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.LibroDiarioAgrupado)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_LibroDiarioAgrupado_Usuario");
            });

            modelBuilder.Entity<LibroDiarioBalance>(entity =>
            {
                entity.Property(e => e.BalanceEstadoId).HasComment("0-Balance Cerrado no permite edicion Comprobantes y Libro Diario Relacionados 1-Esta en Proceso (permite editar Operaciones Relacionadas, y libro Diario)  10- Esta en Proceso, solo permite edicion Libro Diario 20- Esta en Proceso solo permite edicion Operaciones 100-No Vinculante");

                entity.Property(e => e.Fecha).HasComment("Fecha realizacion Resumen");

                entity.Property(e => e.Procesado).HasComment("Se indica la Fecha y hora de la ultima ves q se proceso");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.LibroDiarioBalance)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_LibroDiarioBalance_Usuario");

                entity.HasOne(d => d.AperturaDiario)
                    .WithMany(p => p.LibroDiarioBalanceAperturaDiario)
                    .HasForeignKey(d => d.AperturaDiarioId)
                    .HasConstraintName("FK_LibroDiarioBalance_LibroDiario");

                entity.HasOne(d => d.CierreDiario)
                    .WithMany(p => p.LibroDiarioBalanceCierreDiario)
                    .HasForeignKey(d => d.CierreDiarioId)
                    .HasConstraintName("FK_LibroDiarioBalance_LibroDiario1");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.LibroDiarioBalance)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_LibroDiarioBalance_Proyecto");

                entity.HasOne(d => d.RefundDiario)
                    .WithMany(p => p.LibroDiarioBalanceRefundDiario)
                    .HasForeignKey(d => d.RefundDiarioId)
                    .HasConstraintName("FK_LibroDiarioBalance_LibroDiario2");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.LibroDiarioBalance)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_LibroDiarioBalance_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.LibroDiarioBalance)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_LibroDiarioBalance_Sucursal");
            });

            modelBuilder.Entity<LibroDiarioBalanceItem>(entity =>
            {
                entity.Property(e => e.CuentaId).HasComment("Codigo Cuenta");

                entity.Property(e => e.CuentaTotalizId).HasComment("Autoincremeta");

                entity.Property(e => e.Desglose1Id).HasComment("Almacena el ID correspondiente al tipo desglose seleccionado para DesgloseNivel1");

                entity.Property(e => e.Desglose2Id).HasComment("Almacena el ID correspondiente al tipo desglose seleccionado para DesgloseNivel2");

                entity.Property(e => e.Desglose3Id).HasComment("Almacena el ID correspondiente al tipo desglose seleccionado para DesgloseNivel1");

                entity.Property(e => e.Desglose4Id).HasComment("Almacena el ID correspondiente al tipo desglose seleccionado para DesgloseNivel1");

                entity.Property(e => e.DesgloseNivel1).HasComment("Desglose a utilizar para el Balance 0-No hace desglose, 1-Desglosa Pors Sucursal, 2-Desglosa por Sector,3-Desglosa por Proyecto, 4-Desglosa por entidad ");

                entity.Property(e => e.DesgloseNivel2).HasComment("Desglose a utilizar para el Balance 0-No hace desglose, 1-Desglosa Pors Sucursal, 2-Desglosa por Sector,3-Desglosa por Proyecto, 4-Desglosa por entidad ");

                entity.Property(e => e.DesgloseNivel3).HasComment("Desglose a utilizar para el Balance 0-No hace desglose, 1-Desglosa Pors Sucursal, 2-Desglosa por Sector,3-Desglosa por Proyecto, 4-Desglosa por entidad ");

                entity.Property(e => e.DesgloseNivel4).HasComment("Desglose a utilizar para el Balance 0-No hace desglose, 1-Desglosa Pors Sucursal, 2-Desglosa por Sector,3-Desglosa por Proyecto, 4-Desglosa por entidad ");

                entity.Property(e => e.Importe).HasComment("Indica el importe total del Item en el Balance Positivo Saldo Deudo,Negativo Saldo Haber\r\n");

                entity.Property(e => e.NivelAnidamineto).HasComment("Indico el nivel Jeraquico (Anidamiento)");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.LibroDiarioBalanceItem)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("FK_LibroDiarioBalanceItem_LibroDiarioBalance");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.LibroDiarioBalanceItem)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_LibroDiarioBalanceItem_PlanDeCuenta");
            });

            modelBuilder.Entity<LibroDiarioItem>(entity =>
            {
                entity.HasKey(e => e.SubDiarioId)
                    .HasName("PK_LibroDiarioSub");

                entity.Property(e => e.Cantidad).HasComment("Utilizado para Stock");

                entity.Property(e => e.CuentaId).HasComment("Codigo Cuenta");

                entity.Property(e => e.EsDebe).HasComment("1 Determina que el Importe es Deudor 0-Acreedor");

                entity.Property(e => e.Importe).HasComment("Importe ");

                entity.Property(e => e.LeyendaCuenta).HasComment("Leyenda Adicional");

                entity.Property(e => e.NroAsiento).HasComment("Indica el Orden para presentar el detalle");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.RegEntidadId).HasComment("Se indica el Nro correspondiente al tipo entidad (Nro CLiente,Proveedor,Vendedor)");

                entity.Property(e => e.SectorId).HasComment("Codigo Sector");

                entity.Property(e => e.SucursalId).HasComment("Codigo Sucursal");

                entity.Property(e => e.TipoEntidadId).HasComment("1-Cliente 2-Proveedor 3-Vendedor (Se optiene de Alamanet.EntidadTipo)");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LibroDiarioItem_PlanDeCuenta");

                entity.HasOne(d => d.Diario)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasForeignKey(d => d.DiarioId)
                    .HasConstraintName("FK_LibroDiarioSub_LibroDiario");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiarioSub_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_LibroDiarioItem_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LibroDiarioSub_Sucursale");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasPrincipalKey(p => new { p.TipoEntidadId, p.ClienteId })
                    .HasForeignKey(d => new { d.TipoEntidadId, d.RegEntidadId })
                    .HasConstraintName("FK_LibroDiarioItem_Cliente");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasPrincipalKey(p => new { p.TipoEntidadId, p.ProveedorId })
                    .HasForeignKey(d => new { d.TipoEntidadId, d.RegEntidadId })
                    .HasConstraintName("FK_LibroDiarioItem_Proveedor");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.LibroDiarioItem)
                    .HasPrincipalKey(p => new { p.TipoEntidadId, p.VendedorId })
                    .HasForeignKey(d => new { d.TipoEntidadId, d.RegEntidadId })
                    .HasConstraintName("FK_LibroDiarioItem_Vendedor");
            });

            modelBuilder.Entity<Licencia>(entity =>
            {
                entity.Property(e => e.LicenciaId).ValueGeneratedNever();

                entity.Property(e => e.Estado).HasComment("0-Cerrada 1-Abierta");
            });

            modelBuilder.Entity<LicenciaIndiceTabla>(entity =>
            {
                entity.HasKey(e => new { e.LicenciaId, e.TableId })
                    .HasName("PK_LicenciaIndiceTabla_1");

                entity.HasOne(d => d.Licencia)
                    .WithMany(p => p.LicenciaIndiceTabla)
                    .HasForeignKey(d => d.LicenciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LicenciaIndiceTabla_Licencia");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.LicenciaIndiceTabla)
                    .HasForeignKey(d => d.TableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LicenciaIndiceTabla_TableDB");
            });

            modelBuilder.Entity<MonedaTipo>(entity =>
            {
                entity.Property(e => e.Cotizacion).HasComment("Cotizacion Precio de Toma (Compra)");

                entity.Property(e => e.CotizacionVenta).HasComment("Cotizacion para la Venta");
            });

            modelBuilder.Entity<Noticia>(entity =>
            {
                entity.Property(e => e.NoticiaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OperacionAdelanto>(entity =>
            {
                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionAdelanto)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionAdelanto_PlanDeCuenta");

                entity.HasOne(d => d.AutorizacionCompra)
                    .WithMany(p => p.OperacionAdelanto)
                    .HasForeignKey(d => new { d.RegistroOperacionId, d.TipoOperacionId })
                    .HasConstraintName("FK_OperacionAdelanto_AutorizacionCompra");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionAdelanto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAdelanto_OperacionCobro");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionAdelanto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAdelanto_OperacionPago");
            });

            modelBuilder.Entity<OperacionAdelantoCancelacion>(entity =>
            {
                entity.HasOne(d => d.Adelanto)
                    .WithMany(p => p.OperacionAdelantoCancelacion)
                    .HasForeignKey(d => d.AdelantoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionAdelantoCancelacion_OperacionAdelanto");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionAdelantoCancelacion)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionAdelantoCancelacion_OperacionDetallePago");
            });

            modelBuilder.Entity<OperacionAltaModicacion>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionAltaModicacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionAltaModicacion_Usuario");

                entity.HasOne(d => d.OperacionCobro)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionCompra");

                entity.HasOne(d => d.OperacionCredito)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionCredito");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionDespacho");

                entity.HasOne(d => d.OperacionInventario)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasPrincipalKey<OperacionInventario>(p => new { p.TipoOperacionId, p.InventarioId })
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionInventario");

                entity.HasOne(d => d.OrdenServicio)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OrdenServicio");

                entity.HasOne(d => d.OperacionPago)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionPago");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionRecepcion");

                entity.HasOne(d => d.OperacionRendicion)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasPrincipalKey<OperacionRendicion>(p => new { p.TipoOperacionId, p.RendicionId })
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionRendicion");

                entity.HasOne(d => d.OperacionVenta)
                    .WithOne(p => p.OperacionAltaModicacion)
                    .HasForeignKey<OperacionAltaModicacion>(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAltaModicacion_OperacionVenta");
            });

            modelBuilder.Entity<OperacionArchivo>(entity =>
            {
                entity.Property(e => e.ClasificacionArchivoId).HasComment("Se obtiene de AlmaNET.ArchivosClasificion, indica el tipo de archivo q se almacena,");

                entity.Property(e => e.NroArchivo).HasComment("Para el caso que para una operacion se necesiten vincular varias imagenes estas se enumeran para facilitar su Sincronizacion");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_TransporteCarga");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionCompra");

                entity.HasOne(d => d.OperacionCredito)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionCredito");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionDespacho");

                entity.HasOne(d => d.HotelHabitacionAuditoria)
                    .WithMany(p => p.OperacionArchivo)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.HabitAuditId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionArchivo_HotelHabitacionAuditoria");

                entity.HasOne(d => d.OperacionInventario)
                    .WithMany(p => p.OperacionArchivo)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.InventarioId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionArchivo_OperacionInventario");

                entity.HasOne(d => d.TransporteCargaMovimiento)
                    .WithMany(p => p.OperacionArchivo)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.MovId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_TransporteCargaMovimiento");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionArchivo_OrdenServicio");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionPago");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionRecepcion");

                entity.HasOne(d => d.TransporteRemitos)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_TransporteRemitos1");

                entity.HasOne(d => d.Servis)
                    .WithMany(p => p.OperacionArchivo)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.ServisId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_Servis");

                entity.HasOne(d => d.SoporteCasoTarea)
                    .WithMany(p => p.OperacionArchivo)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.TareaId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionArchivo_SoporteCasoTarea");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionArchivo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionArchivo_OperacionVenta");
            });

            modelBuilder.Entity<OperacionAutorizacion>(entity =>
            {
                entity.Property(e => e.CodigoAutoriz).HasComment("Codigo q permite tomar la Autorización");

                entity.Property(e => e.Leyenda).HasComment("Mensaje a Visualizar");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro de venta o Compra a la q pertenece");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TipoAutorizacionId).HasComment("1- Permite retiro Materiales (Excedido Fecha Deposito)");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,InterDeposito,OrdenServicio,OrdenProduccion,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionAutorizacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionAutorizacion_Usuario");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionAutorizacion)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionAutorizacion_Sucursal");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.OperacionAutorizacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionAutorizacion_OperacionDespacho");
            });

            modelBuilder.Entity<OperacionCobro>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.CobroId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.CobroId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Imputacion del COBRO");

                entity.Property(e => e.AlmaUserId).HasComment("Nro Usuario AlmaID q registro la Operacion");

                entity.Property(e => e.ClienteId).HasComment("Nro Cliente");

                entity.Property(e => e.CobradorId).HasComment("Persona q realizo el Cobro");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado");

                entity.Property(e => e.EsPagoDetallar).HasComment("Indica si el pago es deglosado (Tiene + de 1 forma de Pago)");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha en que se realizo la Operacion");

                entity.Property(e => e.FechaHoraReproceso).HasComment("Indica el momento en q se realizo la reprocesacion de las notas de Pedidos generadas desde Android");

                entity.Property(e => e.FechaImputacion).HasComment("Fecha imputacion Contable");

                entity.Property(e => e.GeneraAsiento).HasComment("Indica si la operacion registra asiento contable");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que no registra Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y TalonarioID");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TotalCobro).HasComment("((ImporteRegistraImpuesto+ImporteNoRegistraImpuesto))+ImporteImpuestos+");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionCobro_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_Cliente");

                entity.HasOne(d => d.Cobrador)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.CobradorId)
                    .HasConstraintName("FK_OperacionCobro_Cobrador");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_Proyecto");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.ResumenId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_OperacionResumen");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_Sucursal");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionCobro)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobro_SincronizacionTerminal");
            });

            modelBuilder.Entity<OperacionCobroWeb>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionCobroWeb_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobroWeb_Cliente");

                entity.HasOne(d => d.Cobrador)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.CobradorId)
                    .HasConstraintName("FK_OperacionCobroWeb_Cobrador");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_OperacionCobroWeb_TransporteCargaMovimiento");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobroWeb_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobroWeb_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobroWeb_Sucursal");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCobroWeb_SincronizacionTerminal");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionCobroWeb)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CobroId })
                    .HasConstraintName("FK_OperacionCobroWeb_OperacionCobro");
            });

            modelBuilder.Entity<OperacionCobroWebImagen>(entity =>
            {
                entity.HasOne(d => d.CobroWeb)
                    .WithMany(p => p.OperacionCobroWebImagen)
                    .HasForeignKey(d => d.CobroWebId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionCobroWebImagen_OperacionCobroWeb");
            });

            modelBuilder.Entity<OperacionCobroWebItem>(entity =>
            {
                entity.HasOne(d => d.CobroWeb)
                    .WithMany(p => p.OperacionCobroWebItem)
                    .HasForeignKey(d => d.CobroWebId)
                    .HasConstraintName("FK_OperacionCobroWebItem_OperacionCobroWeb");

                entity.HasOne(d => d.CtaCteReg)
                    .WithMany(p => p.OperacionCobroWebItem)
                    .HasForeignKey(d => d.CtaCteRegId)
                    .HasConstraintName("FK_OperacionCobroWebItem_CuentaCorrienteRegistro");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionCobroWebItem)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionCobroWebItem_OperacionCobro");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionCobroWebItem)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionCobroWebItem_OperacionVenta");
            });

            modelBuilder.Entity<OperacionComision>(entity =>
            {
                entity.HasKey(e => e.RegComisionId)
                    .HasName("PK_VentasComisiones");

                entity.Property(e => e.RegComisionId).HasComment("Campo Unico");

                entity.Property(e => e.BaseImponibleComisionGral).HasComment("Indica la base imponible para Calular la comicion de venta producto\r\nEsta Deducida la bonificacion y descuento,(consideracion ver venta OTROS)");

                entity.Property(e => e.ComisionGral).HasComment("Comicion General Sobre la Venta");

                entity.Property(e => e.ComisionProd).HasComment("Comision Por Venta Productos Determinados");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Operacion que se Imprime");

                entity.Property(e => e.VendedorId).HasComment("Vendedor que Percibe la comision");

                entity.HasOne(d => d.Entidad)
                    .WithMany(p => p.OperacionComision)
                    .HasForeignKey(d => d.EntidadId)
                    .HasConstraintName("FK_OperacionComision_Entidad");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.OperacionComision)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_OperacionVentaComision_Vendedor");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OperacionComision)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionComision_OrdenServicio");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionComision)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionComision_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionComision)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionComision_OperacionVenta");
            });

            modelBuilder.Entity<OperacionComisionCompra>(entity =>
            {
                entity.HasKey(e => e.PagoCimisionId)
                    .HasName("PK_OperacionComisionPago");

                entity.Property(e => e.CobroId).HasComment("Nro Imputacion del COBRO por el que se paga comision segun importe cobrado en la venta");

                entity.Property(e => e.CompraId).HasComment("Nro de Compra");

                entity.Property(e => e.PorComisionPago).HasComment("Indico Porc. De Comicion q se paga");

                entity.Property(e => e.TipoOperacionIdcobro).HasComment("Para relacion con Cobro");

                entity.HasOne(d => d.RegComision)
                    .WithMany(p => p.OperacionComisionCompra)
                    .HasForeignKey(d => d.RegComisionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionComisionPago_OperacionComision");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionComisionCompra)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CompraId })
                    .HasConstraintName("FK_OperacionComisionPago_OperacionCompra");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionComisionCompra)
                    .HasForeignKey(d => new { d.TipoOperacionIdcobro, d.CobroId })
                    .HasConstraintName("FK_OperacionComisionCompra_OperacionCobro");
            });

            modelBuilder.Entity<OperacionComisionImpuesto>(entity =>
            {
                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionComisionImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionComisionImpuesto_Impuesto");

                entity.HasOne(d => d.PagoCimision)
                    .WithMany(p => p.OperacionComisionImpuesto)
                    .HasForeignKey(d => d.PagoCimisionId)
                    .HasConstraintName("FK_OperacionComisionImpuesto_OperacionComisionCompra");
            });

            modelBuilder.Entity<OperacionCompra>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.CompraId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros)");

                entity.Property(e => e.CompraId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro de Compra");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Categoria de Impuesto al q pertenece el proveedor");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante a ser  utilizado para este pediodo");

                entity.Property(e => e.Cotizacion).HasComment("Cotizacion a la Fecha de la Moneda");

                entity.Property(e => e.DepositoId).HasComment("Indica el Deposito que esta realizando el Pedido");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.EsPagoDetallar).HasComment("Indica si el pago es deglosado (Tiene + de 1 forma de Pago)");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha de la Factura");

                entity.Property(e => e.FechaImputacion).HasComment("Fecha Imputacion Contable");

                entity.Property(e => e.FechaVencimiento).HasComment("Fecha Vencimiento o de Pago de la Factura de Comp[ra");

                entity.Property(e => e.Filer).HasComment("Utilizado para almacenar Informacion de Sincronizacion");

                entity.Property(e => e.Frt).HasComment("Indica si se trata de Factura, Remito,Ticket");

                entity.Property(e => e.GeneraAsiento).HasComment("Indica si Generaq Asiento");

                entity.Property(e => e.ImpBonificacion).HasComment("Importe total de bonificaciones realizadas en los distintos itemes de esta  Compra");

                entity.Property(e => e.ImporteDescuento).HasComment("Total Desuento Realizado");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos Suma de la Tabla OperacionImpuesto");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que NO  esta sugeto a Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos");

                entity.Property(e => e.MonedaId).HasComment("Tipo de Moneda en que se realizo la Venta");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de talonario");

                entity.Property(e => e.ProveedorId).HasComment("Codigo Proveedor");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.ResumenId).HasComment("Cierre Resumen Contable al que pertenece la Compra");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento esta Compra");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo la compra");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoDetalle).HasComment("Tipo Detalle que se viusliza por defecto en esta Compra");

                entity.Property(e => e.TotalCompra).HasComment("Importe Total Compra");

                entity.Property(e => e.TransporteId).HasComment("Transporte en que se eviara la compra");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionCompra_Usuario");

                entity.HasOne(d => d.Caea)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.CaeaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OperacionCompra_OperacionCompraCAEA");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_OperacionCompra_Deposito");

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.MonedaId)
                    .HasConstraintName("FK_OperacionCompra_MonedaTipo");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_OperacionCompra_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionCompra_Proyecto");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.ResumenId)
                    .HasConstraintName("FK_OperacionCompra_OperacionResumen");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionCompra_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionCompra_Sucursal");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionCompra)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCompra_SincronizacionTerminal");
            });

            modelBuilder.Entity<OperacionConsignacion>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.ConsignacionId });

                entity.HasComment("Se registran todos los productos q Salen en Consignacion OperacionTipoID=130 y los productos q ingresaron en Consigancion OperacionTipoID=140");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.Filer).HasComment("Utilizado para almacenar Informacion de Sincronizacion");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento esta Compra");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo la compra");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionConsignacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionConsignacion_Usuario");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.OperacionConsignacion)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionConsignacion_EntidadSucursal");
            });

            modelBuilder.Entity<OperacionControladorFiscal>(entity =>
            {
                entity.Property(e => e.ControladorFiscalId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OperacionCredito>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.CreditoId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.CreditoId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Identificador del Credito");

                entity.Property(e => e.ClienteId).HasComment("Nro Cliente al que se otorga el Credito");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado");

                entity.Property(e => e.Cuotas).HasComment("Cantidad de Cuotas del plan.");

                entity.Property(e => e.EntidadIdgarante).HasComment("Indica la entidad que figura de garante de esta opercion");

                entity.Property(e => e.EsPlanManual).HasComment("Indica si el Plan de Pago (Cuotas), se confecciona de Forma Manual");

                entity.Property(e => e.FechaAprobacion).HasComment("Fecha en que fue aprobado el Crédito");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha en que se realizo la Operacion");

                entity.Property(e => e.Filer).HasComment("Utilizado para almacenar Informacion de Sincronizacion");

                entity.Property(e => e.GastosAdministrativos).HasComment("Importe que se cobra en concepto de gastos Administrativos");

                entity.Property(e => e.ImporteCapital).HasComment("Importe q se otorga (importe del pago q genera el credito) ");

                entity.Property(e => e.ImporteComisiones).HasComment("Importe que se aplican al credito en concepto de comisiones");

                entity.Property(e => e.ImporteIntereses).HasComment("Inteereses que se aplica sobre el capital de la operacion");

                entity.Property(e => e.MontoCredito).HasComment("Importe total a cobrar (Suma de todas las cuotas)");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y TalonarioID");

                entity.Property(e => e.PorcIntersCuota).HasComment("Indico el Poretaje de interes a plicar por cada Cuota (Utilizado para planes q permite su modificacion)");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.RegistroPagoId).HasComment("Item Pagode de Operacion venta que genero el Credito (Importe Capital OperacionDetallePago.Importe )");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo la compra");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionCredito_Cliente");

                entity.HasOne(d => d.EntidadIdgaranteNavigation)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.EntidadIdgarante)
                    .HasConstraintName("FK_OperacionCredito_Entidad");

                entity.HasOne(d => d.PlanPago)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.PlanPagoId)
                    .HasConstraintName("FK_OperacionCredito_OperacionCreditoPlanesPago");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionCredito_Proyecto");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCredito_OperacionDetallePago");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionCredito)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionCredito_Sucursal");
            });

            modelBuilder.Entity<OperacionCreditoCuota>(entity =>
            {
                entity.Property(e => e.CuotaId).HasComment("Nro Registro");

                entity.Property(e => e.CuotaNro).HasComment("Nro de Cuota");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.OperacionCredito)
                    .WithMany(p => p.OperacionCreditoCuota)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CreditoId })
                    .HasConstraintName("FK_OperacionCreditoCuota_OperacionCredito");
            });

            modelBuilder.Entity<OperacionCreditoCuotaCobrada>(entity =>
            {
                entity.Property(e => e.CobroId).HasComment("Nro Imputacion del COBRO");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.Cuota)
                    .WithMany(p => p.OperacionCreditoCuotaCobrada)
                    .HasForeignKey(d => d.CuotaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionCreditoCuotaCobrada_OperacionCreditoCuota");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionCreditoCuotaCobrada)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CobroId })
                    .HasConstraintName("FK_OperacionCreditoCuotaCobrada_OperacionCobro");
            });

            modelBuilder.Entity<OperacionCreditoPlanesPago>(entity =>
            {
                entity.Property(e => e.PlanPagoId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Plan de Pago");

                entity.Property(e => e.Adelantado).HasComment("Si es true, se cobra la 1er Cuota al momento de otorgar el Credito, si es false, la primer cuota vence segun se configure en los campos que siguen.");

                entity.Property(e => e.ClasificacionId).HasComment("Indico para que clasificacion de clientes se puede aplicar el Plan de Pago");

                entity.Property(e => e.CorrerDias).HasComment("Si el credito se realiza entre DesdeDia y HastaDia y CorrerDias es =0, vence este dia indicado en VenceElDia del mes siguiente, si CorrerDias es >0, se suma CorrerDias a la fecha de emision: para el vencimiento de la primer cuota.");

                entity.Property(e => e.CuentaIdcomision).HasComment("Cuenta Contable q representa el importe de Comision para los creditosd  emitidos con este plan de pagos");

                entity.Property(e => e.CuentaIdgastos).HasComment("Cuenta contable q representa el importe de Gastos Administrativos");

                entity.Property(e => e.CuentaIdintPunitorios).HasComment("Cuenta contable q represnta el importe punitorio q se cobra por atraso en pagos");

                entity.Property(e => e.CuentaIdinteres).HasComment("Cuenta contabe q representa el importe de intereses q se aplicain en la finciacion");

                entity.Property(e => e.Cuotas).HasComment("Cantidad de Cuotas del plan.");

                entity.Property(e => e.Descripcion).HasComment("Denominacion Plan de Pago");

                entity.Property(e => e.DesdeDia).HasComment("Dia del mes a considerar como inicio del periodo en el cual se corre la fecha de vencimiento de la primer cuota.");

                entity.Property(e => e.DiasGracia).HasComment("Dias de gracia para el cobro de intereses punitorios a partir del vencimiento de una cuota.");

                entity.Property(e => e.DiasPago).HasComment("Dias a partir del otorgamiento del credito a considerar para el pago del mismo al comercio otorgante (financieras)");

                entity.Property(e => e.EsModificable).HasComment("Indica q el Plan de Pago Credito se pude modificar , Cuotas");

                entity.Property(e => e.HastaDia).HasComment("Dia del mes a considerar como final del periodo en el cual se corre la fecha de vencimiento de la primer cuota.");

                entity.Property(e => e.ImporteGastos).HasComment("Importe que se cobrara en concepto de gastos al otorgar el Credito.");

                entity.Property(e => e.Inhabilitado).HasComment("");

                entity.Property(e => e.InteresTotal).HasComment("Interes total para la financiacion. en este Plan/ Porcentaje a Remarcar el Producto para esta lista de Precio");

                entity.Property(e => e.InteresesPunitorios).HasComment("Interes Diario que se cobrara en concepto de punitorios al cobrar cuotas atrasadas.");

                entity.Property(e => e.PorcBonific).HasComment("Indico porcentaje Diario descuento por pago anticipado");

                entity.Property(e => e.PorcentajeComision).HasComment("Porcentaje del monto otorgado como credito que se descontara en concepto de comisiones al pagar el mismo (financieras), tambien por pago descuento a muales");

                entity.Property(e => e.PorcentajeGastos).HasComment("Porcentaje que se cobrara en concepto de gastos al otorgar el Credito.");

                entity.Property(e => e.SeCorreMes).HasComment("Indica q la fecha Vencimiento corre Mes completo si cumple especificaciones segun valor en DesdeDia HastaDia");

                entity.Property(e => e.Tipo).HasComment("0: Otorgamiento general (Contrato Credito) 10: Credito Vinculado a Venta, 30- Vinculado a Venta y a una lista de Precio");

                entity.Property(e => e.VenceElDia).HasComment("Dia del mes en que vence la primer cuota del Credito.");

                entity.Property(e => e.VincularProductoPrecio).HasComment("Indica en caso q la operacion de Venta q el precio de venta del producto esta vinculado al Plan de Pago");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.OperacionCreditoPlanesPago)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionCreditoPlanesPago_ClienteClasificacion");

                entity.HasOne(d => d.CuentaIdcomisionNavigation)
                    .WithMany(p => p.OperacionCreditoPlanesPagoCuentaIdcomisionNavigation)
                    .HasForeignKey(d => d.CuentaIdcomision)
                    .HasConstraintName("FK_OperacionCreditoPlanesPago_PlanDeCuenta2");

                entity.HasOne(d => d.CuentaIdgastosNavigation)
                    .WithMany(p => p.OperacionCreditoPlanesPagoCuentaIdgastosNavigation)
                    .HasForeignKey(d => d.CuentaIdgastos)
                    .HasConstraintName("FK_OperacionCreditoPlanesPago_PlanDeCuenta");

                entity.HasOne(d => d.CuentaIdintPunitoriosNavigation)
                    .WithMany(p => p.OperacionCreditoPlanesPagoCuentaIdintPunitoriosNavigation)
                    .HasForeignKey(d => d.CuentaIdintPunitorios)
                    .HasConstraintName("FK_OperacionCreditoPlanesPago_PlanDeCuenta3");

                entity.HasOne(d => d.CuentaIdinteresNavigation)
                    .WithMany(p => p.OperacionCreditoPlanesPagoCuentaIdinteresNavigation)
                    .HasForeignKey(d => d.CuentaIdinteres)
                    .HasConstraintName("FK_OperacionCreditoPlanesPago_PlanDeCuenta1");
            });

            modelBuilder.Entity<OperacionDescuento>(entity =>
            {
                entity.Property(e => e.DescuentoTipo).HasComment("0-Manual 1-Asignado en el Cliente/Proveedor 2-Por Forma de Pago 3-Por el Desglose de FormaPago (Plan Pago Tarjeta) 10-De la Nota de Pedido");

                entity.Property(e => e.PorcDescuento).HasComment("%Porcentaje Descuento");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Operacion Sobre la que se ralizo el Descuento");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionDescuento_OperacionDetallePago");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionVentaDescuento_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDescuento_OperacionCompra");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionVentaDescuento_OperacionPago");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDescuento_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDescuento_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionDescuento)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionVentaDescuento_OperacionVenta");
            });

            modelBuilder.Entity<OperacionDespacho>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.DespachoId });

                entity.HasComment("Autorizacion para retirar de Deposito");

                entity.Property(e => e.DespachoId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro De Despacho");

                entity.Property(e => e.ClienteId).HasComment("Codigo Cliente");

                entity.Property(e => e.ComprobanteId).HasComment("");

                entity.Property(e => e.ConductorId).HasComment("Chofer que lleva");

                entity.Property(e => e.DepositoId).HasComment("Deposito del q sale");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TipoFlete).HasComment("1- Flete en Origen 10- Flete en Destino");

                entity.Property(e => e.VehiculoId).HasComment("Trasnporte q lleva el Despcho , Permite organizar los despachos segun carga y zona");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionDespacho_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_OperacionDespacho_Cliente");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_OperacionDespacho_TransporteConductor");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionDespacho_Deposito");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionDespacho_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionDespacho_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionDespacho_Sucursal");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionDespacho_TransporteVehiculo");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.OperacionDespacho)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_OperacionDespacho_Vendedor");
            });

            modelBuilder.Entity<OperacionDespachoEstado>(entity =>
            {
                entity.Property(e => e.ItemDespachoEstadoId).HasComment("0-Normal 10-No Posee Venta 20-Error Despacho Indica si Estdo de Proseso Item despachado");

                entity.Property(e => e.AsociaComprobante).HasComment("0-Indica q el despacho NO PERMITE asociar comprobante 1-El despacho tiene q poder ASOCIAR comprobante 10- es INDIFERENTE puede asociar o no , no se considera como pendiente");

                entity.Property(e => e.Descripcion).HasComment("Descripcion del estado del Item despachado");
            });

            modelBuilder.Entity<OperacionDespachoItem>(entity =>
            {
                entity.Property(e => e.ItemDespchId).HasComment("Campo unico que indica el Item de un despacho");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto");

                entity.Property(e => e.DespachoId).HasComment("N° Despacho");

                entity.Property(e => e.DetalleItemDespacho).HasComment("Permite indicar o explicar sobre el item despachado");

                entity.Property(e => e.ItemDespachoEstadoId).HasComment("0-Normal 10-No Posee Venta 20-Error Despacho Indica si Estdo de Proseso Item despachado");

                entity.Property(e => e.PrecioPp).HasComment("Precio promedio Ponderado (utilizado para asignar un valor al item despachado");

                entity.Property(e => e.PresentacionId).HasComment("Tipo de Presentacion del Producto (Caja-Unidades- etc.)");

                entity.Property(e => e.TipoItem).HasComment("Indica q es un item despacho (11)  o Repecion (21)  (utilizado para relacionar con ProductoNroSeriMovimiento");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades que contiene la presentacion al momento del registro");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionDespachoItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionDespachoItem_Producto");

                entity.HasOne(d => d.ItemDespachoEstado)
                    .WithMany(p => p.OperacionDespachoItem)
                    .HasForeignKey(d => d.ItemDespachoEstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionDespachoItem_OperacionDespachoEstado");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.OperacionDespachoItem)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_OperacionDespachoItem_ProductoLista");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionDespachoItem)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionDespachoItem_ProductoPresentacionTipo");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.OperacionDespachoItem)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.DespachoId })
                    .HasConstraintName("FK_OperacionDespachoItem_OperacionDespacho");
            });

            modelBuilder.Entity<OperacionDespachoItemDetalle>(entity =>
            {
                entity.Property(e => e.DevolucionItemDespchId).HasComment("Indica q es una debolucion sobre el Item de un despachacho , Prodcucto q se saco pero que ahora se debuelbe por no utilizarce");

                entity.Property(e => e.ItemDespchId).HasComment("el Item de un despacho");

                entity.Property(e => e.PresentacionId).HasComment("Tipo Presentacion Producto");

                entity.Property(e => e.RegItemId).HasComment("Nro de Item de OperacionItemProducto");

                entity.HasOne(d => d.DevolucionItemDespch)
                    .WithMany(p => p.OperacionDespachoItemDetalleDevolucionItemDespch)
                    .HasForeignKey(d => d.DevolucionItemDespchId)
                    .HasConstraintName("FK_OperacionDespachoItemDetalle_OperacionDespachoItem1");

                entity.HasOne(d => d.ItemDespch)
                    .WithMany(p => p.OperacionDespachoItemDetalleItemDespch)
                    .HasForeignKey(d => d.ItemDespchId)
                    .HasConstraintName("FK_OperacionDespachoItemDetalle_OperacionDespachoItem");

                entity.HasOne(d => d.RegItem)
                    .WithMany(p => p.OperacionDespachoItemDetalle)
                    .HasForeignKey(d => d.RegItemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionDespachoItemDetalle_OperacionItemProducto");

                entity.HasOne(d => d.Reserva)
                    .WithMany(p => p.OperacionDespachoItemDetalle)
                    .HasForeignKey(d => d.ReservaId)
                    .HasConstraintName("FK_OperacionDespachoItemDetalle_OperacionItemProductoReservado");
            });

            modelBuilder.Entity<OperacionDetallePago>(entity =>
            {
                entity.HasKey(e => e.RegistroPagoId)
                    .HasName("PK_PagosDetalles");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado");

                entity.Property(e => e.Cotizacion).HasComment("Cotizacion de la Moneda al momento de la operacion");

                entity.Property(e => e.CuentaId).HasComment("Cuenta Contable Vinculada por default trae la de OperacionFormaPago, pero en caso de detallar la forma de Pago se puede cambiar la asigancion de la cuenta");

                entity.Property(e => e.DesgloseFormaPagoId).HasComment("Indica el desglose utilizado para esta forma de pago");

                entity.Property(e => e.Detalle).HasComment("Permite especificar un detalle adicional en la Forma de Pago");

                entity.Property(e => e.EsDebe).HasComment("Indica q es un importe Deudor");

                entity.Property(e => e.Filer).HasComment("Campo utilizado para modulos de exportacion e importacion y sincronizacion con otros sistemas que permite relacionar  el registro de origen y destino");

                entity.Property(e => e.FormaPagoId).HasComment("Identifica la Forma de Pago seleccionada (ver OperacionFormaPago)");

                entity.Property(e => e.Importe).HasComment("Importe de esta Forma de Pago");

                entity.Property(e => e.MonedaId).HasComment("Tipo Moneda en la que se realizo la operacion");

                entity.Property(e => e.PagoTipoRegistroId).HasComment("Se optiene de AlmaNET PagoRegistroTipo (Especifica la reistracion a realizar segun Forma Pago)Contado, Cuenta Corriente, Banco, Adelanto,Cheque Tercero, Credito Etc.");

                entity.Property(e => e.RegistroOperacionId).HasComment("El Nro de Venta, Compra, Pago, Cobro que Genero el detalle");

                entity.Property(e => e.TipoOperacionId).HasComment("De AlmaNet.OperacionTipo - Indica si se trata de una Venta, Compra, Pago, Cobro");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionDetallePago_PlanDeCuenta");

                entity.HasOne(d => d.DesgloseFormaPago)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => d.DesgloseFormaPagoId)
                    .HasConstraintName("FK_OperacionDetallePago_OperacionFormaPagoDesgloce");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => d.FormaPagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionDetallePago_OperacionFormaPago");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionCompra");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionPago");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionDetallePago)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionDetallePago_OperacionVenta");
            });

            modelBuilder.Entity<OperacionEntrega>(entity =>
            {
                entity.HasComment("Permite realizar el seguimiento de la entrega de una Operacion Venta/Compra e indicar el cumplidao de la mismas");

                entity.Property(e => e.TransporteId).HasComment("Transporte q Entrego la Venta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionEntrega)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionEntrega_OperacionVenta");
            });

            modelBuilder.Entity<OperacionFormaPago>(entity =>
            {
                entity.HasKey(e => e.FormaPagoId)
                    .HasName("PK_OperacionPago");

                entity.Property(e => e.FormaPagoId)
                    .ValueGeneratedNever()
                    .HasComment("ID con el que se registra esta Forma de Pago");

                entity.Property(e => e.BancoTarjetaId).HasComment("Cuenta de Banco o Tarjeta");

                entity.Property(e => e.CuentaId).HasComment("Cuenta Contable Vinculada");

                entity.Property(e => e.Inhabilitado).HasComment("Indica q la forma de pago no aparecera en la opciones de pagos de la opercion a la que corresponda");

                entity.Property(e => e.MonedaId).HasComment("De MonedaTipo");

                entity.Property(e => e.PagoTipoRegistroId).HasComment("Se optiene de AlmaNET PagoRegistroTipo (Especifica la reistracion a realizar segun Forma Pago)Contado, Cuenta Corriente, Banco, Adelanto,Cheque Tercero, Credito Etc.");

                entity.Property(e => e.PerfilId).HasComment("Nro Perfil asignado");

                entity.Property(e => e.TipoOperacionId).HasComment("De AlmaNet.OperacionTipo - Indica si se trata de una 1-Venta,2- Compra, 3-Pago, 4-Cobro");

                entity.Property(e => e.UtilizaPuntoVenta).HasComment("Indica que esta forma de pago se utiliza tambien en los punto de venta");

                entity.HasOne(d => d.BancoTarjeta)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.BancoTarjetaId)
                    .HasConstraintName("FK_OperacionFormaPago_BancoTarjeta");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FormasPago_PlanDeCuentas");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_OperacionFormaPago_Impuesto");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_OperacionFormaPago_ProductoLista");

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.MonedaId)
                    .HasConstraintName("FK_OperacionFormaPago_MonedaTipo");

                entity.HasOne(d => d.Perfil)
                    .WithMany(p => p.OperacionFormaPago)
                    .HasForeignKey(d => d.PerfilId)
                    .HasConstraintName("FK_OperacionFormaPago_Perfil");
            });

            modelBuilder.Entity<OperacionFormaPagoDesgloce>(entity =>
            {
                entity.Property(e => e.DesgloseFormaPagoId).ValueGeneratedNever();

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.OperacionFormaPagoDesgloce)
                    .HasForeignKey(d => d.FormaPagoId)
                    .HasConstraintName("FK_OperacionFormaPagoDesgloce_OperacionFormaPagoDesgloce");
            });

            modelBuilder.Entity<OperacionFormaPagoPermiso>(entity =>
            {
                entity.Property(e => e.Registro).ValueGeneratedNever();

                entity.Property(e => e.FormaPagoId).HasComment("ID con el que se registra esta Forma de Pago");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionFormaPagoPermiso)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionFormaPagoPermiso_Usuario");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.OperacionFormaPagoPermiso)
                    .HasForeignKey(d => d.FormaPagoId)
                    .HasConstraintName("FK_OperacionFormaPagoPermiso_OperacionFormaPago");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionFormaPagoPermiso)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionFormaPagoPermiso_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionFormaPagoPermiso)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionFormaPagoPermiso_Sucursal");
            });

            modelBuilder.Entity<OperacionImpresionUsuario>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ControlImpresionOperacionUsuario");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionImpresionUsuario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControlImpresionOperacionUsuario_Usuario");
            });

            modelBuilder.Entity<OperacionImpuesto>(entity =>
            {
                entity.HasComment("Inidico si l impuesto fue modificado (Manual)");

                entity.Property(e => e.EstaModificado).HasComment("Indica si el impuesto por defecto esta modificado 0-No esta modificado 1-Esta modificado  2- Indica que no aplica el impuesto");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionImpuesto_Impuesto");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OperacionCompra");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OrdenServicio");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OperacionPago");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuesto_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionImpuesto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_ImpuestosDetalle_Ventas");
            });

            modelBuilder.Entity<OperacionImpuestoZona>(entity =>
            {
                entity.Property(e => e.RegistroImpuestoId).ValueGeneratedNever();

                entity.Property(e => e.ImpuestoId).HasComment("Se Selecciona de AlmaNET.Impuestos");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Operacion que se Imprime");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionImpuestoZona)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionImpuestoZona_Impuesto");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionImpuestoZona)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImpuestoZona_OperacionVenta");
            });

            modelBuilder.Entity<OperacionImputacion>(entity =>
            {
                entity.Property(e => e.RegistroImputacion).HasComment("Registro de Imputacion");

                entity.Property(e => e.Cantidad).HasComment("Indica la cantidad");

                entity.Property(e => e.CuentaId).HasComment("Codigo Cuenta");

                entity.Property(e => e.EsDebe).HasComment("1 Determina que el Importe es Deudor 0-Acreedor");

                entity.Property(e => e.ImpUnidad).HasComment("Indica el Precio Unitario");

                entity.Property(e => e.Importe).HasComment("Importe ");

                entity.Property(e => e.ImporteCostos).HasComment("Total Importe Impuestos");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos");

                entity.Property(e => e.ImporteTotal).HasComment("Importe + Impuestos");

                entity.Property(e => e.LeyendaCuenta).HasComment("Leyenda Adicional");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionImputacion)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionImputacion_PlanDeCuentas");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionImputacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImputacion_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionImputacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImputacion_OperacionCompra");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionImputacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImputacion_OperacionPago");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionImputacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionImputacion_OperacionVenta");
            });

            modelBuilder.Entity<OperacionImputacionCentroCosto>(entity =>
            {
                entity.Property(e => e.CentroCostoId).HasComment("Indico el Codigo Vehiculo, o de Proyecto etc.");

                entity.Property(e => e.RegistroImputacion).HasComment("Registro de Imputacion");

                entity.Property(e => e.TipoCentroCostoId).HasComment("Indica a que refiere mi centro de Costo (Viene de AlmaNET==> CentroCostoTipo)");

                entity.HasOne(d => d.CentroCosto)
                    .WithMany(p => p.OperacionImputacionCentroCosto)
                    .HasForeignKey(d => d.CentroCostoId)
                    .HasConstraintName("FK_OperacionImputacionCentroCosto_PlanDeCuentaCentroCosto");

                entity.HasOne(d => d.RegistroImputacionNavigation)
                    .WithMany(p => p.OperacionImputacionCentroCosto)
                    .HasForeignKey(d => d.RegistroImputacion)
                    .HasConstraintName("FK_OperacionImputacionCentroCosto_OperacionImputacion");
            });

            modelBuilder.Entity<OperacionImputacionDesgloseCuenta>(entity =>
            {
                entity.Property(e => e.DesglosaNivel).HasComment("Nivel de anidamiento del Desglose para la cuenta ");

                entity.Property(e => e.RegistroImputacion).HasComment("Registro de Imputacion");

                entity.HasOne(d => d.RegistroImputacionNavigation)
                    .WithMany(p => p.OperacionImputacionDesgloseCuenta)
                    .HasForeignKey(d => d.RegistroImputacion)
                    .HasConstraintName("FK_OperacionImputacionDesgloseCuenta_OperacionImputacion");
            });

            modelBuilder.Entity<OperacionImputacionImpuesto>(entity =>
            {
                entity.Property(e => e.EstaModificado).HasComment("Indica si el impuesto por defecto esta modificado 0-No esta modificado 1-Esta modificado  2- Indica que no aplica (esta el Impuesto pero no se debe aplicar)");

                entity.Property(e => e.ImportUnitario).HasComment("Indica la cantidad utilizada para el calcvulo de Impuesto ver ITC, Petrovalle");

                entity.Property(e => e.RegistroImputacion).HasComment("Registro de Imputacion");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionImputacionImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionImputacionImpuesto_Impuesto");

                entity.HasOne(d => d.RegistroImputacionNavigation)
                    .WithMany(p => p.OperacionImputacionImpuesto)
                    .HasForeignKey(d => d.RegistroImputacion)
                    .HasConstraintName("FK_OperacionImputacionImpuesto_OperacionImputacion");
            });

            modelBuilder.Entity<OperacionInterDeposito>(entity =>
            {
                entity.HasKey(e => e.InterDepositoId)
                    .HasName("PK_OperacionInterDeposito_1");

                entity.Property(e => e.InterDepositoId).HasComment("Nro. Registro Inter Deposito");

                entity.Property(e => e.DespachoId).HasComment("Nro De Despacho");

                entity.Property(e => e.Fecha).HasComment("Fecha Movimiento");

                entity.Property(e => e.RecepcionId).HasComment("Nro Recepcion");

                entity.Property(e => e.TipoOperacionIdDesp).HasComment("Tipo Operacion  par relacion a Despacho");

                entity.Property(e => e.TipoOperacionIdRecp).HasComment("TipoOperacionRelacion Recepcion");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.OperacionInterDeposito)
                    .HasForeignKey(d => new { d.TipoOperacionIdDesp, d.DespachoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInterDeposito_OperacionDespacho");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.OperacionInterDeposito)
                    .HasForeignKey(d => new { d.TipoOperacionIdRecp, d.RecepcionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInterDeposito_OperacionRecepcion");
            });

            modelBuilder.Entity<OperacionInventario>(entity =>
            {
                entity.Property(e => e.ComprobanteId).HasComment("");

                entity.Property(e => e.DepositoId).HasComment("Deposito en el que registro moviomiento");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.EstadoId).HasComment("0-Inventario Abierto 10-Inventario Cerrado (No permite Carga en tabla Adicional)");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionInventario_Usuario");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInventario_Deposito");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_OperacionInventario_EntidadSucursal");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionInventario_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionInventario_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionInventario)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionInventario_Sucursal");
            });

            modelBuilder.Entity<OperacionInventarioProducto>(entity =>
            {
                entity.Property(e => e.ItemRecepId).HasComment("Indico el item de la recepcion q se cargo para la correccion por diferencia Inventario (StockActual- Canidad)");

                entity.Property(e => e.NroItemDetalle)
                    .IsFixedLength()
                    .HasComment("indica el nro de Item del Detalle");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionInventarioProducto)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInventarioProducto_Producto");

                entity.HasOne(d => d.Inventario)
                    .WithMany(p => p.OperacionInventarioProducto)
                    .HasForeignKey(d => d.InventarioId)
                    .HasConstraintName("FK_OperacionInventarioProducto_OperacionInventario");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.OperacionInventarioProducto)
                    .HasForeignKey(d => d.ItemRecepId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionInventarioProducto_OperacionRecepcionItem");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionInventarioProducto)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInventarioProducto_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<OperacionInventarioProductoAdicional>(entity =>
            {
                entity.HasOne(d => d.Inventario)
                    .WithMany(p => p.OperacionInventarioProductoAdicional)
                    .HasForeignKey(d => d.InventarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionInventarioProductoAdicional_OperacionInventario");

                entity.HasOne(d => d.RegInventProd)
                    .WithMany(p => p.OperacionInventarioProductoAdicional)
                    .HasForeignKey(d => d.RegInventProdId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionInventarioProductoAdicional_OperacionInventarioProducto");
            });

            modelBuilder.Entity<OperacionItemProdPedidoCompraOperacionItemProdCompra>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("PK_OperacionPedidoCompraOperacionCompra");

                entity.Property(e => e.Cantidad).HasComment("Cantidad, Puede estar expresado hasta con 4 decimales");

                entity.Property(e => e.ItemIdcompra).HasComment("Item Unico");

                entity.Property(e => e.ItemIdpedido).HasComment("Item Unico");

                entity.HasOne(d => d.ItemIdcompraNavigation)
                    .WithMany(p => p.OperacionItemProdPedidoCompraOperacionItemProdCompraItemIdcompraNavigation)
                    .HasForeignKey(d => d.ItemIdcompra)
                    .HasConstraintName("FK_OperacionPedidoCompraOperacionCompra_OperacionItemProducto1");

                entity.HasOne(d => d.ItemIdpedidoNavigation)
                    .WithMany(p => p.OperacionItemProdPedidoCompraOperacionItemProdCompraItemIdpedidoNavigation)
                    .HasForeignKey(d => d.ItemIdpedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoCompraOperacionCompra_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionItemProdPedidoVentaOperacionItemProdVenta>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("PK_OperacionPedidoVentaOperacionVenta");

                entity.HasComment("En esta tabla se relaciona el item de Pedido con el Item de venta Facturado");

                entity.Property(e => e.BonificCorreccion).HasComment("Permite Indicar una correccion a realizar en la bonificacion de la nota de pedido");

                entity.Property(e => e.Cantidad).HasComment("Permite Almacenar al realizar la correccion segun Planilla de Carga cuando sedebe facturar del total del pedido");

                entity.Property(e => e.CodigoId).HasComment("Indica que se completa el pedido con otro producto");

                entity.Property(e => e.ItemIdpedido).HasComment("Item Unico");

                entity.Property(e => e.ItemIdventa).HasComment("Item Unico");

                entity.Property(e => e.PedidoCerrado).HasComment("Indica q este item esta cerrado (No se informa como pedniente de facturar)");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto con q se corrigue . Factura");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades q Contiene la presentacion al Momento de la venta  en Caso de q esta presentacion  este contenido en otra presentacion mayor");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionItemProdPedidoVentaOperacionItemProdVenta)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_OperacionItemProdPedidoVentaOperacionItemProdVenta_Producto");

                entity.HasOne(d => d.ItemIdpedidoNavigation)
                    .WithMany(p => p.OperacionItemProdPedidoVentaOperacionItemProdVentaItemIdpedidoNavigation)
                    .HasForeignKey(d => d.ItemIdpedido)
                    .HasConstraintName("FK_OperacionPedidoVentaOperacionVenta_OperacionItemProducto");

                entity.HasOne(d => d.ItemIdventaNavigation)
                    .WithMany(p => p.OperacionItemProdPedidoVentaOperacionItemProdVentaItemIdventaNavigation)
                    .HasForeignKey(d => d.ItemIdventa)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaOperacionVenta_OperacionItemProducto1");
            });

            modelBuilder.Entity<OperacionItemProductCtrlEnvase>(entity =>
            {
                entity.Property(e => e.Cantidad).HasComment("Cantidad, envases entregados puede ser menor  o Igual");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto Utilizado Como envase");

                entity.Property(e => e.IngresoDepos).HasComment("Fecha hora ingreso deposito");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionItemProductCtrlEnvase)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductCtrlEnvase_Producto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductCtrlEnvase)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductCtrlEnvase_OperacionItemProducto");

                entity.HasOne(d => d.RegInventProd)
                    .WithMany(p => p.OperacionItemProductCtrlEnvase)
                    .HasForeignKey(d => d.RegInventProdId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductCtrlEnvase_OperacionInventarioProducto");
            });

            modelBuilder.Entity<OperacionItemProducto>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_OperacionVentaItemProducto");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.Property(e => e.Bonificacion).HasComment("Bonificacion Item");

                entity.Property(e => e.Cantidad).HasComment("Cantidad, Puede estar expresado hasta con 4 decimales");

                entity.Property(e => e.CantidadPiezas).HasComment("Indica la cantidad de piezas en caso que el TipoProductoID=256 (Pieza Pesable/Metrico)");

                entity.Property(e => e.CostoUnidad).HasComment("Costo real del producto por unidad");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que no registra Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos Neto");

                entity.Property(e => e.NroItem).HasComment("Nro Item, nro del registro detalle Factura");

                entity.Property(e => e.PrecioUnidad).HasComment("Precio Unitario");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro de venta o Compra a la q pertenece");

                entity.Property(e => e.RemitoRegOperacionId).HasComment("ID Operacion que registro el Remito que se esta Facturando");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,InterDeposito,OrdenServicio,OrdenProduccion,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades q Contiene la presentacion al Momento de la venta  en Caso de q esta presentacion  este contenido en otra presentacion mayor");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProducto_Producto");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProducto_ProductoPresentacionTipo");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OperacionCompra");

                entity.HasOne(d => d.OperacionConsignacion)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OperacionConsignacion1");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OrdenServicio");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionItemProducto)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionItemProducto_OperacionVenta");
            });

            modelBuilder.Entity<OperacionItemProductoCentroCosto>(entity =>
            {
                entity.Property(e => e.CentroCostoId).HasComment("Indico el Codigo Vehiculo, o de Proyecto etc.");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.Property(e => e.TipoCentroCostoId).HasComment("Indica a que refiere mi centro de Costo (Viene de AlmaNET==> CentroCostoTipo)");

                entity.HasOne(d => d.CentroCosto)
                    .WithMany(p => p.OperacionItemProductoCentroCosto)
                    .HasForeignKey(d => d.CentroCostoId)
                    .HasConstraintName("FK_OperacionItemProductoCentroCosto_PlanDeCuentaCentroCosto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoCentroCosto)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoCentroCosto_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionItemProductoCompra>(entity =>
            {
                entity.Property(e => e.CodigoProveedor).HasComment("Es el codigo con el que me factura el Proveedor");

                entity.Property(e => e.FechaVencimiento).HasComment("Indica la Fecha Vencimiento");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoCompra)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoCompra_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionItemProductoCubierta>(entity =>
            {
                entity.HasKey(e => e.ItemConsignacionId)
                    .HasName("PK_OperacionItemProductoConsignacion");

                entity.Property(e => e.ItemConsignacionId).ValueGeneratedNever();

                entity.Property(e => e.ItemDespacho).HasComment("Despacho Consignación");

                entity.Property(e => e.ItemId).HasComment("Vincula Comprobante de Consignación");

                entity.Property(e => e.ItemRecepcion).HasComment("Recepción Vuelve Consignación");

                entity.HasOne(d => d.ItemDespachoNavigation)
                    .WithMany(p => p.OperacionItemProductoCubierta)
                    .HasForeignKey(d => d.ItemDespacho)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoConsignacion_OperacionDespachoItemDetalle");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoCubierta)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoConsignacion_OperacionItemProducto");

                entity.HasOne(d => d.ItemRecepcionNavigation)
                    .WithMany(p => p.OperacionItemProductoCubierta)
                    .HasForeignKey(d => d.ItemRecepcion)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoConsignacion_OperacionRecepcionItemDetalle");

                entity.HasOne(d => d.Registro)
                    .WithMany(p => p.OperacionItemProductoCubierta)
                    .HasForeignKey(d => d.RegistroId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoConsignacion_TransporteCubiertaMovimientoDetalle");
            });

            modelBuilder.Entity<OperacionItemProductoHotelRest>(entity =>
            {
                entity.Property(e => e.EstadoId).HasComment("0-(Nada) 1-Pedido 10-En proceso (Cocina, otros) 30-Completado 40- Entregado");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoHotelRest)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoHotelRest_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionItemProductoImpuesto>(entity =>
            {
                entity.Property(e => e.EstaModificado).HasComment("Indica si el impuesto por defecto esta modificado 0-No esta modificado 1-Esta modificado  2- Indica que no aplica el impuesto");

                entity.Property(e => e.ImportUnitario).HasComment("Indica la cantidad utilizada para el calcvulo de Impuesto ver ITC, Petrovalle");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionItemProductoImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoImpuesto_Impuesto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoImpuesto)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoImpuesto_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionItemProductoLeyenda>(entity =>
            {
                entity.HasKey(e => e.ItemLeyendaId)
                    .HasName("PK_OperacionVentaItemProductoLeyenda");

                entity.HasOne(d => d.LeyendaItem)
                    .WithMany(p => p.OperacionItemProductoLeyenda)
                    .HasForeignKey(d => d.LeyendaItemId)
                    .HasConstraintName("FK_OperacionVentaItemProductoLeyenda_OperacionVentaItemProducto");
            });

            modelBuilder.Entity<OperacionItemProductoOrdenServicio>(entity =>
            {
                entity.HasKey(e => e.RegOrdenDetSerId)
                    .HasName("PK_OrdenServicioDetalleServicio");

                entity.HasComment("Para detalles adicionales en caso de Items de la Orden q refieran a Servicios (Productos Tipo Servicios)");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.Property(e => e.OdenSerPrioridadId).HasComment("Indica la Prioridad para el Detalle de la Orden de Servicio (Alta, media, Baja, etc.)");

                entity.Property(e => e.OstecnicoId).HasComment("Tecnico q realiza las Ordenes de Servicio");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoOrdenServicio)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoOrdenServicio_OperacionItemProducto");

                entity.HasOne(d => d.OdenSerPrioridad)
                    .WithMany(p => p.OperacionItemProductoOrdenServicio)
                    .HasForeignKey(d => d.OdenSerPrioridadId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoOrdenServicio_OrdenServicioDetallePrioridad");

                entity.HasOne(d => d.Ostecnico)
                    .WithMany(p => p.OperacionItemProductoOrdenServicio)
                    .HasForeignKey(d => d.OstecnicoId)
                    .HasConstraintName("FK_OrdenServicioDetalleServicio_OrdenServicioTecnico");
            });

            modelBuilder.Entity<OperacionItemProductoPedidoCompra>(entity =>
            {
                entity.Property(e => e.RegistroId).HasComment("Campo Unico");

                entity.Property(e => e.CantidadRecibida).HasComment("Indica la cantidad que se recibio de lo que se Pidio");

                entity.Property(e => e.CodigoProveedor).HasComment("Es el codigo con el que me factura el Proveedor");

                entity.Property(e => e.DescAdicionalPedido).HasComment("Permite indicar una descripcion Adicional a este Pedido del Producto");

                entity.Property(e => e.EstadoPedidoItem).HasComment("0-Nada 10-Completado 20-Cancelado");

                entity.Property(e => e.ItemId).HasComment("ItemID de OperacionItemProducto al que esta relacionado");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoPedidoCompra)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompra_OperacionItemProducto");

                entity.HasOne(d => d.AutorizacionCompra)
                    .WithMany(p => p.OperacionItemProductoPedidoCompra)
                    .HasForeignKey(d => new { d.AutCompraId, d.TipoOperacionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompra_AutorizacionCompra");
            });

            modelBuilder.Entity<OperacionItemProductoPedidoCompraReposicion>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_Usuario");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_Producto");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_Deposito");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_ProductoPresentacionTipo");

                entity.HasOne(d => d.RegistroPedidoCompra)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.RegistroPedidoCompraId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_OperacionItemProductoPedidoCompra");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionItemProductoPedidoCompraReposicion)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionItemProductoPedidoCompraReposicion_Sucursal");
            });

            modelBuilder.Entity<OperacionItemProductoReservado>(entity =>
            {
                entity.HasComment("Utilizado para Indicar los productos reservados, para no considerarlos en el stock");

                entity.Property(e => e.ReservaId).HasComment("N° Reserva");

                entity.Property(e => e.Cantidad).HasComment("Cantidad que se deja reservada, al despacharse se tiene q despachar el total reservado, no permite Parcializacion");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.Property(e => e.DetalleReserva).HasComment("Permite indicar o explicar sobre el item Reservado");

                entity.Property(e => e.EstadoReservaId).HasComment("10-Reservado PedidoWEB, 20-Reservado Pedido, 30-Reservado Venta, 100-Entregado 250-Cancelado");

                entity.Property(e => e.ItemIdpedido).HasComment("Item pedido de venta q realizo la reserva");

                entity.Property(e => e.ItemIdventa).HasComment("Nor Item De la venta");

                entity.Property(e => e.ItemPedidoId).HasComment("Indica Pedido Web q genera la reserva");

                entity.Property(e => e.PresentacionId).HasComment("Tipo de Presentacion del Producto (Caja-Unidades- etc.)");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionItemProductoReservado)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoReservado_Producto");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionItemProductoReservado)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_OperacionItemProductoReservado_Deposito");

                entity.HasOne(d => d.ItemIdpedidoNavigation)
                    .WithMany(p => p.OperacionItemProductoReservadoItemIdpedidoNavigation)
                    .HasForeignKey(d => d.ItemIdpedido)
                    .HasConstraintName("FK_OperacionItemProductoReservado_OperacionItemProducto");

                entity.HasOne(d => d.ItemIdventaNavigation)
                    .WithMany(p => p.OperacionItemProductoReservadoItemIdventaNavigation)
                    .HasForeignKey(d => d.ItemIdventa)
                    .HasConstraintName("FK_OperacionItemProductoReservado_OperacionItemProductoDeVenta");

                entity.HasOne(d => d.ItemPedido)
                    .WithMany(p => p.OperacionItemProductoReservado)
                    .HasForeignKey(d => d.ItemPedidoId)
                    .HasConstraintName("FK_OperacionItemProductoReservado_OperacionPedidoVentaWebItem");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionItemProductoReservado)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoReservado_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<OperacionItemProductoVenta>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_OperacionItemProductoVenta_ListaPrecID");

                entity.Property(e => e.BaseImponibleComision).HasComment("Indica la base imponible para Calular la comicion de venta producto\r\nEsta Deducida la bonificacion y descuento,(consideracion ver venta OTROS)");

                entity.HasOne(d => d.ComboItem)
                    .WithMany(p => p.OperacionItemProductoVenta)
                    .HasForeignKey(d => d.ComboItemId)
                    .HasConstraintName("FK_OperacionItemProductoVenta_ProductoComboItem");

                entity.HasOne(d => d.Item)
                    .WithOne(p => p.OperacionItemProductoVenta)
                    .HasForeignKey<OperacionItemProductoVenta>(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoVenta_OperacionItemProducto");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.OperacionItemProductoVenta)
                    .HasForeignKey(d => d.ListaPrecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemProductoVenta_ProductoLista");

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.OperacionItemProductoVenta)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .HasConstraintName("FK_OperacionItemProductoVenta_ProductoOferta");
            });

            modelBuilder.Entity<OperacionItemProductoVentaBaucher>(entity =>
            {
                entity.HasKey(e => e.ItemVtaBucherId)
                    .HasName("PK_OperacionItemPorductoVentaBaucher");

                entity.HasOne(d => d.Baucher)
                    .WithMany(p => p.OperacionItemProductoVentaBaucher)
                    .HasForeignKey(d => d.BaucherId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OperacionItemPorductoVentaBaucher_OperacionVentaBaucher");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionItemProductoVentaBaucher)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemPorductoVentaBaucher_OperacionItemProducto");

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.OperacionItemProductoVentaBaucher)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionItemPorductoVentaBaucher_ProductoOferta");
            });

            modelBuilder.Entity<OperacionItemProductoVentaComisEspec>(entity =>
            {
                entity.HasOne(d => d.EntidadSucIdgestorNavigation)
                    .WithMany(p => p.OperacionItemProductoVentaComisEspec)
                    .HasForeignKey(d => d.EntidadSucIdgestor)
                    .HasConstraintName("FK_OperacionItemProductoVentaComisEspec_EntidadSucursal");

                entity.HasOne(d => d.Item)
                    .WithOne(p => p.OperacionItemProductoVentaComisEspec)
                    .HasForeignKey<OperacionItemProductoVentaComisEspec>(d => d.ItemId)
                    .HasConstraintName("FK_OperacionItemProductoVentaComisEspec_OperacionItemProducto");

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.OperacionItemProductoVentaComisEspec)
                    .HasForeignKey(d => d.SupervisorId)
                    .HasConstraintName("FK_OperacionItemProductoVentaComisEspec_Supervisor");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionItemProductoVentaComisEspecOperacionCompra)
                    .HasForeignKey(d => new { d.TipoOperacionIdliqGestor, d.CompraIdliqGestor })
                    .HasConstraintName("FK_OperacionItemProductoVentaComisEspec_OperacionCompra1");

                entity.HasOne(d => d.OperacionCompraNavigation)
                    .WithMany(p => p.OperacionItemProductoVentaComisEspecOperacionCompraNavigation)
                    .HasForeignKey(d => new { d.TipoOperacionIdliqSupervisor, d.CompraIdliqSupervisor })
                    .HasConstraintName("FK_OperacionItemProductoVentaComisEspec_OperacionCompra");
            });

            modelBuilder.Entity<OperacionItemProductoVentaOrdenServicio>(entity =>
            {
                entity.HasComment("Permite controlar como se facturo cada item de la orden de Servicio, Un item de una Orden de Servicio puede ser facturado en varias Veces");

                entity.Property(e => e.ItemIdordenServicio).HasComment("Item Unico del detalle");

                entity.Property(e => e.ItemIdventa).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.ItemIdordenServicioNavigation)
                    .WithMany(p => p.OperacionItemProductoVentaOrdenServicioItemIdordenServicioNavigation)
                    .HasForeignKey(d => d.ItemIdordenServicio)
                    .HasConstraintName("FK_OperacionItemProductoVentaOrdenServicio_OperacionItemProducto1");

                entity.HasOne(d => d.ItemIdventaNavigation)
                    .WithMany(p => p.OperacionItemProductoVentaOrdenServicioItemIdventaNavigation)
                    .HasForeignKey(d => d.ItemIdventa)
                    .HasConstraintName("FK_OperacionItemProductoVentaOrdenServicio_OperacionItemProducto");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionItemProductoVentaOrdenServicio)
                    .HasForeignKey(d => d.TerminalId)
                    .HasConstraintName("FK_OperacionItemProductoVentaOrdenServicio_SincronizacionTerminal");
            });

            modelBuilder.Entity<OperacionLeyenda>(entity =>
            {
                entity.Property(e => e.Leyenda).HasComment("Texto descriptivo de la observacion");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion a la que se ingresa la Leyenda");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Operacion a la que se le Ingresa la Leyenda");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionLeyenda)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionLeyenda_OperacionCompra");

                entity.HasOne(d => d.OperacionConsignacion)
                    .WithMany(p => p.OperacionLeyenda)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionLeyenda_OperacionConsignacion1");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionLeyenda)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionLeyenda_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionLeyenda)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionLeyenda_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionLeyenda)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionLeyenda_OperacionVenta");
            });

            modelBuilder.Entity<OperacionLiquidoProducto>(entity =>
            {
                entity.HasKey(e => e.LiquidoProductoId)
                    .HasName("PK_OperacionLiquidoProducto_1");

                entity.Property(e => e.CompraId).HasComment("Nro de Compra");

                entity.Property(e => e.FechaHora).HasComment("Fecha y hora de la Recepcion");

                entity.Property(e => e.ImporteComision).HasComment("Diferencia entre Precio de RecepcionItem y de Precio Venta (neto)");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TipoOperacionId).HasComment("110-Liquido Porducto");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionLiquidoProducto)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionLiquidoProducto_Usuario");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionLiquidoProducto)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_OperacionLiquidoProducto_Proveedor");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionLiquidoProducto)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionLiquidoProducto_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionLiquidoProducto)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionLiquidoProducto_Sucursal");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionLiquidoProducto)
                    .HasForeignKey(d => new { d.TipoOperacionIdcompra, d.CompraId })
                    .HasConstraintName("FK_OperacionLiquidoProducto_OperacionCompra");
            });

            modelBuilder.Entity<OperacionPago>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.PagoId })
                    .HasName("PK_OperacionPago_1");

                entity.Property(e => e.PagoId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionPago_Usuario");

                entity.HasOne(d => d.Pagador)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.PagadorId)
                    .HasConstraintName("FK_OperacionPago_Pagador");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_OperacionPago_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionPago_Proyecto");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.ResumenId)
                    .HasConstraintName("FK_OperacionPago_OperacionResumen");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPago_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionPago_Sucursal");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionPago)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPago_SincronizacionTerminal");
            });

            modelBuilder.Entity<OperacionPagoAutorizacion>(entity =>
            {
                entity.Property(e => e.AutorizPagoId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionPagoAutorizacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionPagoAutorizacion_Usuario");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionPagoAutorizacion)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPagoAutorizacion_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionPagoAutorizacion)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionPagoAutorizacion_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionPagoAutorizacion)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionPagoAutorizacion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionPagoAutorizacion)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPagoAutorizacion_Sucursal");
            });

            modelBuilder.Entity<OperacionPagoAutorizacionCancelacion>(entity =>
            {
                entity.HasOne(d => d.AutorizPago)
                    .WithMany(p => p.OperacionPagoAutorizacionCancelacion)
                    .HasForeignKey(d => d.AutorizPagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPagoAutorizacionCancelacion_OperacionPagoAutorizacion");

                entity.HasOne(d => d.Pago)
                    .WithMany(p => p.OperacionPagoAutorizacionCancelacion)
                    .HasPrincipalKey(p => p.PagoId)
                    .HasForeignKey(d => d.PagoId)
                    .HasConstraintName("FK_OperacionPagoAutorizacionCancelacion_OperacionPago");
            });

            modelBuilder.Entity<OperacionPedidoCompra>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.PedidoCompraId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros)");

                entity.Property(e => e.PedidoCompraId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro de Pedido Compra");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Categoria de Impuesto al q pertenece el proveedor");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante a ser  utilizado para este pediodo");

                entity.Property(e => e.DepositoId).HasComment("Indico para que deposito se Hace la Reposicion o Pedidor");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.EsPagoDetallar).HasComment("Indica si el pago es deglosado (Tiene + de 1 forma de Pago)");

                entity.Property(e => e.EstadoPedido).HasComment("0-No tiene 10- Pendiente Facturacion 20-Facturado");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha de la Factura");

                entity.Property(e => e.FechaEntrega).HasComment("Fecha Vencimiento o de Pago de la Factura de Comp[ra");

                entity.Property(e => e.FechaImputacion).HasComment("Fecha Imputacion Contable");

                entity.Property(e => e.Filer).HasComment("Utilizado para almacenar Informacion de Sincronizacion");

                entity.Property(e => e.Frt).HasComment("Indica si se trata de Factura, Remito,Ticket");

                entity.Property(e => e.GeneraAsiento).HasComment("Indica si Generaq Asiento");

                entity.Property(e => e.ImpBonificacion).HasComment("Importe total de bonificaciones realizadas en los distintos itemes de esta  Compra");

                entity.Property(e => e.ImporteDescuento).HasComment("Total Desuento Realizado");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos Suma de la Tabla OperacionImpuesto");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que NO  esta sugeto a Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de talonario");

                entity.Property(e => e.PedirDepositoId).HasComment("Indico a que Deposito voy a Realizar el Pedido (esto resulta util para el caso de reposicion, para un depsoito ver el stock q tiene el depsoito al que se va a Pedir)");

                entity.Property(e => e.ProveedorId).HasComment("Codigo Proveedor");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento esta Compra");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo la compra");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoDetalle).HasComment("Tipo Detalle que se viusliza por defecto en esta Compra");

                entity.Property(e => e.TotalPedidoCompra).HasComment("Importe Total PEDIDO Compra");

                entity.Property(e => e.TransporteId).HasComment("Transporte en que se eviara la compra");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionPedidoCompra_Usuario");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionPedidoCompraDeposito)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoCompra_Deposito");

                entity.HasOne(d => d.PedirDeposito)
                    .WithMany(p => p.OperacionPedidoCompraPedirDeposito)
                    .HasForeignKey(d => d.PedirDepositoId)
                    .HasConstraintName("FK_OperacionPedidoCompra_Deposito1");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_OperacionPedidoCompra_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionPedidoCompra_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoCompra_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionPedidoCompra_Sucursal");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.OperacionPedidoCompra)
                    .HasForeignKey(d => d.TransporteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoCompra_Transporte");
            });

            modelBuilder.Entity<OperacionPedidoCompraDespachoItem>(entity =>
            {
                entity.Property(e => e.ItemDespchId).HasComment("Campo unico que indica el Item de un despacho");

                entity.HasOne(d => d.ItemDespch)
                    .WithMany(p => p.OperacionPedidoCompraDespachoItem)
                    .HasForeignKey(d => d.ItemDespchId)
                    .HasConstraintName("FK_OperacionPedidoCompraDespachoItem_OperacionDespachoItem");

                entity.HasOne(d => d.ItemPedido)
                    .WithMany(p => p.OperacionPedidoCompraDespachoItem)
                    .HasForeignKey(d => d.ItemPedidoId)
                    .HasConstraintName("FK_OperacionPedidoCompraDespachoItem_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionPedidoCompraRecepcionItem>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_OperacionRecepcionItemConcil");

                entity.HasComment("Permite indicar  a que item de Pedido de Compra Corresponde la Recepcion");

                entity.Property(e => e.Cantidad).HasComment("ESTA MAL (No utilizar)");

                entity.HasOne(d => d.ItemPedido)
                    .WithMany(p => p.OperacionPedidoCompraRecepcionItem)
                    .HasForeignKey(d => d.ItemPedidoId)
                    .HasConstraintName("FK_OperacionPedidoCompraRecepcionItem_OperacionItemProducto");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.OperacionPedidoCompraRecepcionItem)
                    .HasForeignKey(d => d.ItemRecepId)
                    .HasConstraintName("FK_OperacionPedidoCompraRecepcionItem_OperacionRecepcionItem");
            });

            modelBuilder.Entity<OperacionPedidoVenta>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.PedidoVentaId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece ( 10-Indica pedido Venta)");

                entity.Property(e => e.PedidoVentaId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Imputacion del Pedido");

                entity.Property(e => e.AlmaUserId).HasComment("Usuario que registra el alta");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Categoria de impuesto al que pertenece la entidad a la que realiza el pedido");

                entity.Property(e => e.ClienteId).HasComment("Nro Cliente");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante a ser  utilizado para este pediodo");

                entity.Property(e => e.DepositoId).HasComment("Indica el Deposito que esta realizando el Pedido");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.EsPagoDetallar).HasComment("Indica si el pago es deglosado (Tiene + de 1 forma de Pago)");

                entity.Property(e => e.EstadoPedido).HasComment("0-No tiene 10- Pendiente Facturacion 20-Facturado");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha en que se realizo el Pedido");

                entity.Property(e => e.FechaEntrega).HasComment("Fecha en que se realizo el Pedido");

                entity.Property(e => e.FechaHoraReproceso).HasComment("Indica el momento en q se realizo la reprocesacion de las notas de Pedidos generadas desde Android");

                entity.Property(e => e.Filer).HasComment("Utilizado para almacenar Informacion de Sincronizacion");

                entity.Property(e => e.Frt).HasComment("Indica si se trata de Factura, Remito,Ticket");

                entity.Property(e => e.ImpBonificacion).HasComment("Importe total de bonificaciones realizadas en los distintos itemes de esta venta");

                entity.Property(e => e.ImporteDescuento).HasComment("Total Desuento Realizado");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos Suma de la Tabla OperacionImpuesto");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que NO  esta sugeto a Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos");

                entity.Property(e => e.Latitud).HasComment("Codenada Ubicacuion Geografica (para determinar si el vendedor esta posicionado en el cleiten al realizar el Pedido)");

                entity.Property(e => e.ListaPrecIddefault).HasComment("Indica la lista de precio a utilizar para los items q se cargan");

                entity.Property(e => e.Longitud).HasComment("Codenada Ubicacuion Geografica (para determinar si el vendedor esta posicionado en el cleiten al realizar el Pedido)");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.RegistracionTipo).HasComment("10-Pedido 20-Presupuesto 30-Facturacion Directa (Se toma como pedido, pero pasa a Facturacion directamente, caso de venta aguas, sodas etc)");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento el Pedido");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo el Pedido");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TotalPedidoVenta).HasComment("((ImporteRegistraImpuesto+ImporteNoRegistraImpuesto)-ImporteDescuento)+ImporteImpuestos+");

                entity.Property(e => e.TransporteId).HasComment("Transporte en se se Predice saldra el Pedido");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoVenta_Cliente");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Deposito");

                entity.HasOne(d => d.ListaPrecIddefaultNavigation)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.ListaPrecIddefault)
                    .HasConstraintName("FK_OperacionPedidoVenta_ProductoLista");

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.MonedaId)
                    .HasConstraintName("FK_OperacionPedidoVenta_MonedaTipo");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Proyecto");

                entity.HasOne(d => d.RegistroTalonario)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.RegistroTalonarioId)
                    .HasConstraintName("FK_OperacionPedidoVenta_OperacionTalonarioNumeracion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Sucursal1");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.OperacionPedidoVenta)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_OperacionPedidoVenta_Transporte");
            });

            modelBuilder.Entity<OperacionPedidoVentaHotelRest>(entity =>
            {
                entity.HasKey(e => e.RegistroAtencId)
                    .HasName("PK_OperacionPedidoVentaResaturant");

                entity.Property(e => e.EstadoId).HasComment("0-Disponible (Blanco) 10-Abierta(Vede) 20-Posse Pedido Pendiente(Naranja), 30-Solicito Cierre(Negro) 50-Reservado (Amarillo)");

                entity.Property(e => e.ItemServId).HasComment("Indica la Mesa u Habitacion a la q va el cargo");

                entity.Property(e => e.PedidoVentaId).HasComment("Nro Imputacion del Pedido");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece ( 10-Indica pedido Venta)");

                entity.HasOne(d => d.Cierre)
                    .WithMany(p => p.OperacionPedidoVentaHotelRest)
                    .HasForeignKey(d => d.CierreId)
                    .HasConstraintName("FK_OperacionPedidoVentaResaturant_HotelRestaurantTurno");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.OperacionPedidoVentaHotelRest)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaResaturant_OperacionPedidoVentaHotelRestEstado");

                entity.HasOne(d => d.ItemServ)
                    .WithMany(p => p.OperacionPedidoVentaHotelRest)
                    .HasForeignKey(d => d.ItemServId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaHotelRest_ProductoHotelRest");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionPedidoVentaHotelRest)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.PedidoVentaId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaResaturant_OperacionPedidoVenta");
            });

            modelBuilder.Entity<OperacionPedidoVentaHotelRestEstado>(entity =>
            {
                entity.Property(e => e.EstadoId)
                    .ValueGeneratedNever()
                    .HasComment("0-Disponible (Blanco) 10-Abierta(Vede) 20-Posse Pedido Pendiente(Naranja), 30-Solicito Cierre(Negro) 50-Reservado (Amarillo)");

                entity.Property(e => e.TipoServId).HasComment("1- RestaurantMesa 10-HotelHabitacion (Tiene como finalidad determinar si pertenece al Hotel o al Restaurant)");
            });

            modelBuilder.Entity<OperacionPedidoVentaWeb>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Cliente");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.FormaPagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_OperacionFormaPago");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_ProductoLista");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Sucursal");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.TransporteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Transporte");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.OperacionPedidoVentaWeb)
                    .HasForeignKey(d => d.VendedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWeb_Vendedor");
            });

            modelBuilder.Entity<OperacionPedidoVentaWebItem>(entity =>
            {
                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_Producto");

                entity.HasOne(d => d.ComboItem)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.ComboItemId)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_ProductoComboItem");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_ProductoLista");

                entity.HasOne(d => d.Pedido)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.PedidoId)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_OperacionPedidoVentaWeb");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_ProductoPresentacionTipo");

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.OperacionPedidoVentaWebItem)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .HasConstraintName("FK_OperacionPedidoVentaWebItem_ProductoOferta");
            });

            modelBuilder.Entity<OperacionRecepcion>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.RecepcionId });

                entity.HasComment("Autorizacion de ingreso a Depsoito");

                entity.Property(e => e.TipoOperacionId).HasComment("21-Recepcion");

                entity.Property(e => e.RecepcionId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Recepcion");

                entity.Property(e => e.AlmaMobileId).HasComment("DispositivoID que tomo la recepcion(utilizado para identificar si fue ingresado desde AlmaMobile y de q dispositibo (Ver AlmaNET.UsuarioAlmaMobile)");

                entity.Property(e => e.ComprobanteId).HasComment("");

                entity.Property(e => e.DetalleRecepcion).HasComment("Detalle q refiere a esta Recepcion");

                entity.Property(e => e.FechaHora).HasComment("Fecha y hora de la Recepcion");

                entity.Property(e => e.Filer).HasComment("Utilizado para grabar datos para comparacion otras base de datos (Ejem.Aldema)");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionRecepcion_Usuario");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRecepcion_Deposito");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionRecepcion_Proveedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionRecepcion_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionRecepcion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionRecepcion)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionRecepcion_Sucursal");
            });

            modelBuilder.Entity<OperacionRecepcionCodigoNoHallado>(entity =>
            {
                entity.Property(e => e.CodigoId).HasComment("Codigo del Proucto se carga al realizar el Registro producto");

                entity.Property(e => e.FechaVencimiento).HasComment("Indica fecha vencimiento producto");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.Property(e => e.RecepcionId).HasComment("Nro Recepcion");

                entity.Property(e => e.TipoOperacionId).HasComment("21-Recepcion");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.OperacionRecepcionCodigoNoHallado)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RecepcionId })
                    .HasConstraintName("FK_OperacionRecepcionCodigoNoHallado_OperacionRecepcion");
            });

            modelBuilder.Entity<OperacionRecepcionEstado>(entity =>
            {
                entity.Property(e => e.ItemRecepcionEstadoId).HasComment("0-Normal 10-No Posee Compra 20-Error Despacho Indica si Estdo de Proceso Item despachado");

                entity.Property(e => e.Descripcion).HasComment("Descripcion del estado del Iteme Recibido");
            });

            modelBuilder.Entity<OperacionRecepcionItem>(entity =>
            {
                entity.Property(e => e.CodigoProveedor).HasComment("Es el codigo con el que me factura el Proveedor");

                entity.Property(e => e.DetalleItemRecepcion).HasComment("Permite indicar o explicar sobre el item recibido");

                entity.Property(e => e.FechaVencimiento).HasComment("Indica fecha vencimiento producto");

                entity.Property(e => e.ImporteUnidad).HasComment("Ver liquido Producto");

                entity.Property(e => e.ItemRecepcionEstadoId).HasComment("0-Normal 10-No Posee Compra 20-Error Despacho Indica si Estdo de Proceso Item despachado");

                entity.Property(e => e.TipoItem).HasComment("Indica q es un item despacho (11)  o Repecion (21)  (utilizado para relacionar con ProductoNroSeriMovimiento");

                entity.Property(e => e.TipoOperacionId).HasComment("21-Recepcion");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.OperacionRecepcionItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRecepcionItem_Producto");

                entity.HasOne(d => d.ItemRecepcionEstado)
                    .WithMany(p => p.OperacionRecepcionItem)
                    .HasForeignKey(d => d.ItemRecepcionEstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionRecepcionItem_OperacionRecepcionEstado");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.OperacionRecepcionItem)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRecepcionItem_ProductoPresentacionTipo");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.OperacionRecepcionItem)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RecepcionId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OperacionRecepcionItem_OperacionRecepcion");
            });

            modelBuilder.Entity<OperacionRecepcionItemDetalle>(entity =>
            {
                entity.HasComment("Permite inidcar cada item de recepcion a que item de compra queda vinculado es para determinar que recepcion con q compra y al reves");

                entity.Property(e => e.CantidadRecibidaTotal).HasComment("Cantidad que se reciben");

                entity.Property(e => e.DevolucionItemRecepId).HasComment("Indica q se trata sobre una debulucion de una recepcion anterior y se indica sobre cual");

                entity.Property(e => e.PresentacionId).HasComment("Tipo Presentacion Producto");

                entity.Property(e => e.RegItemId).HasComment("Indica el item de Compra al que corresponde");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades q Contiene la presentacion en el momento de realizar la opercion");

                entity.HasOne(d => d.DevolucionItemRecep)
                    .WithMany(p => p.OperacionRecepcionItemDetalleDevolucionItemRecep)
                    .HasForeignKey(d => d.DevolucionItemRecepId)
                    .HasConstraintName("FK_OperacionRecepcionItemDetalle_OperacionRecepcionItem1");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.OperacionRecepcionItemDetalleItemRecep)
                    .HasForeignKey(d => d.ItemRecepId)
                    .HasConstraintName("FK_OperacionRecepcionItemDetalle_OperacionRecepcionItem");

                entity.HasOne(d => d.RegItem)
                    .WithMany(p => p.OperacionRecepcionItemDetalle)
                    .HasForeignKey(d => d.RegItemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionRecepcionItemDetalle_OperacionItemProducto");
            });

            modelBuilder.Entity<OperacionRecepcionItemProduccionProgramacionItem>(entity =>
            {
                entity.HasComment("Inica Recepcion Producto en base a OrdeProduccion\r\nCoopAndresito  COntrol Yerba mate CanchadaElaborada");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.ProgramacionItemId).HasComment("ItemID de Programacion");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.OperacionRecepcionItemProduccionProgramacionItem)
                    .HasForeignKey(d => d.ItemRecepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRecepcionItemProduccionProgramacionItem_OperacionRecepcionItem");

                entity.HasOne(d => d.ProgramacionItem)
                    .WithMany(p => p.OperacionRecepcionItemProduccionProgramacionItem)
                    .HasForeignKey(d => d.ProgramacionItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRecepcionItemProduccionProgramacionItem_ProduccionProgramacionItem");
            });

            modelBuilder.Entity<OperacionRecepcionItemVentaItem>(entity =>
            {
                entity.HasKey(e => e.RegistroLiq)
                    .HasName("PK_OperacionRecepcionItemVentaItem_1");

                entity.Property(e => e.RegistroLiq).HasComment("Operacion Liquido Producto Nro");

                entity.Property(e => e.CantidadVenta).HasComment("Cantidad, Puede estar expresado hasta con 4 decimales");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OperacionRecepcionItemVentaItem)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OperacionRecepcionItemVentaItem_OperacionItemProducto");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.OperacionRecepcionItemVentaItem)
                    .HasForeignKey(d => d.ItemRecepId)
                    .HasConstraintName("FK_OperacionRecepcionItemVentaItem_OperacionRecepcionItem");

                entity.HasOne(d => d.LiquidoProducto)
                    .WithMany(p => p.OperacionRecepcionItemVentaItem)
                    .HasForeignKey(d => d.LiquidoProductoId)
                    .HasConstraintName("FK_OperacionRecepcionItemVentaItem_OperacionLiquidoProducto1");
            });

            modelBuilder.Entity<OperacionRegistroUsoComprobantes>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("PK_OperacionRegistroUsoComprobantes_1");

                entity.HasComment("lleva el registro de uso de talonarios por cadaUsuario de Alma");

                entity.Property(e => e.EmpresaId).HasComment("Indico empresa en la que se utilizo el talonario");

                entity.Property(e => e.RegistroTalonarioId).HasComment("Almacena el Ultimo Comprobante y talonrio Utilizado por el Usuario");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.RegistroTalonario)
                    .WithMany(p => p.OperacionRegistroUsoComprobantes)
                    .HasForeignKey(d => d.RegistroTalonarioId)
                    .HasConstraintName("FK_OperacionRegistroUsoComprobantes_OperacionTalonarioNumeracion");
            });

            modelBuilder.Entity<OperacionRegistroUsoTalonario>(entity =>
            {
                entity.HasComment("Utilizado para asiganar los permisos de usuo para cada talonraio");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionRegistroUsoTalonario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionRegistroUsoTalonario_Usuario");

                entity.HasOne(d => d.RegistroTalonario)
                    .WithMany(p => p.OperacionRegistroUsoTalonario)
                    .HasForeignKey(d => d.RegistroTalonarioId)
                    .HasConstraintName("FK_OperacionRegistroUsoTalonario_OperacionTalonarioNumeracion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionRegistroUsoTalonario)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionRegistroUsoTalonario_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionRegistroUsoTalonario)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionRegistroUsoTalonario_Sucursal");
            });

            modelBuilder.Entity<OperacionRelacionOperacion>(entity =>
            {
                entity.HasComment("Permite indicar relaciones entre Operaciones, Ejem. Ventas, Notas de Credito , Venta Pedido, etc");

                entity.Property(e => e.Detalle).HasComment("Detalle adicional");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Operacion Principal");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionCobro)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionCompra)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionCompra");

                entity.HasOne(d => d.OperacionInventario)
                    .WithMany(p => p.OperacionRelacionOperacion)
                    .HasPrincipalKey(p => new { p.TipoOperacionId, p.InventarioId })
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionInventario");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionVenta)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionVenta");

                entity.HasOne(d => d.OperacionCobroNavigation)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionCobroNavigation)
                    .HasForeignKey(d => new { d.TipoOperacionRelacId, d.OperacionRelacId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionCobro1");

                entity.HasOne(d => d.OperacionCompraNavigation)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionCompraNavigation)
                    .HasForeignKey(d => new { d.TipoOperacionRelacId, d.OperacionRelacId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionCompra1");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.OperacionRelacionOperacion)
                    .HasForeignKey(d => new { d.TipoOperacionRelacId, d.OperacionRelacId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionRecepcion)
                    .WithMany(p => p.OperacionRelacionOperacion)
                    .HasForeignKey(d => new { d.TipoOperacionRelacId, d.OperacionRelacId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionRecepcion");

                entity.HasOne(d => d.OperacionVentaNavigation)
                    .WithMany(p => p.OperacionRelacionOperacionOperacionVentaNavigation)
                    .HasForeignKey(d => new { d.TipoOperacionRelacId, d.OperacionRelacId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRelacionOperacion_OperacionVenta1");
            });

            modelBuilder.Entity<OperacionRendicion>(entity =>
            {
                entity.Property(e => e.RendicionId).HasComment("Nro Rendicion de Caja");

                entity.Property(e => e.FiltroTalonarioId).HasComment("Filtrado por Talonario");

                entity.Property(e => e.FiltroVendedorId).HasComment("Filtra por Vendedor/Cajero");

                entity.Property(e => e.FiltroZnro).HasComment("Filtra por NrodeTicket Z");

                entity.Property(e => e.IncluyeCobro).HasComment("Indica q a procesar se incluyen todos los cobros del mismo putno de venta");

                entity.Property(e => e.IncluyePago).HasComment("Indica que al procesar se deben buscar todos los pagos (Pases)del mismo punto de venta");

                entity.Property(e => e.PagoId).HasComment("Nro Pago en el que se realizo el pase");

                entity.Property(e => e.RendicionEstadoId).HasComment("0-Resumen Cerrado no permite edicion 1-Esta en Proceso (permite editar Operaciones Relacionadas)  100 null-No Vinculante");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicion_Usuario");

                entity.HasOne(d => d.FiltroVendedor)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => d.FiltroVendedorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionRendicion_Vendedor");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionRendicion_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionRendicion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionRendicion_Sucursal");

                entity.HasOne(d => d.Pago)
                    .WithMany(p => p.OperacionRendicion)
                    .HasForeignKey(d => new { d.PagoTipoOperacionId, d.PagoId })
                    .HasConstraintName("FK_OperacionRendicion_OperacionPago1");
            });

            modelBuilder.Entity<OperacionRendicionBilletes>(entity =>
            {
                entity.Property(e => e.RendicionId).HasComment("Nro Reparto Planilla de Carga");

                entity.HasOne(d => d.Desglose)
                    .WithMany(p => p.OperacionRendicionBilletes)
                    .HasForeignKey(d => d.DesgloseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionBilletes_BilletesDesglose");

                entity.HasOne(d => d.Rendicion)
                    .WithMany(p => p.OperacionRendicionBilletes)
                    .HasForeignKey(d => d.RendicionId)
                    .HasConstraintName("FK_OperacionRendicionBilletes_OperacionRendicion");
            });

            modelBuilder.Entity<OperacionRendicionDetalle>(entity =>
            {
                entity.Property(e => e.RegistroOperacionId).HasComment("El Nro de Venta, Compra, Pago, Cobro que Genero el detalle");

                entity.Property(e => e.RendicionId).HasComment("Nro Reparto Planilla de Carga");

                entity.Property(e => e.TipoOperacionId).HasComment("De AlmaNet.OperacionTipo - Indica si se trata de una Venta, Compra, Pago, Cobro");

                entity.HasOne(d => d.Rendicion)
                    .WithMany(p => p.OperacionRendicionDetalle)
                    .HasForeignKey(d => d.RendicionId)
                    .HasConstraintName("FK_OperacionRendicionDetalle_OperacionRendicion");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionRendicionDetalle)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionDetalle_OperacionCobro");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionRendicionDetalle)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionDetalle_OperacionPago");

                entity.HasOne(d => d.OperacionValeContra)
                    .WithMany(p => p.OperacionRendicionDetalle)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionDetalle_OperacionValeContra");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionRendicionDetalle)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionDetalle_OperacionVenta");
            });

            modelBuilder.Entity<OperacionRendicionPase>(entity =>
            {
                entity.Property(e => e.OperRendPaseId).ValueGeneratedNever();

                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.CuentaIdajuste).HasComment("Indico cuenta Ajuste (no aplica asiento sobre CuentaID)");

                entity.Property(e => e.CuentaIdpase).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.MonedaId).HasComment("De MonedaTipo");

                entity.Property(e => e.PagoTipoRegistroId).HasComment("Se optiene de AlmaNET PagoRegistroTipo (Especifica la reistracion a realizar segun Forma Pago)Contado, Cuenta Corriente, Banco, Adelanto,Cheque Tercero, Credito Etc.");

                entity.Property(e => e.RendicionId).HasComment("Nro Reparto Planilla de Carga");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionRendicionPaseCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_OperacionRendicionPase_PlanDeCuenta");

                entity.HasOne(d => d.CuentaIdajusteNavigation)
                    .WithMany(p => p.OperacionRendicionPaseCuentaIdajusteNavigation)
                    .HasForeignKey(d => d.CuentaIdajuste)
                    .HasConstraintName("FK_OperacionRendicionPase_PlanDeCuenta2");

                entity.HasOne(d => d.CuentaIdpaseNavigation)
                    .WithMany(p => p.OperacionRendicionPaseCuentaIdpaseNavigation)
                    .HasForeignKey(d => d.CuentaIdpase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionPase_PlanDeCuenta1");

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.OperacionRendicionPase)
                    .HasForeignKey(d => d.MonedaId)
                    .HasConstraintName("FK_OperacionRendicionPase_MonedaTipo");

                entity.HasOne(d => d.Rendicion)
                    .WithMany(p => p.OperacionRendicionPase)
                    .HasForeignKey(d => d.RendicionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionRendicionPase_OperacionRendicion");
            });

            modelBuilder.Entity<OperacionResumen>(entity =>
            {
                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones");

                entity.Property(e => e.Fecha).HasComment("Fecha realizacion Resumen");

                entity.Property(e => e.ResumenEstadoId).HasComment("0-Resumen Cerrado no permite edicion Comprobantes y Libro Diario Relacionados 1-Esta en Proceso (permite editar Operaciones Relacionadas, y libro Diario)  10- Esta en Proceso, solo permite edicion Libro Diario 20- Esta en Proceso solo permite edicion Operaciones 100-No Vinculante");

                entity.Property(e => e.ResumenIdanterior).HasComment("Indica el Resumen del que tiene q arrastrar el saldo");

                entity.Property(e => e.SaldoInicial).HasComment("NO UTILIZAR (incluido por compatibilidad sistema CAJA ETCE)");

                entity.Property(e => e.SectorId).HasComment("Indico desde q Sector");

                entity.Property(e => e.SucursalId).HasComment("Indico q a partir de qu sucursal");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionResumen)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionResumen_Usuario");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionResumen)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionResumen_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionResumen)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionResumen_Sucursal");
            });

            modelBuilder.Entity<OperacionResumenDetalle>(entity =>
            {
                entity.HasKey(e => e.ResumenDetalleId)
                    .HasName("PK_MayorDetalle");

                entity.Property(e => e.CuentaId).HasComment("Codigo Cuenta");

                entity.Property(e => e.EsDebe).HasComment("1 Determina que el Importe es Deudor 0-Acreedor");

                entity.Property(e => e.Importe).HasComment("Importe ");

                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.OperacionResumenDetalle)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionResumenDetalle_PlanDeCuenta");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.OperacionResumenDetalle)
                    .HasForeignKey(d => d.ResumenId)
                    .HasConstraintName("FK_OperacionResumenDetalle_OperacionResumen");
            });

            modelBuilder.Entity<OperacionRetencion>(entity =>
            {
                entity.HasKey(e => e.RetencionId)
                    .HasName("PK_OperacionPagoRetencion");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante a ser  utilizado para este pediodo");

                entity.Property(e => e.EntidadSucId).HasComment("EntidadSucursal a la q pertenece");

                entity.Property(e => e.Fecha).HasComment("Fecha para informe (si es null tiene q tomar la fecha del Pago/Cobro)");

                entity.Property(e => e.ImpDesgId).HasComment("Indico sub categoria del Impuesto (Ver retenciones, ganancia, IVA)");

                entity.Property(e => e.ImporteUnidad).HasComment("Se utliza para el caso de aplicar retencion en bbase a cantidad ver C.C.G. (conv. Corresp. gremial) , retenc Yerba en liquidacion");

                entity.Property(e => e.ModifacionTipoId).HasComment("null o 0- indica que aplica calculo automatico , Otro valor calculo manual");

                entity.Property(e => e.RegistroPagoId).HasComment("Nro del registro del Pago realizado");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.OperacionRetencion)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_OperacionRetencion_EntidadSucursal");

                entity.HasOne(d => d.IdconceptoCargaNavigation)
                    .WithMany(p => p.OperacionRetencion)
                    .HasForeignKey(d => d.IdconceptoCarga)
                    .HasConstraintName("FK_OperacionRetencion_ConceptosAdicionalesCarga");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.OperacionRetencion)
                    .HasForeignKey(d => d.ImpuestoId)
                    .HasConstraintName("FK_OperacionRetencion_Impuesto");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionRetencion)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionRetencion_OperacionDetallePago");
            });

            modelBuilder.Entity<OperacionRetencionFacturas>(entity =>
            {
                entity.Property(e => e.ImporteUnidad).HasComment("Se utliza para el caso de aplicar retencion en bbase a cantidad ver C.C.G. (conv. Corresp. gremial) , retenc Yerba en liquidacion");

                entity.HasOne(d => d.Retencion)
                    .WithMany(p => p.OperacionRetencionFacturas)
                    .HasForeignKey(d => d.RetencionId)
                    .HasConstraintName("FK_OperacionRetencionFacturas_OperacionPagoRetencion");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionRetencionFacturas)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionRetencionFacturas_OperacionCompra");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionRetencionFacturas)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_OperacionRetencionFacturas_OperacionVenta");
            });

            modelBuilder.Entity<OperacionTalonarioNumeracion>(entity =>
            {
                entity.HasKey(e => e.RegistroTalonarioId)
                    .HasName("PK_OperacionVentaPuntoDeVentaComprobante");

                entity.HasComment("Permite llebar el registro del ultimo nro utilizado en cada talonario por cada comprobante y operacion, Empresa");

                entity.Property(e => e.RegistroTalonarioId).ValueGeneratedNever();

                entity.Property(e => e.CantidadPendientesMin).HasComment("Indica la cantidad minima de pendientes q tiene q tener antesdel llegar al UltimoNroAutorizado, utilizado para solicitar la impresion de nuevos talonarios");

                entity.Property(e => e.EmpresaId).HasComment("Indico empresa en la que se utilizo el talonario");

                entity.Property(e => e.ModeRporteId).HasComment("Indica el Modelo reporte a Utilizar (segun TipoOperacionID)");

                entity.Property(e => e.NombreReporteUtilizar).HasComment("Indica el nombre reporte a utilizar por defecto");

                entity.Property(e => e.ProductosSinRepresentada).HasComment("Indica que este talonario solo puede facturar productos que no corresponden a ninguna representada ");

                entity.Property(e => e.ProveedorId).HasComment("Nro Proveedor q utiliza como representada ");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.UltimoNroAutorizado).HasComment("Indica el Ultimo nro  q esta autorizado dentro de este talonario (No debe autorizar nro mayor al valor ingresado n caso q se distinto de null)");

                entity.Property(e => e.UsaFacturaElectronica).HasComment("1-Utiliza Facturacion Electronica y Autoenumera y asigna la fecha comprobante al informar a la afip 10- Utiliza Facturacion Electronica NO Autoenumera 50-Impresor Fiscal 100-Indicar q el talonario Solo permite editar sin modificar la numeracion y no utilizado para cargar nuevos registros");

                entity.HasOne(d => d.CertiAfip)
                    .WithMany(p => p.OperacionTalonarioNumeracion)
                    .HasForeignKey(d => d.CertiAfipId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionTalonarioNumeracion_EmpresaCertificadoAFIP");

                entity.HasOne(d => d.ControladorFiscal)
                    .WithMany(p => p.OperacionTalonarioNumeracion)
                    .HasForeignKey(d => d.ControladorFiscalId)
                    .HasConstraintName("FK_OperacionTalonarioNumeracion_OperacionControladorFiscal");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.OperacionTalonarioNumeracion)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_OperacionTalonarioNumeracion_Proveedor");

                entity.HasOne(d => d.RegistroEncTalon)
                    .WithMany(p => p.OperacionTalonarioNumeracion)
                    .HasForeignKey(d => d.RegistroEncTalonId)
                    .HasConstraintName("FK_OperacionTalonarioNumeracion_OperacionTalonarioEncabezado");
            });

            modelBuilder.Entity<OperacionTransporte>(entity =>
            {
                entity.Property(e => e.ComprobanteId).HasComment("75-CoRemito ,Tipo de comprobante utilizado para registro y control trasnporte");

                entity.Property(e => e.ConductorId).HasComment("Nro de Conductor/Chofer");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion a la que se ingresa la Leyenda");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoFlete).HasComment("1- Flete en Origen 10- Flete en Destino");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Operacion a la que se le Ingresa la Leyenda");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.OperacionTransporte)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_OperacionTransporte_TransporteConductor");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.OperacionTransporte)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_OperacionTransporte_TransporteVehiculo");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.OperacionTransporte)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionTransporte_OperacionCompra");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.OperacionTransporte)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionTransporte_OperacionPedidoCompra");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionTransporte)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionTransporte_OperacionVenta");
            });

            modelBuilder.Entity<OperacionVale>(entity =>
            {
                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado (Ver indica vale)");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre este Vale");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.EsDeudor).HasComment("0-Si es para Venta 1-Para Compra");

                entity.Property(e => e.EstadoId).HasComment("0-Vale No genrado 1-Generado 2-Utilizado 3-Sin Credito  10-Cancelado");

                entity.Property(e => e.FechaExpiracion).HasComment("Indica hasta Fecha se puede utilizar (null- no tiene limites)");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.Saldo).HasComment("Casmpu Calculado ImporteVale-ImporteGastado-Importe Contravale");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la operacion");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la operacion");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoEntidadId).HasComment("1-Cliente 2-Proveedor");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionVale)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionVale_Usuario");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.OperacionVale)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionVale_EntidadSucursal");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionVale)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionVale_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionVale)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionVale_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionVale)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionVale_Sucursal");
            });

            modelBuilder.Entity<OperacionValeCancelacion>(entity =>
            {
                entity.Property(e => e.Detalle).HasComment("Permite ingresar alguna referencia subre la cancelacion de esta deuda");

                entity.Property(e => e.ImportePago).HasComment("Importe que se Paga/Ingresa");

                entity.Property(e => e.RegistroOperacionId).HasComment("Nro Registro de la Operacion que Realiza la cancelacion");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.Vale)
                    .WithMany(p => p.OperacionValeCancelacion)
                    .HasForeignKey(d => d.ValeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionValeCancelacion_OperacionVale");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.OperacionValeCancelacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionValeCancelacion_OperacionCobro");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.OperacionValeCancelacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionValeCancelacion_OperacionPago");
            });

            modelBuilder.Entity<OperacionValeContra>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.ValeRegistroId });

                entity.Property(e => e.ValeRegistroId).ValueGeneratedOnAdd();

                entity.Property(e => e.Detalle).HasComment("Algun detalle sobre su utilizacion");

                entity.Property(e => e.FechaUtilizado).HasComment("Fecah en q se gasto u se genero el contravale");

                entity.Property(e => e.Filer).HasComment("Indicao PagoID Punto de Venta (Desconectado), para referencia al sincronizar con servidor Central");

                entity.Property(e => e.ImporteGasto).HasComment("Indico cuanto se utilizo para completar (Puede ser q por una regsitro detalle de pago se utilicenvarios vales y uno quede parcialmente utilizado)");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.RegistroPagoId).HasComment("ID Detalle Pago en el que se utilizo el Vale (");

                entity.Property(e => e.RendicionId).HasComment("Nro Rendicion de caja en la que quedo vinculada la generacion (es por que se genero desde un caja del mercado)");

                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones, una vez que tena asignado un nro de Resumen Operacion, esta operacion no se debera poder modificar solo en caso de que el operador posee un nivel para realizarlo");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TalonarioId).HasComment("Utilizado para poder verificar en q caja se genero el ContraVale y poder relacionarlo con la  Rendicion de Cja");

                entity.Property(e => e.TalonarioIdGasto).HasComment("Indicao en que puento de venta fue utilizado el Vale");

                entity.Property(e => e.ValeRegistroIdorigen).HasComment("0- Para el caso q corresponda al VlaeMaestro");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionValeContra_Usuario");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionValeContra_Proyecto");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionValeContra_OperacionDetallePago");

                entity.HasOne(d => d.Rendicion)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.RendicionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionValeContra_OperacionRendicion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionValeContra_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionValeContra_Sucursal");

                entity.HasOne(d => d.Vale)
                    .WithMany(p => p.OperacionValeContra)
                    .HasForeignKey(d => d.ValeId)
                    .HasConstraintName("FK_OperacionValeContra_OperacionVale");
            });

            modelBuilder.Entity<OperacionValeContraTerminal>(entity =>
            {
                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionValeContraTerminal)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionValeContraTerminal_OperacionDetallePago");
            });

            modelBuilder.Entity<OperacionVenta>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.VentaId })
                    .HasName("PK_ventas");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.VentaId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Imputacion de la Venta");

                entity.Property(e => e.CantCopiaRealizadas).HasComment("Indica la cantidad de copias que se ralizaron (Impresiopnes, Generaciones)");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Categoria de impuesto al que pertenece la entidad a la que se realizo la Venta");

                entity.Property(e => e.CierreZId).HasComment("Nro de cierre z al que pertenece el ticket");

                entity.Property(e => e.ClienteId).HasComment("Nro Cliente");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado para la venta");

                entity.Property(e => e.ComprobanteTipoId).HasComment("Indica tipo comprobante  10-Pre-impreso 20-Fiscal1    30-Electonico   40-Fiscal2");

                entity.Property(e => e.Cotizacion).HasComment("Cotizacion a la Fecha de la Moneda");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.EsPagoDetallar).HasComment("Indica si el pago es deglosado (Tiene + de 1 forma de Pago)");

                entity.Property(e => e.FechaComprobante).HasComment("Fecha en que se realizo la Venta");

                entity.Property(e => e.FechaImputacion).HasComment("Fecha imputacion COntable");

                entity.Property(e => e.FerchaStock).HasComment("Fecha en q produce el movimiento de stock");

                entity.Property(e => e.Filer).HasComment("Datos Adicionales,, utilizado como tag, para almacenar informacion de sincronizacion con otros sistemas");

                entity.Property(e => e.Frt).HasComment("Indica si se trata de Factura, Remito,Ticket  10-Factura 20-TicketFiscal  30-Remito  100-(FR-Factura sobre Remito)  (REMITO Indica que el comprobante cumpre la Funcion de  Traslado Mercaderias, no suma a la cuenta corriente)");

                entity.Property(e => e.FueImpreso).HasComment("0-No tiene Ninguna Impresion 1-Impresion Fiscal 2-Genero Factura Electronica 10-Impresion Generica");

                entity.Property(e => e.GeneraAsiento).HasComment("Indica si la operacion registra asiento contable");

                entity.Property(e => e.ImpBonificacion).HasComment("Importe total de bonificaciones realizadas en los distintos itemes de esta venta");

                entity.Property(e => e.ImporteDescuento).HasComment("Total Desuento Realizado Importe Descuento");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos IVA Rentas, Percepciones");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que no registra Impuesto Exento+ImpuestoInternos");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos netos");

                entity.Property(e => e.MonedaId).HasComment("Tipo de Moneda en que se realizo la Venta");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.ResumenId).HasComment("Nro de Resmun de Operaciones, una vez que tena asignado un nro de Resumen Operacion, esta operacion no se debera poder modificar solo en caso de que el operador posee un nivel para realizarlo");

                entity.Property(e => e.RetirarDespositoId).HasComment("Indica el desposito a Retirar la venta, * Ver tambien especificar de forma individual por Item");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TipoDetalle).HasComment("Tipo Detalle que se viusliza por defecto en esta Venta");

                entity.Property(e => e.TotalVenta).HasComment("((ImporteRegistraImpuesto+ImporteNoRegistraImpuesto)-ImporteDescuento)+ImporteImpuestos+");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OperacionVenta_Usuario");

                entity.HasOne(d => d.Caea)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.CaeaId)
                    .HasConstraintName("FK_OperacionVenta_OperacionVentaCAEA");

                entity.HasOne(d => d.CierreZ)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.CierreZId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Ventas_Cierre_z");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_OperacionVenta_Cliente");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OperacionVenta_Proyecto");

                entity.HasOne(d => d.Resumen)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.ResumenId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionVenta_OperacionResumen");

                entity.HasOne(d => d.RetirarDesposito)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.RetirarDespositoId)
                    .HasConstraintName("FK_OperacionVenta_Deposito");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionVenta_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionVenta_Sucursal");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.TerminalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionVenta_SincronizacionTerminal");

                entity.HasOne(d => d.VentaExportacion)
                    .WithMany(p => p.OperacionVenta)
                    .HasForeignKey(d => d.VentaExportacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionVenta_OperacionVentaExportacion");
            });

            modelBuilder.Entity<OperacionVentaBaucher>(entity =>
            {
                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.OperacionVentaBaucher)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OperacionVentaBaucher_ProductoOferta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.OperacionVentaBaucher)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.VentaId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionVentaBaucher_OperacionVenta");
            });

            modelBuilder.Entity<OperacionVentaBaucherCancelacion>(entity =>
            {
                entity.HasOne(d => d.Baucher)
                    .WithMany(p => p.OperacionVentaBaucherCancelacion)
                    .HasForeignKey(d => d.BaucherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperacionVentaBaucherCancelacion_OperacionVentaBaucher");

                entity.HasOne(d => d.RegistroPago)
                    .WithMany(p => p.OperacionVentaBaucherCancelacion)
                    .HasForeignKey(d => d.RegistroPagoId)
                    .HasConstraintName("FK_OperacionVentaBaucherCancelacion_OperacionDetallePago");

                entity.HasOne(d => d.Terminal)
                    .WithMany(p => p.OperacionVentaBaucherCancelacion)
                    .HasForeignKey(d => d.TerminalId)
                    .HasConstraintName("FK_OperacionVentaBaucherCancelacion_SincronizacionTerminal");
            });

            modelBuilder.Entity<OperacionVentaCaea>(entity =>
            {
                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionVentaCaea)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionVentaCAEA_Sector");
            });

            modelBuilder.Entity<OperacionVentaCierreZ>(entity =>
            {
                entity.HasKey(e => e.CierreZId)
                    .HasName("PK_Cierre_z");

                entity.Property(e => e.ExentoNotCred).HasComment("Importe de venta Exenta de Impuestos en notas de credito");

                entity.Property(e => e.ImporteNotCred).HasComment("Importe Nota de Credito");

                entity.Property(e => e.IvanotCred).HasComment("Importe IVA en las Nota de Credito");

                entity.Property(e => e.NroTransaccionAfip).HasComment("Nro de transaccion afip q se optiene al informar las ventas controlador Fiscal 2da Generacion");

                entity.Property(e => e.PercepNotCre).HasComment("Importe de las Percepciones globales realizadas en las notas de credito");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo la venta");

                entity.Property(e => e.UltimaNotCredA).HasComment("Ultimo Nr Nota de Credito A");

                entity.Property(e => e.UltimaNotCredB).HasComment("Ultimo Nr Nota de Credito B");

                entity.Property(e => e.UltimaNotDebA).HasComment("Ultimo Nr Nota de Debito A");

                entity.Property(e => e.UltimaNotDebB).HasComment("Ultimo Nr Nota de Debito B");

                entity.Property(e => e.UltimoNotCredTick).HasComment("Ultimo nota Credito TICKET");

                entity.Property(e => e.UltimoNotDebTick).HasComment("Ultimo Notata Debito Tiket");

                entity.Property(e => e.UltimoTicket).HasComment("Ultimo Ticket, lleva una numeracion distinta al Ticket/B");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OperacionVentaCierreZ)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OperacionVentaCierreZ_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OperacionVentaCierreZ)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OperacionVentaCierreZ_Sucursal");
            });

            modelBuilder.Entity<OperacionVentaExportacion>(entity =>
            {
                entity.HasOne(d => d.ValorComercialTipo)
                    .WithMany(p => p.OperacionVentaExportacion)
                    .HasForeignKey(d => d.ValorComercialTipoId)
                    .HasConstraintName("FK_OperacionVentaExportacion_TransporteCargaValorComercialTipo");
            });

            modelBuilder.Entity<OrdenServicio>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.OrdenSerId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.OrdenSerId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro ID Orden de Servicio");

                entity.Property(e => e.CategoriaImpuestoId).HasComment("Categoria de impuesto al que pertenece la entidad a la que se realizo la Venta");

                entity.Property(e => e.ClienteId).HasComment("Cliente al q se le real;iza la orden de servicio");

                entity.Property(e => e.ComprobanteId).HasComment("Tipo de comprobante utilizado para la Orden de Servicio");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.DetalleCliente).HasComment("Detalle de la Orden de Servicio segun solicitud realizada por el Cliente / Tambien util;izado para la explicacion del Inconveniente Tecnico");

                entity.Property(e => e.DetalleTecnico).HasComment("Veredicto del tecnico sobvre el trabajo realizado");

                entity.Property(e => e.FechaAlta).HasComment("Fecha Alta Oreden de Servicio");

                entity.Property(e => e.Fechaimputacion).HasComment("Fecha Alta Oreden de Servicio");

                entity.Property(e => e.ImpBonificacion).HasComment("Importe total de bonificaciones realizadas en los distintos itemes de esta Orden Servicio");

                entity.Property(e => e.ImporteDescuento).HasComment("Total Desuento Realizado");

                entity.Property(e => e.ImporteImpuestos).HasComment("Total Importe Impuestos");

                entity.Property(e => e.ImporteNoRegistraImpuesto).HasComment("Total Importes que no registra Impuesto");

                entity.Property(e => e.ImporteRegistraImpuesto).HasComment("Total Importes Sugeto a impuestos");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.OsclasifId).HasComment("Indica la Clasificascion para la Orden de Servicio");

                entity.Property(e => e.OstecnicoId).HasComment("Supervisor Técnico Orden Servicio");

                entity.Property(e => e.RegEstadoId).HasComment("ID q indica el Codigo de Estado ACTUAL de la Orden de Servicio (Presupuesto, Presupuesto Aprobado, En Proceso, Facturado, Pendiente Entrega, Entregado, Cancelado Etc.)");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Orden servicio");

                entity.Property(e => e.SubTotal).HasComment("ImporteRegistraImpuesto+ImporteNoRegistraImpuesto");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TotalOrdenServicio).HasComment("((ImporteRegistraImpuesto+ImporteNoRegistraImpuesto)-ImporteDescuento)+ImporteImpuestos+");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_OrdenServicio_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_OrdenServicio_Cliente");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_OrdenServicio_Deposito");

                entity.HasOne(d => d.Osclasif)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.OsclasifId)
                    .HasConstraintName("FK_OrdenServicio_OrdenServicioClasificacion");

                entity.HasOne(d => d.Ostecnico)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.OstecnicoId)
                    .HasConstraintName("FK_OrdenServicio_OrdenServicioTecnico");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_OrdenServicio_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_OrdenServicio_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.OrdenServicio)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_OrdenServicio_Sucursal");
            });

            modelBuilder.Entity<OrdenServicioClasificacion>(entity =>
            {
                entity.HasComment("Contiene las distintas Clasificaciones q Pueden ser asignas las Ordenes de Servicio");

                entity.Property(e => e.OsclasifId)
                    .ValueGeneratedNever()
                    .HasComment("Indica la Clasificascion para la Orden de Servicio");
            });

            modelBuilder.Entity<OrdenServicioDetalleMantenimiento>(entity =>
            {
                entity.HasComment("Visualiso por Vehiculo los mantenimientos preventivos realizados");

                entity.Property(e => e.RegistoId).ValueGeneratedNever();

                entity.Property(e => e.CantidaUtilizado).HasComment("Inidca la cantidad de Km. o x realizasos desde el servicio anterior Realizado");

                entity.Property(e => e.ItemMantenimientoId).HasComment("Indica El Codigo de Servicio q corresponde al mantenimineto");

                entity.HasOne(d => d.ItemMantenimiento)
                    .WithMany(p => p.OrdenServicioDetalleMantenimiento)
                    .HasForeignKey(d => d.ItemMantenimientoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioDetalleMantenimiento_TransporteMantenimientoDetalle");

                entity.HasOne(d => d.RegOrdenDetSer)
                    .WithMany(p => p.OrdenServicioDetalleMantenimiento)
                    .HasForeignKey(d => d.RegOrdenDetSerId)
                    .HasConstraintName("FK_OrdenServicioDetalleMantenimiento_OrdenServicioDetalleServicio");
            });

            modelBuilder.Entity<OrdenServicioDetallePrioridad>(entity =>
            {
                entity.HasKey(e => e.OdenSerPrioridadId)
                    .HasName("PK_OdenServicioDetallePrioridad");

                entity.Property(e => e.OdenSerPrioridadId).HasComment("Indica la Prioridad para el Detalle de la Orden de Servicio (Alta, media, Baja, etc.)");
            });

            modelBuilder.Entity<OrdenServicioEquipo>(entity =>
            {
                entity.Property(e => e.OrdenSerId).ValueGeneratedNever();

                entity.HasOne(d => d.Equipo)
                    .WithMany(p => p.OrdenServicioEquipo)
                    .HasForeignKey(d => d.EquipoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioEquipo_Equipo");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OrdenServicioEquipo)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.OrdenSerId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioEquipo_OrdenServicio");
            });

            modelBuilder.Entity<OrdenServicioEstado>(entity =>
            {
                entity.HasComment("Indica los distintos estado por lo q esta pasando la Orden de Servicio");

                entity.Property(e => e.RegEstadoId).ValueGeneratedNever();

                entity.Property(e => e.OrdenEstadoId).HasComment("ID q indica el Codigo de Estado de la Orden de Servicio (Presupuesto, Presupuesto Aprobado, En Proceso, Facturado, Pendiente Entrega, Entregado, Cancelado Etc.)");

                entity.Property(e => e.OrdenSerId).HasComment("Nro ID Orden de Servicio");

                entity.HasOne(d => d.OrdenEstado)
                    .WithMany(p => p.OrdenServicioEstado)
                    .HasForeignKey(d => d.OrdenEstadoId)
                    .HasConstraintName("FK_OrdenServicioEstado_OrdenServioTipoEstado");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OrdenServicioEstado)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.OrdenSerId })
                    .HasConstraintName("FK_OrdenServicioEstado_OrdenServicio");
            });

            modelBuilder.Entity<OrdenServicioHabitacion>(entity =>
            {
                entity.Property(e => e.OrdenSerId).ValueGeneratedNever();

                entity.HasOne(d => d.Habitacion)
                    .WithMany(p => p.OrdenServicioHabitacion)
                    .HasForeignKey(d => d.HabitacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioHabitacion_HotelHabitacion");

                entity.HasOne(d => d.OrdenServicio)
                    .WithMany(p => p.OrdenServicioHabitacion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.OrdenSerId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioHabitacion_OrdenServicio");
            });

            modelBuilder.Entity<OrdenServicioNroSerie>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.Cubierta)
                    .WithMany(p => p.OrdenServicioNroSerie)
                    .HasForeignKey(d => d.CubiertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdenServicioNroSerie_TransporteCubierta");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OrdenServicioNroSerie)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OrdenServicioNroSerie_OperacionItemProducto");
            });

            modelBuilder.Entity<OrdenServicioTecnico>(entity =>
            {
                entity.Property(e => e.OstecnicoId)
                    .ValueGeneratedNever()
                    .HasComment("Tecnico q realiza las Ordenes de Servicio");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.OrdenServicioTecnico)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_OrdenServicioTecnico_Empleado");
            });

            modelBuilder.Entity<OrdenServicioTransporte>(entity =>
            {
                entity.HasKey(e => e.OrdenSerId)
                    .HasName("PK_OrdenServicioTransporte_1");

                entity.Property(e => e.OrdenSerId)
                    .ValueGeneratedNever()
                    .HasComment("Nro ID Orden de Servicio");

                entity.Property(e => e.CantidadContador).HasComment("Indica el valor del Odometro del vehiculo o Equipo al momento de realizar el Servicio");

                entity.Property(e => e.ConductorId).HasComment("Conductor Q lo realizo");

                entity.Property(e => e.VehiculoId).HasComment("Vehiculo para el q se realizo");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.OrdenServicioTransporte)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_OrdenServicioTransporte_TransporteConductor");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.OrdenServicioTransporte)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_OrdenServicioTransporte_TransporteVehiculo");

                entity.HasOne(d => d.OrdenServicio)
                    .WithOne(p => p.OrdenServicioTransporte)
                    .HasForeignKey<OrdenServicioTransporte>(d => new { d.TipoOperacionId, d.OrdenSerId })
                    .HasConstraintName("FK_OrdenServicioTransporte_OrdenServicio1");
            });

            modelBuilder.Entity<OrdenServioTipoEstado>(entity =>
            {
                entity.HasComment("Contiene  l;os distintos estados en q puede estar una Orden de Servicio (ejem. Presupuesto, En Proceso, Cancelado, Facturado, Entregado, etc.)");

                entity.Property(e => e.OrdenEstadoId).HasComment("ID q indica el Codigo de Estado de la Orden de Servicio (Presupuesto, Presupuesto Aprobado, En Proceso, Facturado, Pendiente Entrega, Entregado, Cancelado Etc.)");

                entity.Property(e => e.Obligatorio).HasComment("Indica se el estado es Obligatorio antes de Pasar a Otro estado de Orden Mayor");

                entity.Property(e => e.Orden).HasComment("Orden q se debe de presentar");

                entity.Property(e => e.RequiereDespacho).HasComment("Indica si los Items (NO SERVICIOS) requieren un despacho registrado para asociar a la orden");
            });

            modelBuilder.Entity<Pagador>(entity =>
            {
                entity.Property(e => e.PagadorId)
                    .ValueGeneratedNever()
                    .HasComment("Registro de las Personas Encargadas de Pago");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Pagador)
                    .HasForeignKey<Pagador>(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadPagador_EntidadSucursal");
            });

            modelBuilder.Entity<Pallet>(entity =>
            {
                entity.Property(e => e.PalletId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.Property(e => e.PerfilId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Perfil asignado");

                entity.Property(e => e.BonificacionesCanal).HasComment("0-No controla, 1-Controla que %Bonific No superere el %maximo asignado por canal, Asiganar el % Bonificacion definido por canal, 2-Asignar por DEFECTO %bonificacion definido por canal");

                entity.Property(e => e.ListaPrecioUtil).HasComment("0-Default ,1-Obligatoria");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Permite especificar un sectro como default");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.Perfil)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_Perfil_ProductoLista");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.Perfil)
                    .HasForeignKey(d => d.ProyectoId)
                    .HasConstraintName("FK_Perfil_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Perfil)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Perfil_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Perfil)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Perfil_Sucursal");
            });

            modelBuilder.Entity<PermisoEmpresa>(entity =>
            {
                entity.Property(e => e.PermisoEmpresaId).ValueGeneratedNever();

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.PermisoEmpresa)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_PermisoEmpresa_EmpresaDatos");
            });

            modelBuilder.Entity<PermisoEmpresaNroCrtmic>(entity =>
            {
                entity.Property(e => e.Crtmicid).ValueGeneratedNever();

                entity.HasOne(d => d.PermisoEmpresa)
                    .WithMany(p => p.PermisoEmpresaNroCrtmic)
                    .HasForeignKey(d => d.PermisoEmpresaId)
                    .HasConstraintName("FK_PermisoEmpresaNroCRTMIC_PermisoEmpresa");
            });

            modelBuilder.Entity<PlanDeCuenta>(entity =>
            {
                entity.HasKey(e => e.CuentaId)
                    .HasName("PK_PlanDeCuentas");

                entity.Property(e => e.CuentaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.CentroCostoId).HasComment("Centro de Costo Principal (permite una sola cuenta por centro de costo)");

                entity.Property(e => e.CodigoAlfanumerico).HasComment("Por deffecto seria el de Familia COmpleto (la idea es mostrar por coincidencia a medida q se escribe)");

                entity.Property(e => e.Cuenta).HasComment("Numero de cuenta dentro de la cuenta totalizadora (Comienza a partir de 1 por cada cuenta Totalizadora");

                entity.Property(e => e.CuentaTotalizId).HasComment("Cuenta en la que totaliza (Pertenece)");

                entity.Property(e => e.EsImporteFijo).HasComment("Indico si es Importe Fijo");

                entity.Property(e => e.EsObligatorio).HasComment("Indica q es de aplicacion Obligatoria");

                entity.Property(e => e.GestionComprobante).HasComment("0 o null no realiza 1-Ingresa Comprobante Debes y registra Salida Haber 2-Ingresa Comprobante en Haber y registra Salida Debe");

                entity.Property(e => e.ImporteEstimado).HasComment("Importe Estimado Mensual");

                entity.Property(e => e.Inhabilitado).HasComment("Se evita la utilizacion de esta cuenta en las operaciones");

                entity.Property(e => e.Observaciones).HasComment("Referenta a como utilizar la cuenta y el por que esta.");

                entity.Property(e => e.PorcentajeTolerancia).HasComment("Se indica el Porcentaje de tolerancia Positivo o Negativo (del importe Estimado)");

                entity.HasOne(d => d.CentroCosto)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.CentroCostoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PlanDeCuenta_PlanDeCuentaCentroCosto");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuenta_PlanDeCuentaClasificacion");

                entity.HasOne(d => d.CuentaTotaliz)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.CuentaTotalizId)
                    .HasConstraintName("FK_PlanDeCuentas_PlanDeCuentasTotalizadoras");

                entity.HasOne(d => d.Moneda)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.MonedaId)
                    .HasConstraintName("FK_PlanDeCuenta_MonedaTipo");

                entity.HasOne(d => d.TablaIndice)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.TablaIndiceId)
                    .HasConstraintName("FK_PlanDeCuenta_PlanDeCuentaTablaIndice");

                entity.HasOne(d => d.TipoAjuste)
                    .WithMany(p => p.PlanDeCuenta)
                    .HasForeignKey(d => d.TipoAjusteId)
                    .HasConstraintName("FK_PlanDeCuenta_PlanDeCuentaTipoAjuste");
            });

            modelBuilder.Entity<PlanDeCuentaCentroCosto>(entity =>
            {
                entity.Property(e => e.CentroCostoId).ValueGeneratedNever();

                entity.Property(e => e.TipoCentroCostoId).HasComment("Indica a que refiere mi centro de Costo (Viene de AlmaNET==> CentroCostoTipo)");
            });

            modelBuilder.Entity<PlanDeCuentaCentroCostoCuenta>(entity =>
            {
                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.HasOne(d => d.CentroCosto)
                    .WithMany(p => p.PlanDeCuentaCentroCostoCuenta)
                    .HasForeignKey(d => d.CentroCostoId)
                    .HasConstraintName("FK_PlanDeCuentaCentroCostoCuenta_PlanDeCuentaCentroCosto");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.PlanDeCuentaCentroCostoCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaCentroCostoCuenta_PlanDeCuenta");
            });

            modelBuilder.Entity<PlanDeCuentaClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlanDeCuentaImpuesto>(entity =>
            {
                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.ImporteImpuesto).HasComment("Se considera posibilidad de especificar el importe para el caso de impuesto interno/Tasa Hidrica");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.PlanDeCuentaImpuesto)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_PlanDeCuentaImpuesto_PlanDeCuenta");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.PlanDeCuentaImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaImpuesto_Impuesto");
            });

            modelBuilder.Entity<PlanDeCuentaInventario>(entity =>
            {
                entity.Property(e => e.CodigoInventarioId).ValueGeneratedNever();

                entity.HasOne(d => d.AjusteCuenta)
                    .WithMany(p => p.PlanDeCuentaInventarioAjusteCuenta)
                    .HasForeignKey(d => d.AjusteCuentaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_PlanDeCuenta1");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_PlanDeCuentaInventario_Usuario");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.PlanDeCuentaInventarioCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_PlanDeCuenta");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_Empleado");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_Proyecto");

                entity.HasOne(d => d.SeccionInvetario)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.SeccionInvetarioId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_PlanDeCuentaInventarioSeccion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_Sucursal");

                entity.HasOne(d => d.TipoBien)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.TipoBienId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventario_PlanDeCuentaInventarioBienTipo");

                entity.HasOne(d => d.UltimoBalance)
                    .WithMany(p => p.PlanDeCuentaInventario)
                    .HasForeignKey(d => d.UltimoBalanceId)
                    .HasConstraintName("FK_PlanDeCuentaInventario_LibroDiarioBalance");
            });

            modelBuilder.Entity<PlanDeCuentaInventarioAsiento>(entity =>
            {
                entity.Property(e => e.RegInvId).ValueGeneratedNever();

                entity.HasOne(d => d.CodigoInventario)
                    .WithMany(p => p.PlanDeCuentaInventarioAsiento)
                    .HasForeignKey(d => d.CodigoInventarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventarioAsiento_PlanDeCuentaInventario");

                entity.HasOne(d => d.Diario)
                    .WithMany(p => p.PlanDeCuentaInventarioAsiento)
                    .HasForeignKey(d => d.DiarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventarioAsiento_LibroDiario");
            });

            modelBuilder.Entity<PlanDeCuentaInventarioConsignacion>(entity =>
            {
                entity.HasKey(e => e.CodigoInventarioId)
                    .HasName("PK_PlanDeCuentaInventarioConsignacion_1");

                entity.HasComment("Lleva un registro de todos los equipos q tiene la empresa en consiganacion, en algunos caso asigandos a clientes con la condicion de un objetivo de venta");

                entity.Property(e => e.CodigoInventarioId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo de Inventario del equipo en consignacion");

                entity.Property(e => e.ClienteId).HasComment("Codigo Cliente, Dode actualmente esta asignado");

                entity.Property(e => e.Detalle).HasComment("Observaciones q se tengan sobre esta consignacion");

                entity.Property(e => e.EstadoConisgnacionId).HasComment("0-Asigando 1-Disponible 10-Dado de Baja");

                entity.Property(e => e.MontoRequerido).HasComment("Indico el monto de venta q tiene q cumplir el cliente");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.PlanDeCuentaInventarioConsignacion)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_PlanDeCuentaInventarioConsignacion_Cliente");

                entity.HasOne(d => d.CodigoInventario)
                    .WithOne(p => p.PlanDeCuentaInventarioConsignacion)
                    .HasForeignKey<PlanDeCuentaInventarioConsignacion>(d => d.CodigoInventarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventarioConsignacion_PlanDeCuentaInventario");
            });

            modelBuilder.Entity<PlanDeCuentaInventarioConsignacionAsignacion>(entity =>
            {
                entity.Property(e => e.MovimtoConsignacionId).ValueGeneratedNever();

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.PlanDeCuentaInventarioConsignacionAsignacion)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanDeCuentaInventarioConsignacionAsignacion_Cliente");

                entity.HasOne(d => d.CodigoInventario)
                    .WithMany(p => p.PlanDeCuentaInventarioConsignacionAsignacion)
                    .HasForeignKey(d => d.CodigoInventarioId)
                    .HasConstraintName("FK_PlanDeCuentaInventarioConsignacionAsignacion_PlanDeCuentaInventarioConsignacion1");
            });

            modelBuilder.Entity<PlanDeCuentaInventarioSeccion>(entity =>
            {
                entity.Property(e => e.SeccionInvetarioId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlanDeCuentaProyeccion>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_PlanDeCuentaProyeccionSucursal");

                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.DetalleAplicacion).HasComment("Explicacion del alcanze");

                entity.Property(e => e.ImporteEstimado).HasComment("Importe Estimado Mensual sucursal");

                entity.Property(e => e.PorcentajeTolerancia).HasComment("Se indica el Porcentaje de tolerancia Positivo o Negativo");

                entity.Property(e => e.ProyectoId).HasComment("Codigo Proyecto");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.PlanDeCuentaProyeccion)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_PlanDeCuentaProyeccion_PlanDeCuenta");

                entity.HasOne(d => d.Proyecto)
                    .WithMany(p => p.PlanDeCuentaProyeccion)
                    .HasForeignKey(d => d.ProyectoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaProyeccion_Proyecto");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.PlanDeCuentaProyeccion)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaProyeccion_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.PlanDeCuentaProyeccion)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentaProyeccion_Sucursal");
            });

            modelBuilder.Entity<PlanDeCuentaTablaIndice>(entity =>
            {
                entity.Property(e => e.TablaIndiceId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlanDeCuentaTablaIndiceDetalle>(entity =>
            {
                entity.HasOne(d => d.TablaIndice)
                    .WithMany(p => p.PlanDeCuentaTablaIndiceDetalle)
                    .HasForeignKey(d => d.TablaIndiceId)
                    .HasConstraintName("FK_PlanDeCuentaTablaIndiceDetalle_PlanDeCuentaTablaIndice");
            });

            modelBuilder.Entity<PlanDeCuentaTipoAjuste>(entity =>
            {
                entity.Property(e => e.TipoAjusteId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlanDeCuentasTotalizadora>(entity =>
            {
                entity.HasKey(e => e.CuentaTotalizId)
                    .HasName("PK_PlanDeCuentasTotalizadoras");

                entity.Property(e => e.CuentaTotalizId)
                    .ValueGeneratedNever()
                    .HasComment("Autoincremeta");

                entity.Property(e => e.CuentaTotalizadoraHierarchy).HasComment(" Desc. corta de Orden  Ejem. 1.2.3 ");

                entity.Property(e => e.Descripcion).HasComment("Descripcion de la Cuenta Madre/Totalizadora");

                entity.Property(e => e.Orden).HasComment("ejem. 000001.000002.00003 ");

                entity.Property(e => e.TipoCuentaId).HasComment("Tipo De Cuenta (Activo -Pasivo- Reultado etc.)");

                entity.HasOne(d => d.TablaIndice)
                    .WithMany(p => p.PlanDeCuentasTotalizadora)
                    .HasForeignKey(d => d.TablaIndiceId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentasTotalizadora_PlanDeCuentaTablaIndice");

                entity.HasOne(d => d.TipoAjuste)
                    .WithMany(p => p.PlanDeCuentasTotalizadora)
                    .HasForeignKey(d => d.TipoAjusteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PlanDeCuentasTotalizadora_PlanDeCuentaTipoAjuste");

                entity.HasOne(d => d.TipoCuenta)
                    .WithMany(p => p.PlanDeCuentasTotalizadora)
                    .HasForeignKey(d => d.TipoCuentaId)
                    .HasConstraintName("FK_PlanDeCuentasTotalizadora_PlanDeCuentasTipos");
            });

            modelBuilder.Entity<PlanDeCuentasTotalizadoraTipo>(entity =>
            {
                entity.HasKey(e => e.TipoCuentaId)
                    .HasName("PK_TiposCuentasTotalizadoras");

                entity.Property(e => e.TipoCuentaId).HasComment("Codigo Tippo de Cuenta");

                entity.Property(e => e.Descripcion).HasComment("Ejem. Resultado , Resultado (+), resultado (-), Bienes Amortizables, Etc. --");

                entity.Property(e => e.EsDeudor).HasComment("Si el saldo de la Cuenta es Deudor");
            });

            modelBuilder.Entity<Produccion>(entity =>
            {
                entity.HasKey(e => e.PlanillaProduccionId)
                    .HasName("PK_ProduccionPlanilla");

                entity.HasComment("Planilla de Produccion Diaria, Indica lo producido ");

                entity.Property(e => e.PlanillaProduccionId).ValueGeneratedNever();

                entity.HasOne(d => d.Programacion)
                    .WithMany(p => p.Produccion)
                    .HasForeignKey(d => d.ProgramacionId)
                    .HasConstraintName("FK_ProduccionPlanilla_ProduccionProgramacion");
            });

            modelBuilder.Entity<ProduccionGasto>(entity =>
            {
                entity.HasComment("Me permite relacionar los gastos con un preceso especifico");

                entity.Property(e => e.CuentaId).ValueGeneratedNever();

                entity.Property(e => e.IncidenciaGastosGral).HasComment("es el resultado de (100% Gto. Produc- (%Insidencia Maquina+%incidencia Proceso+%InsidenciaProducto)");

                entity.Property(e => e.InsidenciaMaquina).HasComment("Del monto total de gastos que corresponde a Produccion q % es de gastos de Maquinas");

                entity.Property(e => e.InsidenciaProceso).HasComment("Del monto total de gastos que corresponde a Produccion q % es de gastos del Proceso");

                entity.Property(e => e.InsidenciaProduccion).HasComment("Que porcenta del total del gasto se proratea en la produccion (Existen gastos compartidos entre Producion/Comercializacion/Administracion Etc.)");

                entity.Property(e => e.InsidenciaProducto).HasComment("Del monto total de gastos que corresponde a Produccion q % es de gastos referidos a Productos especificos");

                entity.HasOne(d => d.Cuenta)
                    .WithOne(p => p.ProduccionGasto)
                    .HasForeignKey<ProduccionGasto>(d => d.CuentaId)
                    .HasConstraintName("FK_ProduccionGasto_PlanDeCuentas");
            });

            modelBuilder.Entity<ProduccionGastoMaquina>(entity =>
            {
                entity.HasComment("Permite realacionar los gastos especificos de una Maquina");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProduccionGastoMaquina)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_ProduccionGastoMaquina_ProduccionGasto");

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProduccionGastoMaquina)
                    .HasForeignKey(d => d.MaquinaId)
                    .HasConstraintName("FK_ProduccionGastoMaquina_ProduccionMaquina");
            });

            modelBuilder.Entity<ProduccionGastoProceso>(entity =>
            {
                entity.HasComment("Permite especificar los gastos sobre un proceso");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProduccionGastoProceso)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_ProduccionGastoProceso_ProduccionGasto");

                entity.HasOne(d => d.Proceso)
                    .WithMany(p => p.ProduccionGastoProceso)
                    .HasForeignKey(d => d.ProcesoId)
                    .HasConstraintName("FK_ProduccionGastoProceso_ProduccionProceso");
            });

            modelBuilder.Entity<ProduccionGastoProducto>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProduccionGastosProducto");

                entity.HasComment("Puedo determinar los Gastos correspondientes a la elaboracion de un producto en forma especifica");

                entity.Property(e => e.ProductoPresentacionId).HasComment("");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProduccionGastoProducto)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_ProduccionGastoProducto_ProduccionGasto");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProduccionGastoProducto)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionGastoProducto_ProductoPresentacion");
            });

            modelBuilder.Entity<ProduccionInsumosOperacionRecepcionItem>(entity =>
            {
                entity.Property(e => e.RegistroCtrlId).ValueGeneratedNever();

                entity.HasOne(d => d.RegReccpcion)
                    .WithMany(p => p.ProduccionInsumosOperacionRecepcionItem)
                    .HasForeignKey(d => d.RegReccpcionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionInsumosOperacionRecepcionItem_OperacionRecepcionItemDetalle");

                entity.HasOne(d => d.RegistroInsumo)
                    .WithMany(p => p.ProduccionInsumosOperacionRecepcionItem)
                    .HasForeignKey(d => d.RegistroInsumoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionInsumosOperacionRecepcionItem_ProduccionInsumosOrdenItem");
            });

            modelBuilder.Entity<ProduccionInsumosOrden>(entity =>
            {
                entity.Property(e => e.OrdenInsumoId).ValueGeneratedNever();

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProduccionInsumosOrden)
                    .HasForeignKey(d => d.MaquinaId)
                    .HasConstraintName("FK_ProduccionInsumosOrden_ProduccionMaquina");

                entity.HasOne(d => d.Operador)
                    .WithMany(p => p.ProduccionInsumosOrden)
                    .HasForeignKey(d => d.OperadorId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProduccionInsumosOrden_ProduccionOperario");

                entity.HasOne(d => d.PlanillaProduccion)
                    .WithMany(p => p.ProduccionInsumosOrden)
                    .HasForeignKey(d => d.PlanillaProduccionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionInsumosOrden_ProduccionPlanilla");
            });

            modelBuilder.Entity<ProduccionInsumosOrdenItem>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.OrdenInsumo)
                    .WithMany(p => p.ProduccionInsumosOrdenItem)
                    .HasForeignKey(d => d.OrdenInsumoId)
                    .HasConstraintName("FK_ProduccionInsumosOrdenItem_ProduccionInsumosOrden");
            });

            modelBuilder.Entity<ProduccionItem>(entity =>
            {
                entity.HasKey(e => e.PlanillaProduccionItemId)
                    .HasName("PK_ProduccionPlanillaItem");

                entity.HasComment("Detalle Items de Planilla de Produccion ");

                entity.Property(e => e.FinalFechaHora).HasComment("Indica Cuando terminan la Produccion de este Item");

                entity.Property(e => e.InicioFechaHora).HasComment("Indica Cuando Comienzan la Produccion de este Item");

                entity.HasOne(d => d.PlanillaProduccion)
                    .WithMany(p => p.ProduccionItem)
                    .HasForeignKey(d => d.PlanillaProduccionId)
                    .HasConstraintName("FK_ProduccionPlanillaItem_ProduccionPlanilla");

                entity.HasOne(d => d.ProgramacionItem)
                    .WithMany(p => p.ProduccionItem)
                    .HasForeignKey(d => d.ProgramacionItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionPlanillaItem_ProduccionProgramacionItems");
            });

            modelBuilder.Entity<ProduccionMaquina>(entity =>
            {
                entity.HasKey(e => e.MaquinaId)
                    .HasName("PK_ProduccionMaquinas");

                entity.HasComment("Las Maquinas que se Utilizan en la Produccion");

                entity.Property(e => e.MaquinaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Unico Asigando a Cada Maquina");

                entity.Property(e => e.Descripcion).HasComment("Nombre Maquina (Ver Playa)");

                entity.Property(e => e.PrincipalOperadorId).HasComment("Indica que es el Pricipal Operador de esta Maquina");
            });

            modelBuilder.Entity<ProduccionMaquinaOperario>(entity =>
            {
                entity.Property(e => e.MaquinaId).HasComment("Codigo Unico Asigando a Cadad Mquina");

                entity.Property(e => e.OperadorId).HasComment("Codigo Empleado Operador de la Maquina");

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProduccionMaquinaOperario)
                    .HasForeignKey(d => d.MaquinaId)
                    .HasConstraintName("FK_ProduccionMaquinaOperario_ProduccionMaquinas");

                entity.HasOne(d => d.Operador)
                    .WithMany(p => p.ProduccionMaquinaOperario)
                    .HasForeignKey(d => d.OperadorId)
                    .HasConstraintName("FK_ProduccionMaquinaOperario_ProduccionOperario");
            });

            modelBuilder.Entity<ProduccionOperario>(entity =>
            {
                entity.Property(e => e.OperadorId)
                    .ValueGeneratedNever()
                    .HasComment("Se reasigna el nro de empleado a un Nro de Operario (Esto evita tener que seleccionar de la tabla empleados el operador de la maquina, y permitira adicionar datos a los que sean operarios, ademas de crear una nueva numeracion correlativa)");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.ProduccionOperario)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_ProduccionOperario_EntidadEmpleado");
            });

            modelBuilder.Entity<ProduccionOrden>(entity =>
            {
                entity.HasComment("Ordenes de Produccion");

                entity.Property(e => e.EstadoOrdenId).HasComment("0-Presupuesto 1-Presup. Confirmado 2-En Produccion 3-Terminado, etc");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.ProduccionOrden)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_ProduccionOrden_Cliente");

                entity.HasOne(d => d.EstadoOrden)
                    .WithMany(p => p.ProduccionOrden)
                    .HasForeignKey(d => d.EstadoOrdenId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionOrden_ProduccionOrdenEstadoTipo");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.ProduccionOrden)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_ProduccionOrden_Vendedor");
            });

            modelBuilder.Entity<ProduccionOrdenEstadoTipo>(entity =>
            {
                entity.HasComment("Contiene los Distintos estado en que puede estar una Ordende Produccion");

                entity.Property(e => e.EstadoOrdenId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProduccionOrdenItem>(entity =>
            {
                entity.HasComment("Detalle de Productos(Elaborados) que se tienen que fabricar");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.Property(e => e.ProductoPresentacionId).HasComment("Inca el Producto Elbarorado q se va a Producir");

                entity.Property(e => e.TipoEstadoId).HasComment("0-En Espera 1-Procesando 2-Deposito 3- Vendido");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProduccionOrdenItem)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ProduccionOrdenItem_OperacionItemProducto");

                entity.HasOne(d => d.OrdenProduccion)
                    .WithMany(p => p.ProduccionOrdenItem)
                    .HasForeignKey(d => d.OrdenProduccionId)
                    .HasConstraintName("FK_ProduccionOrdenItem_ProduccionOrden");

                entity.HasOne(d => d.Prioridad)
                    .WithMany(p => p.ProduccionOrdenItem)
                    .HasForeignKey(d => d.PrioridadId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionOrdenItem_ProduccionOrdenItemTipoPrioridad");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProduccionOrdenItem)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionOrdenItem_ProductoPresentacion");

                entity.HasOne(d => d.TipoEstado)
                    .WithMany(p => p.ProduccionOrdenItem)
                    .HasForeignKey(d => d.TipoEstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionOrdenItem_ProduccionOrdenItemTipoEstado");
            });

            modelBuilder.Entity<ProduccionOrdenItemDesglose>(entity =>
            {
                entity.HasKey(e => e.ItemElaboracionId)
                    .HasName("PK_ProduccionOrdenItemElaboracion");

                entity.HasComment("Detalle de un producto elaborado que se pidio en un item de una orden de produccion, por un mismo producto Elaborado puedo contener subProductos Elaborados, esa tabla me permite desdoblar");

                entity.Property(e => e.ItemElaboracionId).HasComment("Campo Unico (evita Utilizar OrdenProduccionItemID+ElaborarCodigoID)");

                entity.Property(e => e.CantidadElaborar).HasComment("Cantidad Elaborar /Procesar");

                entity.Property(e => e.ElaborarCodigoId).HasComment("Codigo Producto a Elaborar");

                entity.Property(e => e.OrdenProduccionItemId).HasComment("Item Orden servicio sobre el que se realiza el detalle de Sub-Productos a Elaborar");

                entity.HasOne(d => d.ElaborarCodigo)
                    .WithMany(p => p.ProduccionOrdenItemDesglose)
                    .HasForeignKey(d => d.ElaborarCodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracion_ProductoPresentacion");

                entity.HasOne(d => d.OrdenProduccionItem)
                    .WithMany(p => p.ProduccionOrdenItemDesglose)
                    .HasForeignKey(d => d.OrdenProduccionItemId)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracion_ProduccionOrdenItem");
            });

            modelBuilder.Entity<ProduccionOrdenItemProceso>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProduccionOrdenItemProceso_1");

                entity.HasComment("Contiene el detalle de Procesos que sufre un Item de una Orden de Produccion");

                entity.Property(e => e.RegistroId)
                    .ValueGeneratedNever()
                    .HasComment("Campo Unico (Enumerador)");

                entity.Property(e => e.OrdenProduccionItemId).HasComment("Item de la Orden de la Orden De Produccion");

                entity.Property(e => e.PrecioProceso).HasComment("Precio (por cada Proceso para este Item de la Orden), se suma el importe de cada proceso y este es el total para");

                entity.Property(e => e.ProcesoId).HasComment("Proceso que tiene el Item");

                entity.HasOne(d => d.OrdenProduccionItem)
                    .WithMany(p => p.ProduccionOrdenItemProceso)
                    .HasForeignKey(d => d.OrdenProduccionItemId)
                    .HasConstraintName("FK_ProduccionOrdenItemProceso_ProduccionOrdenItem");

                entity.HasOne(d => d.Proceso)
                    .WithMany(p => p.ProduccionOrdenItemProceso)
                    .HasForeignKey(d => d.ProcesoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionOrdenItemProceso_ProduccionProceso");
            });

            modelBuilder.Entity<ProduccionOrdenItemProgramacion>(entity =>
            {
                entity.HasComment("Tabla con el detalle de Procesos por cada Item de Elaboracion");

                entity.Property(e => e.ProgramacionItemElaboracionId).HasComment("Campo Unico Un producto Elaborado Sufre Varios Procesos por cada Proceso Recibe un  Nro de ProgamacionItemElaboracionID");

                entity.Property(e => e.CantidadTiempo).HasComment("Tiempo Estimado para el Iteme de la Orden de Servicio en Este ProcesoID");

                entity.Property(e => e.ItemElaboracionId).HasComment("Item de la Orden de Produccion");

                entity.Property(e => e.MaquinaId).HasComment("Indicar si se asigna una maquina especifica para este Proceso");

                entity.Property(e => e.OperadorId).HasComment("Indica si tiene un operador asignado para este Proceso");

                entity.Property(e => e.ProcesoId).HasComment("Proceso a Realizar para el item de la orden de Produccion y producto especicficado)");

                entity.Property(e => e.TurnoId).HasComment("Turno que realizara el Item de la Orden de Produccion");

                entity.HasOne(d => d.ItemElaboracion)
                    .WithMany(p => p.ProduccionOrdenItemProgramacion)
                    .HasForeignKey(d => d.ItemElaboracionId)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracionProgramacion_ProduccionOrdenItemElaboracion");

                entity.HasOne(d => d.Operador)
                    .WithMany(p => p.ProduccionOrdenItemProgramacion)
                    .HasForeignKey(d => d.OperadorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracionProgramacion_ProduccionOperario");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.ProduccionOrdenItemProgramacion)
                    .HasForeignKey(d => d.TurnoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracionProgramacion_EmpleadoTurno");
            });

            modelBuilder.Entity<ProduccionOrdenItemProgramacionInsumos>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProduccionOrdenItemElaboracionProgramacionInsumos");

                entity.HasComment("Se determina la cantidad de Insumos a utilizar por cada Itemque se programa para elaborar");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CantidadStockAsignado).HasComment("Reserva la Cantidad");

                entity.Property(e => e.CantidadUtilizado).HasComment("Cantidad real a Utilizar");

                entity.Property(e => e.ProductoInsumoId).HasComment("CodigoID Producto que se utilizara como insumo para este item de Progrmacion ");

                entity.Property(e => e.ProgramacionItemElaboracionId).HasComment("Item de programacion del item Orden Servicio  (Un item de Orden Produccion Puede contener varios Items de Progrmacion)");

                entity.HasOne(d => d.ProductoInsumo)
                    .WithMany(p => p.ProduccionOrdenItemProgramacionInsumos)
                    .HasForeignKey(d => d.ProductoInsumoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracionProgramacionInsumos_ProductoPresentacion");

                entity.HasOne(d => d.ProgramacionItemElaboracion)
                    .WithMany(p => p.ProduccionOrdenItemProgramacionInsumos)
                    .HasForeignKey(d => d.ProgramacionItemElaboracionId)
                    .HasConstraintName("FK_ProduccionOrdenItemElaboracionProgramacionInsumos_ProduccionOrdenItemElaboracionProgramacion");
            });

            modelBuilder.Entity<ProduccionOrdenItemTipoEstado>(entity =>
            {
                entity.HasComment("Esta en que se encuentra una Orden de Produccion ");
            });

            modelBuilder.Entity<ProduccionProceso>(entity =>
            {
                entity.HasComment("Todos los Procesos dentro de nuestro esquema de Produccion");

                entity.Property(e => e.ProcesoId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Asignado al Proceso");

                entity.Property(e => e.Descripcion).HasComment("Nombre Proceso");

                entity.Property(e => e.PrincipalMaquinaId).HasComment("Determina cual es la Maquina Principal de ese Proceso");

                entity.HasOne(d => d.PrincipalMaquina)
                    .WithMany(p => p.ProduccionProceso)
                    .HasForeignKey(d => d.PrincipalMaquinaId)
                    .HasConstraintName("FK_ProduccionProceso_ProduccionMaquina");
            });

            modelBuilder.Entity<ProduccionProcesoMaquina>(entity =>
            {
                entity.HasComment("La maquinas que estan atados a los distintos Procesos");

                entity.Property(e => e.MaquinaId).HasComment("Codigo  Maquina Relacionada al proceso");

                entity.Property(e => e.ProcesoId).HasComment("Codigo del Proceso al que esta relacionado la Maquina");

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProduccionProcesoMaquina)
                    .HasForeignKey(d => d.MaquinaId)
                    .HasConstraintName("FK_ProduccionProcesoMaquina_ProduccionMaquina");

                entity.HasOne(d => d.Proceso)
                    .WithMany(p => p.ProduccionProcesoMaquina)
                    .HasForeignKey(d => d.ProcesoId)
                    .HasConstraintName("FK_ProduccionProcesoMaquina_ProduccionProceso");
            });

            modelBuilder.Entity<ProduccionProgramacion>(entity =>
            {
                entity.HasComment("Programa la Produccion, Permite Programar la produccion en base a las Ordenes de Produccion pendientes");
            });

            modelBuilder.Entity<ProduccionProgramacionItem>(entity =>
            {
                entity.HasKey(e => e.ProgramacionItemId)
                    .HasName("PK_ProduccionProgramacionItems");

                entity.HasComment("Detalle de los Items de Programacion ");

                entity.Property(e => e.ProgramacionItemId).HasComment("ItemID de Programacion");

                entity.Property(e => e.ProgramacionId).HasComment("Nro Planilla de Programacion");

                entity.Property(e => e.ProgramacionItemElaboracionId).HasComment("Refiere al Codigo de un Producto Elaborado en su ProcesoID (Un producto Elaborado Subre Varios Procesos por cada Proceso Recibe un  Nro de ProgamacionItemElaboracionID)");

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProduccionProgramacionItem)
                    .HasForeignKey(d => d.MaquinaId)
                    .HasConstraintName("FK_ProduccionProgramacionItems_ProduccionMaquina");

                entity.HasOne(d => d.Operador)
                    .WithMany(p => p.ProduccionProgramacionItem)
                    .HasForeignKey(d => d.OperadorId)
                    .HasConstraintName("FK_ProduccionProgramacionItems_ProduccionOperario");

                entity.HasOne(d => d.Programacion)
                    .WithMany(p => p.ProduccionProgramacionItem)
                    .HasForeignKey(d => d.ProgramacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProduccionProgramacionItems_ProduccionProgramacion");

                entity.HasOne(d => d.ProgramacionItemElaboracion)
                    .WithMany(p => p.ProduccionProgramacionItem)
                    .HasForeignKey(d => d.ProgramacionItemElaboracionId)
                    .HasConstraintName("FK_ProduccionProgramacionItems_ProduccionOrdenItemElaboracionProgramacion");

                entity.HasOne(d => d.Turno)
                    .WithMany(p => p.ProduccionProgramacionItem)
                    .HasForeignKey(d => d.TurnoId)
                    .HasConstraintName("FK_ProduccionProgramacionItems_EmpleadoTurno");
            });

            modelBuilder.Entity<ProduccionTecnico>(entity =>
            {
                entity.Property(e => e.TecnicoId)
                    .ValueGeneratedNever()
                    .HasComment("Se reasigna el nro de empleado a un Nro de Tecnico (Esto evita tener que seleccionar de la tabla empleados el Tecnico de una orden de servicio, y permitira adicionar datos a los que sean exclusivos de un tecnico, ademas de crear una nueva numeracion correlativa)");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.ProduccionTecnico)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_ProduccionTecnico_EntidadEmpleado");
            });

            modelBuilder.Entity<Producto>(entity =>
            {
                entity.HasKey(e => e.CodigoId)
                    .HasName("PK_Productos");

                entity.Property(e => e.CodigoId).ValueGeneratedNever();

                entity.Property(e => e.Caracteristica1Id).HasComment("Se utiliza para Sub-Clasificar Productos (ejem. Talle de una Prenda)");

                entity.Property(e => e.Caracteristica2Id).HasComment("Se utiliza para Sub-Clasificar Productos (ejem. Color de una Prenda)");

                entity.Property(e => e.CodigoAlfanum).HasComment("Codigo alfanumerico que se puede utilizar para facturacion producto");

                entity.Property(e => e.CodigoBaseId).HasComment("Producto Base (Clase), utilizado en tiendas, para agrupar ");

                entity.Property(e => e.DefaultPresentacionCompraId).HasComment("Presentacion por defecto en la que se realiza la compra del Producto");

                entity.Property(e => e.DefaultPresentacionVentaId).HasComment("Presentacion por defecto en la que se vende el Producto");

                entity.Property(e => e.DescripcionCorta).HasComment("Descripcion Abreviada");

                entity.Property(e => e.DescripcionLarga).HasComment("Descripcion Completa");

                entity.HasOne(d => d.Caracteristica1)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.Caracteristica1Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Producto_ProductoCaracteristica1");

                entity.HasOne(d => d.Caracteristica2)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.Caracteristica2Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Producto_ProductoCaracteristica2");

                entity.HasOne(d => d.Caracteristica3)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.Caracteristica3Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Producto_ProductoCaracteristica3");

                entity.HasOne(d => d.CodigoBase)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.CodigoBaseId)
                    .HasConstraintName("FK_Producto_ProductoBase");
            });

            modelBuilder.Entity<ProductoBase>(entity =>
            {
                entity.HasComment("Utilizado para Agrupar Productos que heredan de una Misma Estructura");

                entity.Property(e => e.CodigoBaseId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Base utilizado A partir del cual se crea el Producto");

                entity.Property(e => e.ClasificacionId).HasComment("Permite destintas agrupaciones de los Productos ejem. Inverno, Verano  o Buenos, Regulares, Malos");

                entity.Property(e => e.ControlStock).HasComment("Indica si el Producto lleva un control de Stock");

                entity.Property(e => e.CuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.CuentaIdcosto).HasComment("Cuenta Contable q reperesenta el Monto del Costo de la operacion");

                entity.Property(e => e.DescripcionCortaBase).HasComment("Descricion base para crear la descripcion larga del Producto");

                entity.Property(e => e.DescripcionLargaBase).HasComment("Descripcion Completa");

                entity.Property(e => e.DiasVencimiento).HasComment("Dias de Vencimiento , Utilizado para pesables e informar al sincronizar con la balanza");

                entity.Property(e => e.FamiliaId).HasComment("Codigo de Familia/Rubro al q pertenece el Producto");

                entity.Property(e => e.FechaAlta).HasComment("Fecha en que se dio de alta el Producto");

                entity.Property(e => e.FechaModificacion).HasComment("Indica cuando se realizaron cambios en el Producto");

                entity.Property(e => e.GarantiaDias).HasComment("Indica la cantidad de Dias de Garantia q tiene asignado el producto");

                entity.Property(e => e.IgualUtilidadPresentaciones).HasComment("Indico q si se tiene q aplicar la misma utilidad n las listas de preciso para las presentaciones (ejm Lista1 unidad y bulto xx% en ambos)");

                entity.Property(e => e.Imagen).HasComment("Imagen del Producto");

                entity.Property(e => e.Impuestos).HasComment("Indica Si el producto tiene impuestos");

                entity.Property(e => e.Inhabilitado).HasComment("Indica que el Producto esta inhabilitado");

                entity.Property(e => e.MarcaId).HasComment("Codigo de la Marca a la que Pertenece el Producto");

                entity.Property(e => e.Observacion).HasComment("Detalles tecnicos del Producto");

                entity.Property(e => e.PorcentajeUtilidad).HasComment("Indico el % de recargo a Aplicar segun UtilidadAplica al momento de actualizar el precio de venta");

                entity.Property(e => e.PresentacionId).HasComment("Indica el tipo de presentacion del Producto");

                entity.Property(e => e.ProductoTipoId).HasComment("Se optiene de AlmaNET.ProductoTipo In");

                entity.Property(e => e.ProveedorPrincipalId).HasComment("Proveedor Principal del Producto (Ojo q hay mas de un proveedor por Producto)");

                entity.Property(e => e.Receta).HasComment("Indica la receta q se informa para productos elaborados en la Balanza");

                entity.Property(e => e.RedondeaPrecioVenta).HasComment("0-No aplica 1- aplica recondeo 10ctvs, 2-aplica Redondeo 50ctvs 3-aplica redondeo de 1pso");

                entity.Property(e => e.ReferenciaWeb).HasComment("Referencia Web donde se puede optener informacion del Producto");

                entity.Property(e => e.SectorId).HasComment("Sector en el que se utiliza el producto  (para el caso q la empresa utilice sectores para diferenciar las operaciones Ejm. Sect. Mercado, Sect Perfumeria) o Sect Consumo, Sector Fabicacion ");

                entity.Property(e => e.UtilidadAplica).HasComment("0- Aplica la utilidad Asiganda en el Producto, 1-Aplica utilidad establecida en la Marca, 2- Aplica utilidad establecida en el Rubro");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoBase_ProductoClasificacion");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProductoBaseCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_ProductoBase_PlanDeCuenta");

                entity.HasOne(d => d.CuentaIdcostoNavigation)
                    .WithMany(p => p.ProductoBaseCuentaIdcostoNavigation)
                    .HasForeignKey(d => d.CuentaIdcosto)
                    .HasConstraintName("FK_ProductoBase_PlanDeCuenta1");

                entity.HasOne(d => d.CuentaIdstockNavigation)
                    .WithMany(p => p.ProductoBaseCuentaIdstockNavigation)
                    .HasForeignKey(d => d.CuentaIdstock)
                    .HasConstraintName("FK_ProductoBase_PlanDeCuenta2");

                entity.HasOne(d => d.Familia)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.FamiliaId)
                    .HasConstraintName("FK_ProductoBase_ProductoFamilia");

                entity.HasOne(d => d.Marca)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.MarcaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoBase_ProductoMarca");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.PresentacionId)
                    .HasConstraintName("FK_ProductoBase_ProductoPresentacionTipo");

                entity.HasOne(d => d.ProveedorPrincipal)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.ProveedorPrincipalId)
                    .HasConstraintName("FK_ProductoBase_Proveedor");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoBase)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoBase_Sector");
            });

            modelBuilder.Entity<ProductoBaseImagen>(entity =>
            {
                entity.Property(e => e.ExtencionArchivo).HasComment("Indica la extencion del archivo de imagen que se cargo, es utilizada para poder exportar en formato que corresponde");

                entity.Property(e => e.NroArchivo).HasComment("Para el caso que para una operacion se necesiten vincular varias imagenes estas se enumeran para facilitar su Sincronizacion");

                entity.HasOne(d => d.CodigoBase)
                    .WithMany(p => p.ProductoBaseImagen)
                    .HasForeignKey(d => d.CodigoBaseId)
                    .HasConstraintName("FK_ProductoBaseImagen_ProductoBase");
            });

            modelBuilder.Entity<ProductoCaracteristica1>(entity =>
            {
                entity.HasComment("Distintos Tipo de Talle de un Mismo Producto");

                entity.Property(e => e.Caracteristica1Id).ValueGeneratedNever();

                entity.HasOne(d => d.TipoCaracteristica)
                    .WithMany(p => p.ProductoCaracteristica1)
                    .HasForeignKey(d => d.TipoCaracteristicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCaracteristica1_ProductoCaracteristica1Tipo");
            });

            modelBuilder.Entity<ProductoCaracteristica1Tipo>(entity =>
            {
                entity.Property(e => e.TipoCaracteristicaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoCaracteristica2>(entity =>
            {
                entity.HasComment("Distintos Colores para un Mismo Producto");

                entity.Property(e => e.Caracteristica2Id).ValueGeneratedNever();

                entity.HasOne(d => d.TipoCaracteristica)
                    .WithMany(p => p.ProductoCaracteristica2)
                    .HasForeignKey(d => d.TipoCaracteristicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCaracteristica2_ProductoCaracteristica2Tipo");
            });

            modelBuilder.Entity<ProductoCaracteristica2Tipo>(entity =>
            {
                entity.Property(e => e.TipoCaracteristicaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoCaracteristica3>(entity =>
            {
                entity.Property(e => e.Caracteristica3Id).ValueGeneratedNever();

                entity.HasOne(d => d.TipoCaracteristica)
                    .WithMany(p => p.ProductoCaracteristica3)
                    .HasForeignKey(d => d.TipoCaracteristicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCaracteristica3_ProductoCaracteristica3Tipo");
            });

            modelBuilder.Entity<ProductoCaracteristica3Tipo>(entity =>
            {
                entity.Property(e => e.TipoCaracteristicaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoClasificacion>(entity =>
            {
                entity.HasKey(e => e.ClasificacionId)
                    .HasName("PK_ProductosClasificacion");

                entity.HasComment("Permite Agrupar Productos Ejem. Pesables, PLU Interno, Ofertas, Etc.");

                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoCodigoActividad>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProductosCodigoActividad");

                entity.HasComment("Referencia el Codigo Actividad (Impuesto) al que esta relacionado el producto");

                entity.Property(e => e.CodigoActividadId).HasComment("Se Obtiene de AlmaNET.ImpuestosCodigoActividad");

                entity.HasOne(d => d.CodigoBase)
                    .WithMany(p => p.ProductoCodigoActividad)
                    .HasForeignKey(d => d.CodigoBaseId)
                    .HasConstraintName("FK_ProductoCodigoActividad_ProductoBase");
            });

            modelBuilder.Entity<ProductoCodigoBarra>(entity =>
            {
                entity.HasComment("Almace todos los codigo de Barra Utilizados para la Venta de Este Producto (En ocaciones se crea un solo Producto generico y en el se ingresan todos los codigos de barra de los distintos productos relacionados) ejem.  Jugo Marca XX (utiliza los codigo de barra del Productos Jugo Marca XX Naranja,Jugo Marca XX Pomelo, Jugo Marca XX Limon, ya que todos tienen la misma caracterica y Precio) el control de Stok se realiza unicamente sobre el producto generico");

                entity.Property(e => e.RegistroCodigo).HasComment("Registro CodigoBarra (un mismo Producto se puede vender con Distintos Codigos de Barra)");

                entity.Property(e => e.CodigoBarra).HasComment("El Codigo de Barra es Unico y no se debe Repetir");

                entity.Property(e => e.TipoCodigoBarraId).HasComment("Obtengo el listado de los distintos tipos de Codigo de Barra de AlmaNET.TipoCodigoBarra");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoCodigoBarra)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .HasConstraintName("FK_ProductoCodigoBarra_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoCombo>(entity =>
            {
                entity.Property(e => e.ComboId).ValueGeneratedNever();

                entity.Property(e => e.ListaPrecId).HasComment("Indica la lista de precio a aplicar (null- No palica lista de precio, es la que tiene asiganda el cliente en la operacion de venta)");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.VisualBonifi).HasComment("Indica si al facturar se debe visualizar la bonificacion en la factura");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.ProductoCombo)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_ProductoCombo_ProductoLista");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoCombo)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoCombo_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoCombo)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoCombo_Sucursal");
            });

            modelBuilder.Entity<ProductoComboActivacion>(entity =>
            {
                entity.Property(e => e.ComboActivacionId).ValueGeneratedNever();

                entity.Property(e => e.CantidadVenta).HasComment("Indica la cantidad vendida durante el periodo");

                entity.HasOne(d => d.Combo)
                    .WithMany(p => p.ProductoComboActivacion)
                    .HasForeignKey(d => d.ComboId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboActivacion_ProductoCombo");
            });

            modelBuilder.Entity<ProductoComboItem>(entity =>
            {
                entity.Property(e => e.ComboItemId).ValueGeneratedNever();

                entity.Property(e => e.Bonificacion).HasComment("Bonificacion Item");

                entity.Property(e => e.Cantidad).HasComment("Cantidad, Puede estar expresado hasta con 4 decimales");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoComboItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboItem_Producto");

                entity.HasOne(d => d.Combo)
                    .WithMany(p => p.ProductoComboItem)
                    .HasForeignKey(d => d.ComboId)
                    .HasConstraintName("FK_ProductoComboItem_ProductoComboItem");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoComboItem)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboItem_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<ProductoComboItemOpcion>(entity =>
            {
                entity.HasKey(e => e.ComboOpcionItemId)
                    .HasName("PK_ComboItemOpcion");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoComboItemOpcion)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboItemOpcion_Producto");

                entity.HasOne(d => d.ComboItem)
                    .WithMany(p => p.ProductoComboItemOpcion)
                    .HasForeignKey(d => d.ComboItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboItemOpcion_ProductoComboItem");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoComboItemOpcion)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoComboItemOpcion_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<ProductoComisionEspecial>(entity =>
            {
                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoComisionEspecial)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoComisionEspecial_Producto");
            });

            modelBuilder.Entity<ProductoCosto>(entity =>
            {
                entity.HasKey(e => e.ProdCostoId)
                    .HasName("PK_ProductoCosto_1");

                entity.Property(e => e.ActualizaMoneda).HasComment("0 (null)- No aplica   1-Especifica Precio Actualiza MANUAL, 2- Especifica Precio Actualizacion AUTOMATICA");

                entity.Property(e => e.Cotizacion).HasComment("Cotizacion a la Fecha de la Moneda");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle de la Compra o Pedido q actualizo Costo");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.UtilizaCostoInsumo).HasComment("En caso de ser un producto es ELABORADO  indica que l precio de costo es calculado en base a los insumos,de lo contrario se aplica de forma manual utilizando  la pantallde Elaborado");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoCosto)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoCosto_Usuario");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoCosto)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoCosto_Producto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProductoCosto)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoCosto_OperacionItemProducto");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoCosto)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoCosto_Sucursal");
            });

            modelBuilder.Entity<ProductoCostoDescuento>(entity =>
            {
                entity.Property(e => e.DescuentoCompraId).HasComment("Indica el Tipo de Descuento a Aplicar (Se obtiene de AlmaNET.ProductoCostoDescuentoTipo)");

                entity.Property(e => e.OrdenPresentacion).HasComment("Orden en que se presenta en la tabla y orden para realizra el Calculo");

                entity.Property(e => e.TipoCalculo).HasComment("0-Se realiza el Descuento Sobre el Ultimo resuldado del Descuento Anterior (Si ubiere) 1-Se trata de un descuento directo sobre el Precio de Compra");

                entity.HasOne(d => d.DescuentoCompra)
                    .WithMany(p => p.ProductoCostoDescuento)
                    .HasForeignKey(d => d.DescuentoCompraId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCostoDescuento_ProductoCostoTipo");

                entity.HasOne(d => d.ProdCosto)
                    .WithMany(p => p.ProductoCostoDescuento)
                    .HasForeignKey(d => d.ProdCostoId)
                    .HasConstraintName("FK_ProductoCostoDescuento_ProductoCosto");
            });

            modelBuilder.Entity<ProductoCostoDescuentoHistorico>(entity =>
            {
                entity.Property(e => e.RegCostoDescId).ValueGeneratedOnAdd();

                entity.Property(e => e.DescuentoCompraId).HasComment("Indica el Tipo de Descuento a Aplicar (Se obtiene de AlmaNET.ProductoCostoDescuentoTipo)");

                entity.Property(e => e.OrdenPresentacion).HasComment("Orden en que se presenta en la tabla y orden para realizra el Calculo");

                entity.Property(e => e.TipoCalculo).HasComment("0-Se realiza el Descuento Sobre el Ultimo resuldado del Descuento Anterior (Si ubiere) 1-Se trata de un descuento directo sobre el Precio de Compra");

                entity.HasOne(d => d.RegCostoDesc)
                    .WithOne(p => p.ProductoCostoDescuentoHistorico)
                    .HasForeignKey<ProductoCostoDescuentoHistorico>(d => d.RegCostoDescId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCostoDescuentoHistorico_ProductoCostoHistorico");
            });

            modelBuilder.Entity<ProductoCostoHistorico>(entity =>
            {
                entity.Property(e => e.ListaPrecioNuevaId).HasComment("Indica Codigo Nueva lista Precio Aplicar");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoCostoHistorico)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoCostoHistorico_Usuario");

                entity.HasOne(d => d.ListaPrecioNueva)
                    .WithMany(p => p.ProductoCostoHistorico)
                    .HasForeignKey(d => d.ListaPrecioNuevaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoCostoHistorico_ProductoNuevaListaPrecio");

                entity.HasOne(d => d.ProdCosto)
                    .WithMany(p => p.ProductoCostoHistorico)
                    .HasForeignKey(d => d.ProdCostoId)
                    .HasConstraintName("FK_ProductoCostoHistorico_ProductoCosto");
            });

            modelBuilder.Entity<ProductoCostoRecargo>(entity =>
            {
                entity.Property(e => e.OrdenPresentacion).HasComment("Orden en que se presenta en la tabla y orden para realizra el Calculo");

                entity.Property(e => e.RecargoCompraId).HasComment("Indica el tipo de recargo a Aplicar(Se obtiene de AlmaNET.ProductoCostoRecargoTipo)");

                entity.Property(e => e.TipoCalculo).HasComment("0-Se realiza el Recargo Sobre el Ultimo resuldado del Recargo Anterior (Si ubiere) 1-Se trata de un descuento directo sobre el Precio de Compra");

                entity.HasOne(d => d.ProdCosto)
                    .WithMany(p => p.ProductoCostoRecargo)
                    .HasForeignKey(d => d.ProdCostoId)
                    .HasConstraintName("FK_ProductoCostoRecargo_ProductoCosto");

                entity.HasOne(d => d.RecargoCompra)
                    .WithMany(p => p.ProductoCostoRecargo)
                    .HasForeignKey(d => d.RecargoCompraId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCostoRecargo_ProductoCostoTipo");
            });

            modelBuilder.Entity<ProductoCostoRecargoHistorico>(entity =>
            {
                entity.Property(e => e.RegRecargId).ValueGeneratedOnAdd();

                entity.Property(e => e.OrdenPresentacion).HasComment("Orden en que se presenta en la tabla y orden para realizra el Calculo");

                entity.Property(e => e.RecargoCompraId).HasComment("Indica el tipo de recargo a Aplicar(Se obtiene de AlmaNET.ProductoCostoRecargoTipo)");

                entity.Property(e => e.TipoCalculo).HasComment("0-Se realiza el Recargo Sobre el Ultimo resuldado del Recargo Anterior (Si ubiere) 1-Se trata de un descuento directo sobre el Precio de Compra");

                entity.HasOne(d => d.RegRecarg)
                    .WithOne(p => p.ProductoCostoRecargoHistorico)
                    .HasForeignKey<ProductoCostoRecargoHistorico>(d => d.RegRecargId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoCostoRecargoHistorico_ProductoCostoHistorico");
            });

            modelBuilder.Entity<ProductoCostoTipo>(entity =>
            {
                entity.Property(e => e.CostoTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoEnvase>(entity =>
            {
                entity.Property(e => e.ProductoPresentacionId).HasComment("Productos vinculados a este envase");

                entity.Property(e => e.ProductoPresentacionIdenvase).HasComment("ProductoPresentacionID que ES EL ENVASE");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoEnvaseProductoPresentacion)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoEnvase_ProductoPresentacion1");

                entity.HasOne(d => d.ProductoPresentacionIdenvaseNavigation)
                    .WithMany(p => p.ProductoEnvaseProductoPresentacionIdenvaseNavigation)
                    .HasForeignKey(d => d.ProductoPresentacionIdenvase)
                    .HasConstraintName("FK_ProductoEnvase_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoEnvaseConsignacion>(entity =>
            {
                entity.Property(e => e.Cantidad).HasComment("Cantidad, envases entregados puede ser menor  o Igual");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto Utilizado Como envase");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoEnvaseConsignacion)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoEnvaseConsignacion_Producto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProductoEnvaseConsignacion)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ProductoEnvaseConsignacion_OperacionItemProducto");
            });

            modelBuilder.Entity<ProductoFamilia>(entity =>
            {
                entity.HasKey(e => e.FamiliaId)
                    .HasName("PK_ProductosFamilias");

                entity.Property(e => e.FamiliaId)
                    .ValueGeneratedNever()
                    .HasComment("Campo Unico Registro");

                entity.Property(e => e.CuentaId).HasComment("Cuenta Contable q reperesenta el Monto Neto/Excento de la venta");

                entity.Property(e => e.CuentaIdcosto).HasComment("Cuenta Contable q reperesenta el Monto del Costo de la operacion");

                entity.Property(e => e.Descripcion).HasComment("Refiere al nombre que tiene la Familia");

                entity.Property(e => e.FamiliaCompleto).HasComment("indica la ruta completa del registro de la familia Actual Familia ejem 1.2.3");

                entity.Property(e => e.FamiliaNro).HasComment("Nro de Familia que se le asigna (Se comienza a emumerar  de 1 a por cada Familia) nu puede repetirse el mismo numero de familia en una misma SubFamiliaDe");

                entity.Property(e => e.Filer).HasComment("Utilizado para indicar sincronizacion con Centralizador (IDFamilia del Centralizador)");

                entity.Property(e => e.TipoFamiliaId).HasComment("Indica a que tipo de familia Pertenece Se optiene de la Tabla ProductoFamilia Tipo");

                entity.Property(e => e.Utilidad).HasComment("Indico q utilidad se aplica a los productos de esta marca");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProductoFamiliaCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_ProductoFamilia_PlanDeCuenta");

                entity.HasOne(d => d.CuentaIdcostoNavigation)
                    .WithMany(p => p.ProductoFamiliaCuentaIdcostoNavigation)
                    .HasForeignKey(d => d.CuentaIdcosto)
                    .HasConstraintName("FK_ProductoFamilia_PlanDeCuenta1");

                entity.HasOne(d => d.CuentaIdstockNavigation)
                    .WithMany(p => p.ProductoFamiliaCuentaIdstockNavigation)
                    .HasForeignKey(d => d.CuentaIdstock)
                    .HasConstraintName("FK_ProductoFamilia_PlanDeCuenta2");

                entity.HasOne(d => d.TipoFamilia)
                    .WithMany(p => p.ProductoFamilia)
                    .HasForeignKey(d => d.TipoFamiliaId)
                    .HasConstraintName("FK_ProductosFamilias_ProductosFamiliasTipos");
            });

            modelBuilder.Entity<ProductoFamiliaTipo>(entity =>
            {
                entity.HasKey(e => e.TipoFamiliaId)
                    .HasName("PK_ProductosFamiliasTipos");

                entity.HasComment("Especifica el Rubro Comercial al q Pertenece (Mercado,Tienda,Ferreteria,etc)");

                entity.HasOne(d => d.ProductoSector)
                    .WithMany(p => p.ProductoFamiliaTipo)
                    .HasForeignKey(d => d.ProductoSectorId)
                    .HasConstraintName("FK_ProductoFamiliaTipo_ProductoFamiliaTipoSector");
            });

            modelBuilder.Entity<ProductoFamiliaTipoSector>(entity =>
            {
                entity.HasComment(" BAZAR , ELECTRODOMESTICOS ,PRODUCTOS FRESCOS  \r\n TEXTIL  ,CONSUMO PRINCIPAL, FARMACIA  \r\nPermite sectorizar las distintos tipo de canastas(ProductoFamiliaTipo)");

                entity.Property(e => e.ProductoSectorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoHotelRest>(entity =>
            {
                entity.HasKey(e => e.ItemServId)
                    .HasName("PK_ProductoHotelRestaurant");

                entity.HasComment("Indica el inventario de Mesas Habitaciones");

                entity.Property(e => e.ItemServId).ValueGeneratedNever();

                entity.Property(e => e.CodigoId).HasComment("Indica si tiene un producto relacionado (Ejem. Prcio reserba u habitacion)");

                entity.Property(e => e.EstadoId).HasComment("0-Ninguno  10-Limpieza 20-Mantenimiento");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TipoServId).HasComment("1- RestaurantMesa 10-HotelHabitacion (Tiene como finalidad determinar si pertenece al Hotel o al Restaurant)");

                entity.Property(e => e.VendedorId).HasComment("Indica el Vendedor asignado a la mesa (Por default)");

                entity.HasOne(d => d.Categoria)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.CategoriaId)
                    .HasConstraintName("FK_ProductoHotelRestaurant_ProductoHotelRestCategoria");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoHotelRestaurant_Producto");

                entity.HasOne(d => d.Habitacion)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.HabitacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoHotelRest_HotelHabitacion");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_ProductoHotelRest_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoHotelRest_Sucursal");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.ProductoHotelRest)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_ProductoHotelRest_Vendedor");
            });

            modelBuilder.Entity<ProductoHotelRestCategoria>(entity =>
            {
                entity.Property(e => e.CategoriaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoHotelRestReserva>(entity =>
            {
                entity.Property(e => e.EstadoId).HasComment("0-Normal 20-Mantenimiento programado 100-Cancelado ");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.ProductoHotelRestReserva)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_ProductoHotelRestReserva_Cliente");

                entity.HasOne(d => d.ItemServ)
                    .WithMany(p => p.ProductoHotelRestReserva)
                    .HasForeignKey(d => d.ItemServId)
                    .HasConstraintName("FK_ProductoHotelRestReserva_ProductoHotelRest");

                entity.HasOne(d => d.RegistroAtenc)
                    .WithMany(p => p.ProductoHotelRestReserva)
                    .HasForeignKey(d => d.RegistroAtencId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoHotelRestReserva_OperacionPedidoVentaHotelRest");
            });

            modelBuilder.Entity<ProductoImpuesto>(entity =>
            {
                entity.HasOne(d => d.CodigoBase)
                    .WithMany(p => p.ProductoImpuesto)
                    .HasForeignKey(d => d.CodigoBaseId)
                    .HasConstraintName("FK_ProductoImpuesto_ProductoBase1");

                entity.HasOne(d => d.Impuesto)
                    .WithMany(p => p.ProductoImpuesto)
                    .HasForeignKey(d => d.ImpuestoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoImpuesto_Impuesto");
            });

            modelBuilder.Entity<ProductoLista>(entity =>
            {
                entity.HasKey(e => e.ListaPrecId)
                    .HasName("PK_ProductosListas");

                entity.Property(e => e.ListaPrecId).ValueGeneratedNever();

                entity.Property(e => e.AjusteUtilidad).HasComment("En caso de q la utilidad este asignada por marcar, familia puedo indicar si para esta lista o presentacion se tiene q realizar un ajuste");

                entity.Property(e => e.AplicaComisionPor).HasComment("null-0 Aplica comision especificada por Productos, lista de precio igual para todos los vendedores ProductoListaPrecio.ComisionVendedor 1-Aplica por %(ProductoLista.ComicionVendedor) por lista de precio igual % a todos los vendedores, todos los productos de la lista 2-Indica que la comision es un Importe fijo, segun lista de precios e igual para todos los vendedores ProductoListaPrecio.ComisionVendedorImporte 10-Aplica %Comsion indicado por Producto x Lista Precio x Vendedor ProductoListaPrecioComision.ComisionVendedor 11- Indica q se aplica un importe por Producto X Listade Precio x Vendedor ProductoListaPrecioComision.ComisionVendedorImporte");

                entity.Property(e => e.CalcularUtilidadSobre).HasComment("0-Lista General 1-Sobre Costo 2-Sobre Costo Sucursal  3-Sobre listar General de la Sucursal 10-Precio Manual");

                entity.Property(e => e.ComicionVendedor).HasComment("% Comicion q recibe el vendedor por realizar la venta Utilizando esta lista de Precio");

                entity.Property(e => e.EsListaGeneral).HasComment("Indica q esta es la lista general, exite una general por cada sucursal (por defecto se utilizacomo general la  lista 0)");

                entity.Property(e => e.Inhabilitado).HasComment("Pemite inhabilitar un alista de precio evitando su tutilizacion y visualizacion");

                entity.Property(e => e.PlanPagoId).HasComment("Codigo Plan de Pago");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.HasOne(d => d.PlanPago)
                    .WithMany(p => p.ProductoLista)
                    .HasForeignKey(d => d.PlanPagoId)
                    .HasConstraintName("FK_ProductoLista_OperacionCreditoPlanesPago");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ProductoLista)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_ProductoLista_Proveedor");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoLista)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoLista_Sucursal");
            });

            modelBuilder.Entity<ProductoListaPrecio>(entity =>
            {
                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal Ver si podemos utilizar para reemplazar la Tabla ProductoListaPrecioSucursal");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoListaPrecio)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoListaPrecio_Usuario");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.ProductoListaPrecio)
                    .HasForeignKey(d => d.ListaPrecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoListaPrecio_ProductoLista");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoListaPrecio)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .HasConstraintName("FK_ProductoListaPrecio_ProductoPresentacion");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoListaPrecio)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoListaPrecio_Sucursal");
            });

            modelBuilder.Entity<ProductoListaPrecioComision>(entity =>
            {
                entity.Property(e => e.ComicionVendedor).HasComment("% Comicion q recibe el vendedor por realizar la venta Utilizando esta lista de Precio");

                entity.Property(e => e.ComisionVendedorImporte).HasComment("Importe q se paga de comision por la venta de este Producto en esta lista de Precio");

                entity.Property(e => e.ProductoPrecioId).HasComment("CodigoPrecio para un producto en Deteminada Presentacion y lista de precio");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.ProductoListaPrecioComision)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .HasConstraintName("FK_ProductoListaPrecioComision_ProductoListaPrecio");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.ProductoListaPrecioComision)
                    .HasForeignKey(d => d.VendedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoListaPrecioComision_Vendedor");
            });

            modelBuilder.Entity<ProductoListaSucursal>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoListaSucursal)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoListaSucursal_Usuario");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.ProductoListaSucursal)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .HasConstraintName("FK_ProductoListaSucursal_ProductoListaPrecio");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoListaSucursal)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoListaSucursal_Sucursal");
            });

            modelBuilder.Entity<ProductoListadoColector>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("PK_ProductoListado");

                entity.Property(e => e.AlmaUserId).HasComment("Usuario q realizo");

                entity.Property(e => e.DepositoId).HasComment("Indico el Deposito q se esta contando");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa q realizo ");
            });

            modelBuilder.Entity<ProductoMarca>(entity =>
            {
                entity.Property(e => e.MarcaId).ValueGeneratedNever();

                entity.Property(e => e.GarantiaDias).HasComment("Indica la cantidad de Dias de Garantia q tiene asignado el producto");

                entity.Property(e => e.NroIdentMarca).HasComment("Indico cual son los digitos utilizados en el codigo de barra que identifican a la Marca/Fabrica");

                entity.Property(e => e.SectorId).HasComment("Sector en el q se utiliza esta marca (la idea es filtrar por sector los productos-Marcas) (ver supermercado perfumeria");

                entity.HasOne(d => d.Fabricante)
                    .WithMany(p => p.ProductoMarca)
                    .HasForeignKey(d => d.FabricanteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoMarca_ProductoMarcaManufactur");

                entity.HasOne(d => d.MarcaTipo)
                    .WithMany(p => p.ProductoMarca)
                    .HasForeignKey(d => d.MarcaTipoId)
                    .HasConstraintName("FK_ProductoMarca_ProductoMarcaTipo");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoMarca)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_ProductoMarca_Sector");
            });

            modelBuilder.Entity<ProductoMarcaManufactur>(entity =>
            {
                entity.Property(e => e.FabricanteId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoMarcaServis>(entity =>
            {
                entity.Property(e => e.RegistroServId).ValueGeneratedNever();

                entity.HasOne(d => d.Entidad)
                    .WithMany(p => p.ProductoMarcaServis)
                    .HasForeignKey(d => d.EntidadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoMarcaServis_Entidad");

                entity.HasOne(d => d.Marca)
                    .WithMany(p => p.ProductoMarcaServis)
                    .HasForeignKey(d => d.MarcaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoMarcaServis_ProductoMarca");
            });

            modelBuilder.Entity<ProductoMarcaTipo>(entity =>
            {
                entity.HasComment("Tabla q permite agrupar masrcas q compiten o son simmilares (Ejem. Lacteo,bebidas,etc)");

                entity.Property(e => e.MarcaTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoNroSerie>(entity =>
            {
                entity.Property(e => e.NroSerieId)
                    .ValueGeneratedNever()
                    .HasComment("Registro del Nro de Serie");

                entity.Property(e => e.Descripcion).HasComment("Descripcion Adicional");

                entity.Property(e => e.FechaAlta).HasComment("Fecha Alta (Puede ser Utilizado para el calculo de garantia)");

                entity.Property(e => e.NroSerie).HasComment("Nro de Serie (Numerico- Produccion Propia)");

                entity.Property(e => e.NroSerieAlfa).HasComment("Nro de Serie (Permite especificar un Nro de Serie AlfaNumerico)");

                entity.Property(e => e.ProductoPresentacionId).HasComment("Presentacion del producto que contiene el Nro de Serie");

                entity.HasOne(d => d.Atributo)
                    .WithMany(p => p.ProductoNroSerie)
                    .HasForeignKey(d => d.AtributoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoNroSerie_ProductoNroSerieAtributo");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.ProductoNroSerie)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoNroSerie_ProductoNroSerieEstado");

                entity.HasOne(d => d.LoteFraccion)
                    .WithMany(p => p.ProductoNroSerie)
                    .HasForeignKey(d => d.LoteFraccionId)
                    .HasConstraintName("FK_ProductoNroSerie_ProductoNroSerieLoteFraccion");

                entity.HasOne(d => d.Lote)
                    .WithMany(p => p.ProductoNroSerie)
                    .HasForeignKey(d => d.LoteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoNroSerie_ProductoNroSerieLote");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoNroSerie)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoNroSerie_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoNroSerieAtributo>(entity =>
            {
                entity.Property(e => e.AtributoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductoNroSerieDetalle>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.NroSerieId).HasComment("Registro del Nro de Serie");

                entity.HasOne(d => d.NroSerie)
                    .WithMany(p => p.ProductoNroSerieDetalle)
                    .HasForeignKey(d => d.NroSerieId)
                    .HasConstraintName("FK_ProductoNroSerieDetalle_ProductoNroSerie1");
            });

            modelBuilder.Entity<ProductoNroSerieEstado>(entity =>
            {
                entity.HasComment("Permite Especificar el Estao en q esta el Producto Elaborado");
            });

            modelBuilder.Entity<ProductoNroSerieLote>(entity =>
            {
                entity.HasComment("Se refiere a un Lote de Produccion, o Ingreso, permite agrupardeterminada cantidad de ProductosNroSerie, para controlar fecha vencimientos, garantia etc.");

                entity.Property(e => e.LoteId).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).HasComment("Descripcion del Lote");

                entity.Property(e => e.NroSerieFinal).HasComment("Nro Serie Final");

                entity.Property(e => e.NroSerieInicia).HasComment("NroSeirie Inicio");

                entity.HasOne(d => d.LoteEstado)
                    .WithMany(p => p.ProductoNroSerieLote)
                    .HasForeignKey(d => d.LoteEstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoNroSerieLote_ProductoNroSerieLoteEstado");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoNroSerieLote)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .HasConstraintName("FK_ProductoNroSerieLote_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoNroSerieLoteEstado>(entity =>
            {
                entity.Property(e => e.LoteEstadoId).HasComment("Define el Estado de los Lotes de Producto");
            });

            modelBuilder.Entity<ProductoNroSerieLoteFraccion>(entity =>
            {
                entity.Property(e => e.LoteFraccionId).ValueGeneratedNever();

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.ProductoNroSerieLoteFraccion)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoNroSerieLoteFraccion_ProductoNroSerieEstado");

                entity.HasOne(d => d.Lote)
                    .WithMany(p => p.ProductoNroSerieLoteFraccion)
                    .HasForeignKey(d => d.LoteId)
                    .HasConstraintName("FK_ProductoNroSerieLoteFraccion_ProductoNroSerieLote");
            });

            modelBuilder.Entity<ProductoNroSerieMovimiento>(entity =>
            {
                entity.Property(e => e.RegistroId)
                    .ValueGeneratedNever()
                    .HasComment("Campo Unico");

                entity.Property(e => e.Detalle).HasComment("Descripcion Adicional o Comentario");

                entity.Property(e => e.NroItemDespRec).HasComment("Nro del Item de la recepcion o Despacho");

                entity.Property(e => e.NroSerieId).HasComment("Indica Nro Serie Articulo");

                entity.Property(e => e.TipoItem).HasComment("11- Operacion despacho 21-Operacion Recepcion");

                entity.HasOne(d => d.NroSerie)
                    .WithMany(p => p.ProductoNroSerieMovimiento)
                    .HasForeignKey(d => d.NroSerieId)
                    .HasConstraintName("FK_ProductoNroSerieDetalle_ProductoNroSerie");

                entity.HasOne(d => d.OperacionDespachoItem)
                    .WithMany(p => p.ProductoNroSerieMovimiento)
                    .HasPrincipalKey(p => new { p.TipoItem, p.ItemDespchId })
                    .HasForeignKey(d => new { d.TipoItem, d.NroItemDespRec })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoNroSerieMovimiento_OperacionDespachoItem");

                entity.HasOne(d => d.OperacionRecepcionItem)
                    .WithMany(p => p.ProductoNroSerieMovimiento)
                    .HasPrincipalKey(p => new { p.TipoItem, p.ItemRecepId })
                    .HasForeignKey(d => new { d.TipoItem, d.NroItemDespRec })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoNroSerieMovimiento_OperacionRecepcionItem");
            });

            modelBuilder.Entity<ProductoNuevaListaPrecio>(entity =>
            {
                entity.Property(e => e.ListaPrecioNuevaId)
                    .ValueGeneratedNever()
                    .HasComment("Indica Codigo Nueva lista Precio Aplicar");

                entity.Property(e => e.AplicacionTipo).HasComment("0-Ya se hizo efectiva,1-Indica que se utiizara para ser aplicada");
            });

            modelBuilder.Entity<ProductoOferta>(entity =>
            {
                entity.Property(e => e.ProductoOfertaId).ValueGeneratedNever();

                entity.Property(e => e.TipoOfertaId).HasComment("0-Normal 1-Promocion x Cantidad  2- 1x2 (Paga 1 Lleva 2) 3-2x3 (Paga 2 lleva 3) 4-3x4 (Paga 3 lleva 4) 5-4x5 (Paga 4 lleva 5) 10-Acompaña otro Producto Gratis");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoOferta_Usuario");

                entity.HasOne(d => d.Canal)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.CanalId)
                    .HasConstraintName("FK_ProductoOferta_ClienteCanal");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoOfertaCodigo)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoOferta_Producto");

                entity.HasOne(d => d.CodigoIdgratisNavigation)
                    .WithMany(p => p.ProductoOfertaCodigoIdgratisNavigation)
                    .HasForeignKey(d => d.CodigoIdgratis)
                    .HasConstraintName("FK_ProductoOferta_Producto1");

                entity.HasOne(d => d.Fabricante)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.FabricanteId)
                    .HasConstraintName("FK_ProductoOferta_ProductoMarcaManufactur");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_ProductoOferta_ProductoLista");

                entity.HasOne(d => d.Marca)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.MarcaId)
                    .HasConstraintName("FK_ProductoOferta_ProductoMarca");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoOfertaPresentacion)
                    .HasForeignKey(d => d.PresentacionId)
                    .HasConstraintName("FK_ProductoOferta_ProductoPresentacionTipo");

                entity.HasOne(d => d.PresentacionIdgratisNavigation)
                    .WithMany(p => p.ProductoOfertaPresentacionIdgratisNavigation)
                    .HasForeignKey(d => d.PresentacionIdgratis)
                    .HasConstraintName("FK_ProductoOferta_ProductoPresentacionTipo1");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_ProductoOferta_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoOferta)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoOferta_Sucursal");
            });

            modelBuilder.Entity<ProductoOferta2>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoOferta2)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoOferta2_Usuario");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoOferta2)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoOferta2_Producto");

                entity.HasOne(d => d.ConfigOferta)
                    .WithMany(p => p.ProductoOferta2)
                    .HasForeignKey(d => d.ConfigOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2_ProductoOferta2Configuracion");
            });

            modelBuilder.Entity<ProductoOferta2BonoSorteo>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.ProductoOferta2BonoSorteo)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2BonoSorteo_ProductoOferta2");
            });

            modelBuilder.Entity<ProductoOferta2Normal>(entity =>
            {
                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.ProductoOferta2Normal)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2Normal_ProductoOferta2");
            });

            modelBuilder.Entity<ProductoOferta2PrecioBonifCantidad>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProductoOferta2PrecioCantidad");

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.ProductoOferta2PrecioBonifCantidad)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2XCantidad_ProductoOferta2");
            });

            modelBuilder.Entity<ProductoOferta2PromoXcantidad>(entity =>
            {
                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.ProductoOferta2PromoXcantidad)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2PromoXCantidad_ProductoOferta2");
            });

            modelBuilder.Entity<ProductoOferta2VoucherCompra>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProductoOferta2VoucherBonif");

                entity.HasOne(d => d.ProductoOferta)
                    .WithMany(p => p.ProductoOferta2VoucherCompra)
                    .HasForeignKey(d => d.ProductoOfertaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoOferta2VoucherBonif_ProductoOferta2");
            });

            modelBuilder.Entity<ProductoPallet>(entity =>
            {
                entity.Property(e => e.RegistroPalletId).ValueGeneratedNever();

                entity.HasOne(d => d.Pallet)
                    .WithMany(p => p.ProductoPallet)
                    .HasForeignKey(d => d.PalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoPallet_Pallet");
            });

            modelBuilder.Entity<ProductoPalletItem>(entity =>
            {
                entity.Property(e => e.PalletItemId).ValueGeneratedNever();

                entity.HasOne(d => d.LoteFraccion)
                    .WithMany(p => p.ProductoPalletItem)
                    .HasForeignKey(d => d.LoteFraccionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoPalletItem_ProductoNroSerieLoteFraccion");

                entity.HasOne(d => d.RegistroPallet)
                    .WithMany(p => p.ProductoPalletItem)
                    .HasForeignKey(d => d.RegistroPalletId)
                    .HasConstraintName("FK_ProductoPalletItem_ProductoPallet1");
            });

            modelBuilder.Entity<ProductoPrecioHistorico>(entity =>
            {
                entity.Property(e => e.CalcularUtilidadSobre).HasComment("0-Lista General 1-Sobre Costo 10-Precio Manual");

                entity.Property(e => e.Detalle).HasComment("Informacion Adicional");

                entity.Property(e => e.Fecha).HasComment("Fecha del Cambio de Precio");

                entity.Property(e => e.ListaPrecioNuevaId).HasComment("Indica Codigo Nueva lista Precio Aplicar");

                entity.Property(e => e.PocentajeUtilidad).HasComment("almaceno el % de recargo a Aplicar");

                entity.Property(e => e.Precio).HasComment("Precio Neto");

                entity.Property(e => e.ProductoPrecioId).HasComment("Lista Precio y codigo porducto q cambio");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal a lq que pertenece la lista de precio");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades q Contiene al realizar el cambio");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoPrecioHistorico)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoPrecioHistorico_Usuario");

                entity.HasOne(d => d.ListaPrecioNueva)
                    .WithMany(p => p.ProductoPrecioHistorico)
                    .HasForeignKey(d => d.ListaPrecioNuevaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoPrecioHistorico_ProductoNuevaListaPrecio");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.ProductoPrecioHistorico)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .HasConstraintName("FK_ProductoPrecioHistorico_ProductoListaPrecio");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoPrecioHistorico)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoPrecioHistorico_Sucursal");
            });

            modelBuilder.Entity<ProductoPresentacion>(entity =>
            {
                entity.HasComment("Las Distintas presentaciones que tiene un producto, eje. Caja-> Paquetes -> Sobres.");

                entity.Property(e => e.ProductoPresentacionId).HasComment("");

                entity.Property(e => e.CalculoId).HasComment("Se optiene de  AlmaNET.ProductoNroSerieDetalleTipoCalculos y se determina que unidad de medidas utilizar y la formula para el calculo ");

                entity.Property(e => e.CantidadUnidaMedida).HasComment("Cantidad en esa unidad de Medida");

                entity.Property(e => e.CodigoId).HasComment("Codigo del Producto");

                entity.Property(e => e.EmpaqueId).HasComment("Indica el tipo de empaque del Producto (Botella, Paquete, Caja, pallet, Pesable, Etc) se Obtiene de AlmaNET.EmpaqueTipo");

                entity.Property(e => e.Fracciones).HasComment("Indica si es divisible por cuantas unidades o Fracciones");

                entity.Property(e => e.PresentacionId).HasComment("Indica cual es El tipo de Presentacion de las unidades que contiene en caso de contener");

                entity.Property(e => e.SeUtilizaEnCompra).HasComment("Si es utilizado en el ingreso de Compras");

                entity.Property(e => e.SeUtilizaEnVenta).HasComment("Se es Utilizado en la realizacion de Ventas");

                entity.Property(e => e.UnidadMedidaId).HasComment("Se obtiene de la tabla AlmaNET.UnidadesMedida");

                entity.Property(e => e.UnidadesContiene).HasComment("Cantidad de Unidades que contiene en Caso de estar contenido en otra presentacion mayor");

                entity.Property(e => e.UtilizaNroSerie).HasComment("Si Tiene asignado Nro de Serie");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoPresentacion)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoPresentacion_Producto");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoPresentacion)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoPresentacion_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<ProductoPresentacionTipo>(entity =>
            {
                entity.HasKey(e => e.PresentacionId)
                    .HasName("PK_ProductoTipoPresentacion");

                entity.Property(e => e.PresentacionId).ValueGeneratedNever();

                entity.Property(e => e.AjusteUtilidad).HasComment("En caso de q la utilidad este asignada por marcar, familia puedo indicar si para esta presentacion se tiene q realizar un ajuste");

                entity.Property(e => e.Orden).HasComment("Permite establecer el orden para presentar los registros");

                entity.Property(e => e.PresentacionIdpadre).HasComment("Las presentaciones posibles para Productos - Gerarquico 0- Indica que es Pricipal /Raiz\r\nIndica si este Tipo de Presentacion Contiene a Otros, Ejem. Las cajas contienen Botellas, Pero las botellas  no contienen a otros tipo de Presentacion");

                entity.Property(e => e.TipoPresentacionHierarchy).HasComment("Indica la Presentacion ruta completa ejem 1.1.2.1");
            });

            modelBuilder.Entity<ProductoProcesoInsumo>(entity =>
            {
                entity.HasComment("CUIDADO, se puede borrar un producto que era un insumo y quedara mal armado el Precio del Proceso");

                entity.Property(e => e.DescripcionPlanilla).HasComment("Descripcion a Utilizar (Nombre Generico), para la Planillas de Insumos diarios");

                entity.HasOne(d => d.ProductoInsumo)
                    .WithMany(p => p.ProductoProcesoInsumo)
                    .HasForeignKey(d => d.ProductoInsumoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoProcesoInsumo_ProductoPresentacion");

                entity.HasOne(d => d.SubProceso)
                    .WithMany(p => p.ProductoProcesoInsumo)
                    .HasForeignKey(d => d.SubProcesoId)
                    .HasConstraintName("FK_ProductoProcesoInsumo_ProductoProcesoPrecio");
            });

            modelBuilder.Entity<ProductoProcesoPrecio>(entity =>
            {
                entity.Property(e => e.SubProcesoId).HasComment("Define un Nro Poceso  unico (CodigoID,ProcesoID)  para cada Uno de los distintos de Procesos de elaboracion dentro de un Producto");

                entity.Property(e => e.DescripcionVenta).HasComment("Descricpcion a utilizar para Facturar Este. Proceso");

                entity.Property(e => e.ImpresoraDefault).HasComment("Impresora a utilizar para emision de comandas en hotel resturant");

                entity.Property(e => e.MagenUtilidad).HasComment("% De ganancia aplicado Sobre el Costo  Insumo de este Proceso");

                entity.Property(e => e.MaquinaId).HasComment("Opcional Mauina en la que se realiza el Proceso de este Producto");

                entity.Property(e => e.MostrarEnListaPrecio).HasComment("Indica si aparecera en la lista de Precio (Precios Producto--Procesos)");

                entity.Property(e => e.OrdenProceso).HasComment("Orden en que se elabora el Producto, no poermite saltearse el orden del proceso salvo ProcesoOpcional");

                entity.Property(e => e.PrecioVenta).HasComment("Precio de venta de este Proceso");

                entity.Property(e => e.ProcesoId).HasComment("Codigo Proceso dentro de este Producto");

                entity.Property(e => e.ProcesoOpcional).HasComment("Indica que este proceso puede ser Obviado en la elaboracion de un producto");

                entity.Property(e => e.TiempoControlPor).HasComment("0- Control de tiempo se realiza por Proceso, 1-Control de Tiempo por Maquina (Obliga a Ingresar una Maquina)");

                entity.Property(e => e.TiempoProceso).HasComment("Tiempo que se demora en Realizar el Proceso para un producto (Estimado)");

                entity.Property(e => e.TotalCosto).HasComment("Costo de Este Proceso");

                entity.HasOne(d => d.Maquina)
                    .WithMany(p => p.ProductoProcesoPrecio)
                    .HasForeignKey(d => d.MaquinaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductoProcesoPrecio_ProduccionMaquina");

                entity.HasOne(d => d.Proceso)
                    .WithMany(p => p.ProductoProcesoPrecio)
                    .HasForeignKey(d => d.ProcesoId)
                    .HasConstraintName("FK_ProductoProcesoPrecio_ProduccionProceso");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.ProductoProcesoPrecio)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoProcesoPrecio_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoProveedor>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_ProductoEntidadProveedor");

                entity.Property(e => e.CodigoProveedor).HasComment("Es el codigo con el que me factura el Proveedor");

                entity.Property(e => e.CompraId).HasComment("Indica la Ultima compra realizada ");

                entity.Property(e => e.Detalle).HasComment("Indica datos prar poder realizar la compra de este producto al proveedor (Compra minima etc. Costo Adic. Flete )");

                entity.Property(e => e.FechaUltimaCompra).HasComment("Indica la Fecha de la Ultima compra realizado a ese proveedor");

                entity.Property(e => e.ItemId).HasComment("Item Unico del detalle de la Compra o Pedido q actualizo Costo");

                entity.Property(e => e.StockProveed).HasComment("Indico la cantidad q posee de Stock el Proveedor");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros)");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoProveedor)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoProveedor_Producto");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ProductoProveedor)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ProductoProveedor_OperacionItemProducto");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ProductoProveedor)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_ProductoEntidadProveedor_EntidadProveedor");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.ProductoProveedor)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CompraId })
                    .HasConstraintName("FK_ProductoProveedor_OperacionCompra");

                entity.HasOne(d => d.OperacionPedidoCompra)
                    .WithMany(p => p.ProductoProveedor)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CompraId })
                    .HasConstraintName("FK_ProductoProveedor_OperacionPedidoCompra");
            });

            modelBuilder.Entity<ProductoProveedorInventario>(entity =>
            {
                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ProductoProveedorInventario)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoProveedorInventario_Proveedor");
            });

            modelBuilder.Entity<ProductoProveedorInventarioItems>(entity =>
            {
                entity.HasKey(e => e.ItemInventProveed)
                    .HasName("PK_ProveedorProductoInventarioItems");

                entity.Property(e => e.NroItemDetalle).IsFixedLength();

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoProveedorInventarioItems_Producto");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoProveedorInventarioItems_Deposito");

                entity.HasOne(d => d.InventarioProveedor)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.InventarioProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProveedorProductoInventarioItems_ProductoProveedorInventario");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoProveedorInventarioItems_ProductoPresentacionTipo");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoProveedorInventarioItems_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoProveedorInventarioItems)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductoProveedorInventarioItems_Sucursal");
            });

            modelBuilder.Entity<ProductoRelacionProducto>(entity =>
            {
                entity.Property(e => e.RegistroId).HasComment("Campo Unico");

                entity.Property(e => e.CodigoId).HasComment("Muestra todos los Productos Relacionados con el Producto CodigoID (Utilizado para comparar un mismo paroducto con distintas marcas)");

                entity.Property(e => e.CodigoIdprodRelacionado).HasComment("Producto Relacionado al Acutal");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoRelacionProductoCodigo)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductoRelacionProducto_Producto");

                entity.HasOne(d => d.CodigoIdprodRelacionadoNavigation)
                    .WithMany(p => p.ProductoRelacionProductoCodigoIdprodRelacionadoNavigation)
                    .HasForeignKey(d => d.CodigoIdprodRelacionado)
                    .HasConstraintName("FK_ProductoRelacionProducto_Producto1");
            });

            modelBuilder.Entity<ProductoStock>(entity =>
            {
                entity.HasKey(e => e.ProductoPresentacionId)
                    .HasName("PK_ProductoStock_1");

                entity.Property(e => e.ProductoPresentacionId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo del Producto (Se Genera)");

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithOne(p => p.ProductoStock)
                    .HasForeignKey<ProductoStock>(d => d.ProductoPresentacionId)
                    .HasConstraintName("FK_ProductoStock_ProductoPresentacion");
            });

            modelBuilder.Entity<ProductoUbicacion>(entity =>
            {
                entity.HasComment("Permite Determinar las zonas /Ubicaciones de un Deposito");

                entity.Property(e => e.ProductoUbicacionId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.Property(e => e.DescripcionRutaCompleta).HasComment("Trae la ruta completa de la ubicacion completa");

                entity.Property(e => e.EncargadoReposicionId).HasComment("Indica quien el la persona encargada de la reposicion de esta Ubicacion (Agrupacion informe Reposicion)");

                entity.Property(e => e.Orden).HasComment("Idem a Familia Completo pero rellena con 0 para que quede correctamete ordenado los Registros ([dbo].[HerarchyOrder]([FamiliaCompleto]))");

                entity.Property(e => e.UbicacionCompleto).HasComment("Nro de Familia que se le asigna (Se comienza a emumerar  de 1 a por cada Familia) nu puede repetirse el mismo numero de familia en una misma SubFamiliaDe");

                entity.Property(e => e.UbicacionNro).HasComment("Nro de Ubicacion que se le asigna (Se comienza a emumerar  de 1 a por cada Ubicacion) nu puede repetirse el mismo numero de Ubicacion en una misma SubUbicacionDe");
            });

            modelBuilder.Entity<ProductoUbicacionStock>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_DepositoStock");

                entity.HasComment("Los distintos productos q estan dentro de este deposito y su correspondiente stock");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto");

                entity.Property(e => e.Estado).HasComment("Indica si esta 1- habilitado o no 0-Inhabilitado 4-Suspendido");

                entity.Property(e => e.FechaControlStock).HasComment("Fecha desde la que se realiza el control de stock de este producto en el deposito");

                entity.Property(e => e.PorcentajeCovertura).HasComment("Indica que % de stock actual debe tener en base al stock sugerido (No utiliz stock Minimo)");

                entity.Property(e => e.PresentacionId).HasComment("Indica cual es El tipo de Presentacion de las unidades que contiene en caso de contener");

                entity.Property(e => e.ProductoUbicacionId).HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.Property(e => e.StockActual).HasComment("Stock En cajas");

                entity.Property(e => e.StockMinimo).HasComment("Minimo de Existencia antes de Solicitar Reposicion");

                entity.Property(e => e.StockSugerido).HasComment("Punto de Compra");

                entity.Property(e => e.StockUnidades).HasComment("(VER) Lleba el stock de una Caja Abierta");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoUbicacionStock)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_DepositoStock_Producto");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.ProductoUbicacionStock)
                    .HasForeignKey(d => d.PresentacionId)
                    .HasConstraintName("FK_DepositoStock_ProductoPresentacionTipo");

                entity.HasOne(d => d.ProductoUbicacion)
                    .WithMany(p => p.ProductoUbicacionStock)
                    .HasForeignKey(d => d.ProductoUbicacionId)
                    .HasConstraintName("FK_DepositoStock_ProductoUbicacion");
            });

            modelBuilder.Entity<ProductoVencimiento>(entity =>
            {
                entity.Property(e => e.AlmaUserId).HasComment("Usuario que realizo el Control de Baja de esta fecha vencimiento");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.Property(e => e.FechaBaja).HasComment("Fecha en que se dio por finalizado los productos con esta fecha vencimiento");

                entity.Property(e => e.FechaVencimiento).HasComment("Indico la Fecha Vencimiento q actualmente esta aplicando");

                entity.Property(e => e.ItemRecepId).HasComment("Indica Recepcion en la que se registro el Vencimiento");

                entity.Property(e => e.ProductoUbicacionId).HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal q controla el vencimiento");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ProductoVencimiento_Usuario");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_ProductoVencimiento_Producto");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_ProductoVencimiento_Deposito");

                entity.HasOne(d => d.ItemRecep)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.ItemRecepId)
                    .HasConstraintName("FK_ProductoVencimiento_OperacionRecepcionItem");

                entity.HasOne(d => d.ProductoUbicacion)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.ProductoUbicacionId)
                    .HasConstraintName("FK_ProductoVencimiento_ProductoUbicacion");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.ProductoVencimiento)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_ProductoVencimiento_Sucursal");
            });

            modelBuilder.Entity<Proveedor>(entity =>
            {
                entity.Property(e => e.ProveedorId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Proveedor");

                entity.Property(e => e.AdelantoCuentaId).HasComment("Codigo Unico De cuenta");

                entity.Property(e => e.CuentaId).HasComment("Cuenta Gasto Vinculada a este Proveedor , para el caso de carga gastos al agregar una imputacion traera dicha cuenta por 1era vez como default");

                entity.Property(e => e.EsRepresentada).HasComment("Indica si el Proveedor es Pertenece a una marca Representada por la Empresa (Ver Funcionamiento Representadas)");

                entity.Property(e => e.FormaPagoIdpago).HasComment("Indicar la forma de pago utilizada por defecto al  realizar un PAGO  se obtiene de OperacionFormaPago");

                entity.Property(e => e.FrecuenciaDiasPedido).HasComment("Indicar cada Cuanto dias nos visita el Proveedor (O se realiza el Pedido)");

                entity.Property(e => e.SectorId).HasComment("Sector en que se asento esta Compra");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal al q pertenecen las compras del proveedor");

                entity.HasOne(d => d.AdelantoCuenta)
                    .WithMany(p => p.ProveedorAdelantoCuenta)
                    .HasForeignKey(d => d.AdelantoCuentaId)
                    .HasConstraintName("FK_Proveedor_PlanDeCuenta1");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Proveedor)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Proveedor_ProveedorClasificacion");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.ProveedorCuenta)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_Proveedor_PlanDeCuenta");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Proveedor)
                    .HasForeignKey<Proveedor>(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadProveedor_EntidadSucursal");

                entity.HasOne(d => d.FormaPago)
                    .WithMany(p => p.ProveedorFormaPago)
                    .HasForeignKey(d => d.FormaPagoId)
                    .HasConstraintName("FK_Proveedor_OperacionFormaPago");

                entity.HasOne(d => d.FormaPagoIdpagoNavigation)
                    .WithMany(p => p.ProveedorFormaPagoIdpagoNavigation)
                    .HasForeignKey(d => d.FormaPagoIdpago)
                    .HasConstraintName("FK_Proveedor_OperacionFormaPago1");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Proveedor)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Proveedor_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Proveedor)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Proveedor_Sucursal");
            });

            modelBuilder.Entity<ProveedorBanco>(entity =>
            {
                entity.Property(e => e.BancoCbu).IsFixedLength();
            });

            modelBuilder.Entity<ProveedorClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProveedorMarca>(entity =>
            {
                entity.Property(e => e.RegistroId).HasComment("Campo Unico");

                entity.Property(e => e.ComicionVenta).HasComment("%Comicion que se otorga al vendedor por la venta de productos de esta marca");

                entity.Property(e => e.Detalles).HasComment("Comentarios");

                entity.Property(e => e.MarcaId).HasComment("Marca que vende el Proveedor");

                entity.Property(e => e.PorcUtilidad).HasComment("Magen de Utilidad que se aplican a productos de esta Marca");

                entity.Property(e => e.ProveedorId).HasComment("Proveedor q vende productos de esta marca");

                entity.HasOne(d => d.Marca)
                    .WithMany(p => p.ProveedorMarca)
                    .HasForeignKey(d => d.MarcaId)
                    .HasConstraintName("FK_ProveedorMarca_ProductoMarca");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.ProveedorMarca)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_ProveedorMarca_Proveedor");
            });

            modelBuilder.Entity<Proyecto>(entity =>
            {
                entity.HasComment("Proyectos permite el segimiento de gastos o de Operaciones, realizadas para la concrecion de un determinado proyecto, y luego poder determinar los gastos realizados, como tambien el mobimiento de las distintas cuentas con relacion a este proyecto");

                entity.Property(e => e.ProyectoId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Proyecto");

                entity.Property(e => e.Descripcion).HasComment("Nombre asignado al Proyecto");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.Proyecto)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_Proyecto_Cliente");

                entity.HasOne(d => d.Zona)
                    .WithMany(p => p.Proyecto)
                    .HasForeignKey(d => d.ZonaId)
                    .HasConstraintName("FK_Proyecto_ZonaGeografica");
            });

            modelBuilder.Entity<Publicidad>(entity =>
            {
                entity.Property(e => e.PublicidadId).ValueGeneratedNever();

                entity.Property(e => e.PublicidadTipoId).HasComment("1-Canal Youtube 2-Publicaciones Facebook 3-xxx");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Publicidad)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Publicidad_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Publicidad)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Publicidad_Sucursal");
            });

            modelBuilder.Entity<RepartoDespachos>(entity =>
            {
                entity.Property(e => e.RegistroDespId).ValueGeneratedNever();

                entity.Property(e => e.DespachoId).HasComment("Nro De Despacho");

                entity.Property(e => e.MovId).HasComment("Nro Reparto Planilla de Carga");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.RepartoDespachos)
                    .HasForeignKey(d => d.MovId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepartoDespachos_TransporteCargaMovimiento");

                entity.HasOne(d => d.OperacionDespacho)
                    .WithMany(p => p.RepartoDespachos)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.DespachoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepartoDespachos_OperacionDespacho1");
            });

            modelBuilder.Entity<RepartoPedido>(entity =>
            {
                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.RepartoPedido)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_RepartoPedido_TransporteCargaMovimiento");

                entity.HasOne(d => d.OperacionPedidoVenta)
                    .WithMany(p => p.RepartoPedido)
                    .HasForeignKey(d => new { d.TipoOperacionIdpedido, d.PedidoVentaId })
                    .HasConstraintName("FK_RepartoPedido_OperacionPedidoVenta");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.RepartoPedido)
                    .HasForeignKey(d => new { d.TipoOperacionIdventa, d.VentaId })
                    .HasConstraintName("FK_RepartoPedido_OperacionVenta1");
            });

            modelBuilder.Entity<RepartoRendicion>(entity =>
            {
                entity.Property(e => e.FechaHoraRegreso).HasComment("Indica la Fecha y hora q ingreso de Nuevo al Deposito (pendiente)");

                entity.Property(e => e.MovId).HasComment("Nro Reparto Planilla de Carga");

                entity.Property(e => e.RegistroOperacionId).HasComment("El Nro de Venta, Compra, Pago, Cobro que Genero el detalle");

                entity.Property(e => e.TipoOperacionId).HasComment("De AlmaNet.OperacionTipo - Indica si se trata de una Venta, Compra, Pago, Cobro");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.RepartoRendicion)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_RepartoRendicion_TransporteCargaMovimiento");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.RepartoRendicion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_RepartoRendicion_OperacionCobro");

                entity.HasOne(d => d.OperacionCompra)
                    .WithMany(p => p.RepartoRendicion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_RepartoRendicion_OperacionCompra");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.RepartoRendicion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_RepartoRendicion_OperacionPago");

                entity.HasOne(d => d.OperacionVenta)
                    .WithMany(p => p.RepartoRendicion)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RegistroOperacionId })
                    .HasConstraintName("FK_RepartoRendicion_OperacionVenta");
            });

            modelBuilder.Entity<RepartoVentaDirecta>(entity =>
            {
                entity.Property(e => e.CantidadFacturada).HasComment("Cantidad Facturada, para comparar segun ventas planilla de carga");

                entity.Property(e => e.CargaInicial).HasComment("Indica la 1er carga, o carga inicial");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto");

                entity.Property(e => e.ComisionVendedorImporte).HasComment("Importe de Comsicion x Unidad Producto vendido");

                entity.Property(e => e.ComisionVendedorPorcentaje).HasComment("% Comicion q recibe el vendedor por realizar la venta Utilizando esta lista de Precio");

                entity.Property(e => e.Debolucion).HasComment("Debolucion");

                entity.Property(e => e.DiferenciaAjuste).HasComment("Ajusto Sobre el total Calculado");

                entity.Property(e => e.ImporteComisionTotal).HasComment("Opcion de cargar manual la comision a pagar / liquidar");

                entity.Property(e => e.ImporteUnidad).HasComment("Importe Unidad");

                entity.Property(e => e.ImporteVenta).HasComment("Importe de la Ventas segun Operacion venta");

                entity.Property(e => e.MovId).HasComment("Nro Reparto Planilla de Carga");

                entity.Property(e => e.OrdenItem).HasComment("Establece el nro Item en la Planilla");

                entity.Property(e => e.PresentacionId).HasComment("Tipo de Presentacion del Producto (Caja-Unidades- etc.)");

                entity.Property(e => e.Recarga1).HasComment("1er recarga");

                entity.Property(e => e.Recarga2).HasComment("2da Recarga");

                entity.Property(e => e.Recarga3).HasComment("3er Recarga");

                entity.Property(e => e.Recarga4).HasComment("4ta Recarga");

                entity.Property(e => e.Recarga5).HasComment("5ta Recarga");

                entity.Property(e => e.UnidadesContiene).HasComment("Unidades que contiene la presentacion al momento del registro");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.RepartoVentaDirecta)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepartoVentaDirecta_Producto");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.RepartoVentaDirecta)
                    .HasForeignKey(d => d.ListaPrecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepartoVentaDirecta_ProductoLista");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.RepartoVentaDirecta)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_RepartoVentaDirecta_TransporteCargaMovimiento");

                entity.HasOne(d => d.Presentacion)
                    .WithMany(p => p.RepartoVentaDirecta)
                    .HasForeignKey(d => d.PresentacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepartoVentaDirecta_ProductoPresentacionTipo");
            });

            modelBuilder.Entity<Reporte>(entity =>
            {
                entity.HasComment("Contiene todos los reportes moudificados por el Usuario");

                entity.Property(e => e.ReportId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Reporte");

                entity.Property(e => e.Descripcion).HasComment("Descripcion utilizada para identificar el Reporte");

                entity.Property(e => e.ReportName).HasComment("Nombre unico del Reporte");

                entity.Property(e => e.ReporteModificado).HasComment("Contiene el archivo en Stream del reporte Modificado");

                entity.Property(e => e.UsarDefault).HasComment("Indica q se utiliza el Reporte Predeterminado, Ver Menu..");

                entity.Property(e => e.UsoRestringido).HasComment("Indica si es utilizado por todos los Usuarios del Sistema");
            });

            modelBuilder.Entity<Ruta>(entity =>
            {
                entity.HasComment("Define las distinas Hojas de rutas Especificadas para los vendedores y Repartidores/Transportes");

                entity.Property(e => e.RutaId).ValueGeneratedNever();

                entity.Property(e => e.NroOrden).HasComment("Indica el Orden de Recorrido asigando dentro de la Zona (no puede repetir en la misma Zona)");

                entity.Property(e => e.ZonaId).HasComment("Indica la Zona en la q se encuentra la Sucursal");
            });

            modelBuilder.Entity<Sector>(entity =>
            {
                entity.Property(e => e.SectorId)
                    .ValueGeneratedNever()
                    .HasComment("Sector que realizo la Venta");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.Sector)
                    .HasForeignKey(d => d.EmpresaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Sector_EmpresaDatos");

                entity.HasOne(d => d.Familia)
                    .WithMany(p => p.Sector)
                    .HasForeignKey(d => d.FamiliaId)
                    .HasConstraintName("FK_Sector_ProductoFamilia");
            });

            modelBuilder.Entity<Seguro>(entity =>
            {
                entity.Property(e => e.SeguroId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Empresa de Seguro");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.Observaciones).HasComment("Detalle Referidos a Seguros");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Seguro)
                    .HasForeignKey<Seguro>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Seguro_EntidadSucursal");
            });

            modelBuilder.Entity<SeguroPoliza>(entity =>
            {
                entity.Property(e => e.PolizaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo de Poliza Seguro");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.NroPoliza).HasComment("Nro de la Poliza de Segu");

                entity.Property(e => e.PolizaTipoId).HasComment("Indica el Tipo de Poliza de Seguro (AlmaNet-->SeguroPilizaTipo)");

                entity.Property(e => e.SeguroId).HasComment("Nro Empresa de Seguro");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.SeguroPoliza)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_SeguroPoliza_EntidadSucursal");

                entity.HasOne(d => d.Seguro)
                    .WithMany(p => p.SeguroPoliza)
                    .HasForeignKey(d => d.SeguroId)
                    .HasConstraintName("FK_SeguroPoliza_Seguro");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.SeguroPoliza)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_SeguroPoliza_TransporteVehiculo");
            });

            modelBuilder.Entity<Servis>(entity =>
            {
                entity.Property(e => e.ClienteId).HasComment("Codigo Cliente");

                entity.Property(e => e.Detalle).HasComment("Se indica cualquier detalle y/u observacion sobre esta operacion");

                entity.Property(e => e.EstadoServisId).HasComment("Indica el Estado Actual");

                entity.Property(e => e.FechaAlta).HasComment("Fecha reclamo");

                entity.Property(e => e.GestionTipo).HasComment("0-Cliente 1-La casa");

                entity.Property(e => e.NroComprobante).HasComment("Nro de comprobante / Se repite por ComprobnateID y Nro de Punto de Venta");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.SucursalId).HasComment("Nro de Sucursal de la Empresa en que se realizo la compra");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.Servis)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_Servis_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.Servis)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_Servis_Cliente");

                entity.HasOne(d => d.EstadoServis)
                    .WithMany(p => p.Servis)
                    .HasForeignKey(d => d.EstadoServisId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Servis_ServisEstado");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Servis)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Servis_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Servis)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Servis_Sucursal");
            });

            modelBuilder.Entity<ServisEstado>(entity =>
            {
                entity.HasComment("Indica el estadpo de la garantia, ingresadoa, procesada, en el despachado  de la empresa, En el Tecnioco, esperando respuesta tecnico, Esperando respuesta Cliente, Recibida en l aempresa, Entregafo al Cliente, Finalizada");

                entity.Property(e => e.EstadoServisId).ValueGeneratedNever();

                entity.Property(e => e.EsFinalizado).HasComment("Si un Servicio tiene este estado se encuntra Finalizado");
            });

            modelBuilder.Entity<ServisItem>(entity =>
            {
                entity.Property(e => e.Cantidad).HasComment("Cantidad q se envian al servis");

                entity.Property(e => e.CodigoId).HasComment("Codigo Producto reclamo");

                entity.Property(e => e.DetalleServis).HasComment("Detalle Producto q se solicita Servis");

                entity.Property(e => e.EntidadSucId).HasComment("Tecnico Nro Sucursal/Entidad");

                entity.Property(e => e.GarantiaDias).HasComment("Indica la cantidad de Dias de Garantia q tiene asignado el producto");

                entity.Property(e => e.ItemCompraId).HasComment("Nroitem  de Compra por el q se compro");

                entity.Property(e => e.ItemVentaId).HasComment("Nro Item de la venta que el cliente compro el articulo");

                entity.Property(e => e.NroSerieAlfa).HasComment("Nro de Serie (Permite especificar un Nro de Serie AlfaNumerico)");

                entity.Property(e => e.PresentacionId).HasComment("Presentacion Producto0");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.ServisItem)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServisItem_Producto");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.ServisItem)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_ServisItem_EntidadSucursal");

                entity.HasOne(d => d.ItemCompra)
                    .WithMany(p => p.ServisItemItemCompra)
                    .HasForeignKey(d => d.ItemCompraId)
                    .HasConstraintName("FK_ServisItem_OperacionItemProducto");

                entity.HasOne(d => d.ItemVenta)
                    .WithMany(p => p.ServisItemItemVenta)
                    .HasForeignKey(d => d.ItemVentaId)
                    .HasConstraintName("FK_ServisItem_OperacionItemProducto1");

                entity.HasOne(d => d.Servis)
                    .WithMany(p => p.ServisItem)
                    .HasForeignKey(d => d.ServisId)
                    .HasConstraintName("FK_ServisItem_Servis");
            });

            modelBuilder.Entity<ServisProcesos>(entity =>
            {
                entity.Property(e => e.AlmaUserId).HasComment("Operador q atendio");

                entity.Property(e => e.EstadoServisId).HasComment("Indica el Estado en el Momento *echa");

                entity.Property(e => e.RegEventoId).HasComment("Indico si genera un evento (Aviso Vinculado)");

                entity.Property(e => e.TipoProceso).HasComment("0-Cliente 1-La casa 2-Proveedor 4-Servicio Tecnico");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.ServisProcesos)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_ServisProcesos_Usuario");

                entity.HasOne(d => d.EstadoServis)
                    .WithMany(p => p.ServisProcesos)
                    .HasForeignKey(d => d.EstadoServisId)
                    .HasConstraintName("FK_ServisProcesos_ServisEstado");

                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.ServisProcesos)
                    .HasForeignKey(d => d.RegEventoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ServisProcesos_Evento");

                entity.HasOne(d => d.ServisItem)
                    .WithMany(p => p.ServisProcesos)
                    .HasForeignKey(d => d.ServisItemId)
                    .HasConstraintName("FK_ServisProcesos_ServisItem");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.ServisProcesos)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_ServisProcesos_Transporte");
            });

            modelBuilder.Entity<SincronizacionTerminal>(entity =>
            {
                entity.Property(e => e.TerminalId).ValueGeneratedNever();

                entity.Property(e => e.ClaveSupervisor).HasComment("Indico la clave a utilizar en este punto de venta para operaciones especiales");

                entity.Property(e => e.Pcsincroniza).HasComment("Indica el Nombre del equipo desde el que se tiene que realizar la sincronizacion (Ver opcion de resetear)");

                entity.Property(e => e.SqlconnectionAlmaNet).HasComment("Null, Utiliza la de SQLConexion con nombre de base datos AlmaNET");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.Property(e => e.TalonarioId).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TerminalTipoId).HasComment("Indica a donde apunta la conexion  0-Conexion Servidor 1-Conexion Terminal ");

                entity.Property(e => e.TipoControlSupervisor).HasComment("0-Sin Restriccione 1-Cuenta Corriente (limite Credito) 2-Descuento 4-Cambio Precios 8-Asignar precios(Venta Departamento) 16- Anular Ticket/Descuentos");

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.SincronizacionTerminal)
                    .HasForeignKey(d => d.EmpresaId)
                    .HasConstraintName("FK_SincronizacionTerminal_EmpresaDatos");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.SincronizacionTerminal)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_SincronizacionTerminal_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.SincronizacionTerminal)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_SincronizacionTerminal_Sucursal");
            });

            modelBuilder.Entity<Socios>(entity =>
            {
                entity.Property(e => e.SocioId)
                    .ValueGeneratedNever()
                    .HasComment("Nro. Socio");

                entity.Property(e => e.ClasificacionId).HasComment("Clasificacion asignada");

                entity.Property(e => e.EntidadSucId).HasComment("Sucursal a la q esta relacionada");

                entity.Property(e => e.FechaAlta).HasComment("Fecha en que se dio de Alta");

                entity.Property(e => e.Inhabilitado).HasComment("Indica si esta Inhabilitado");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Socios)
                    .HasForeignKey(d => d.ClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Socios_SociosClasificacion");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Socios)
                    .HasForeignKey<Socios>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Socios_EntidadSucursal");
            });

            modelBuilder.Entity<SociosClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SoporteAbono>(entity =>
            {
                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SoporteAbono)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_SoporteAbono_OperacionItemProducto");
            });

            modelBuilder.Entity<SoporteAbonoCasoTarea>(entity =>
            {
                entity.Property(e => e.SoporteAbonoTareaId).ValueGeneratedNever();

                entity.HasOne(d => d.SoporteAbono)
                    .WithMany(p => p.SoporteAbonoCasoTarea)
                    .HasForeignKey(d => d.SoporteAbonoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SoporteAbonoCasoTarea_SoporteAbono");

                entity.HasOne(d => d.Tarea)
                    .WithMany(p => p.SoporteAbonoCasoTarea)
                    .HasForeignKey(d => d.TareaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SoporteAbonoCasoTarea_SoporteCasoTarea");
            });

            modelBuilder.Entity<SoporteCaso>(entity =>
            {
                entity.Property(e => e.Activo).HasComment("Indica si esta actico el Caso");

                entity.Property(e => e.AgendarFecha).HasComment("FechaHora a relizar el soporte del Caso");

                entity.Property(e => e.AlmaUserId).HasComment("Usuario Sistema");

                entity.Property(e => e.ClienteId).HasComment("Cliente al que se factura");

                entity.Property(e => e.ConexionSopId).HasComment("ID COnexion sobre la que se dio Soporte");

                entity.Property(e => e.ContactoId).HasComment("Perosna q llama y presenta el Caso");

                entity.Property(e => e.DescripcionCorta).HasComment("Descripcion Corta del caso");

                entity.Property(e => e.DescripcionProblema).HasComment("Descripcion mensaje Error");

                entity.Property(e => e.EmailNotificacion).HasComment("e-mail a los que se tiene que notificar la evolucion del Caso");

                entity.Property(e => e.ErrorId).HasComment("Codigo de error q se visualiza");

                entity.Property(e => e.EstadoId).HasComment("Estado en que se encuentra el caso Abierto, En  Proceso, Transferido");

                entity.Property(e => e.EtapaId).HasComment("Etapa en la que se encuentra el Estado ejem. Reg Recla");

                entity.Property(e => e.FechaDeteccionCaso).HasComment("Fecha y hora desde que se presenta el problema");

                entity.Property(e => e.FechaHora).HasComment("Fecha y hora en que se registra");

                entity.Property(e => e.FormularioId).HasComment("Pantalla en la que se registra el Problema");

                entity.Property(e => e.IpActual).HasComment("Ip distinta a la q tiene por defecto el Cliente TeamViewer ID");

                entity.Property(e => e.Notificar).HasComment("Otras Personas a Notificar");

                entity.Property(e => e.PasosRepProblema).HasComment("Pasos para reproducir el Problema");

                entity.Property(e => e.QuienDetectaProblema).HasComment("Persona/Operador que detecto el problema");

                entity.Property(e => e.Telefono).HasComment("En caso que sea distinto a la del CLiente Ver Casos en q llama un vendedor");

                entity.Property(e => e.TipoCasoId).HasComment("(Soporte/Instalacion-Actualizacion)");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.SoporteCaso)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SoporteCaso_Cliente");

                entity.HasOne(d => d.Contacto)
                    .WithMany(p => p.SoporteCaso)
                    .HasForeignKey(d => d.ContactoId)
                    .HasConstraintName("FK_SoporteCaso_Contacto");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.SoporteCaso)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_SoporteCaso_SoporteCasoEstado");

                entity.HasOne(d => d.TipoCaso)
                    .WithMany(p => p.SoporteCaso)
                    .HasForeignKey(d => d.TipoCasoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SoporteCaso_SoporteCasoTipo");
            });

            modelBuilder.Entity<SoporteCasoEstado>(entity =>
            {
                entity.Property(e => e.EstadoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SoporteCasoTarea>(entity =>
            {
                entity.Property(e => e.AlmaUserId).HasComment("CONTINUAR -- Usuario Sistema");

                entity.Property(e => e.CantidadFacturado).HasComment("Indica la cantidad de min. facturado/CONSUMIDO (minimo y/o diferencia, Inicio y completado, en caso de no alcanzar minimo)");

                entity.Property(e => e.CodigoId).HasComment("Indica tipo concepto a facturar del Tecnico DeafultCodigoID o de la tabla SoporteTecnicoServicios");

                entity.Property(e => e.DescripcionResolucion).HasComment("Detalle Eventa");

                entity.Property(e => e.DescripcionTarea).IsFixedLength();

                entity.Property(e => e.EtapaId).HasComment("Indica la etapa a la que pertecece la tarea dentro del caso");

                entity.Property(e => e.FechaHoraAsigando).HasComment("Fecha estipulada / Agendada para comenzar");

                entity.Property(e => e.FechaHoraCompletado).HasComment("Fecha y hora en q se completo efectivamente");

                entity.Property(e => e.FechaHoraInicio).HasComment("Fecha q se comenzo a dar soporte efectivo");

                entity.Property(e => e.Filer).HasComment("Indico ID Registro Evento Calendar");

                entity.Property(e => e.ImporteNeto).HasComment("Importe neto (Sin impuesto del trabajo)");

                entity.Property(e => e.ItemId).HasComment("Item detalle Venta con el fue Facturado, Permite derterminar si fue facturado");

                entity.Property(e => e.PrioridadId).HasComment("Indicar de 1 a 10 (la prioridad del caso ) solo acceptar valores de 0 al 10");

                entity.Property(e => e.SeFactura).HasComment("Indica si la Tarea se factura (Para el caso de los abonados no Factura)");

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.Caso)
                    .WithMany(p => p.SoporteCasoTarea)
                    .HasForeignKey(d => d.CasoId)
                    .HasConstraintName("FK_SoporteCasoTarea_SoporteCaso");

                entity.HasOne(d => d.Etapa)
                    .WithMany(p => p.SoporteCasoTarea)
                    .HasForeignKey(d => d.EtapaId)
                    .HasConstraintName("FK_SoporteCasoTarea_SoporteTareasEtapas");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SoporteCasoTarea)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_SoporteCasoTarea_OperacionItemProducto");

                entity.HasOne(d => d.TecnicoSoporte)
                    .WithMany(p => p.SoporteCasoTarea)
                    .HasForeignKey(d => d.TecnicoSoporteId)
                    .HasConstraintName("FK_SoporteCasoTarea_SoporteTecnico");
            });

            modelBuilder.Entity<SoporteCasoTipo>(entity =>
            {
                entity.Property(e => e.TipoCasoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SoporteClienteConecxion>(entity =>
            {
                entity.Property(e => e.IpConexion).HasComment("Indica la COnexion, Escritorio Remoto, IP y/o Teamviewer (Ver Formato), R:");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.SoporteClienteConecxion)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_SoporteClienteConecxion_Cliente");
            });

            modelBuilder.Entity<SoporteTareasEtapas>(entity =>
            {
                entity.Property(e => e.EtapaId).ValueGeneratedNever();

                entity.Property(e => e.Abreviatura).IsFixedLength();
            });

            modelBuilder.Entity<SoporteTecnico>(entity =>
            {
                entity.Property(e => e.TecnicoSoporteId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo a utilizar como tecnico de Soporte");

                entity.Property(e => e.DeafultCodigoId).HasComment("Indico por defecto cual es el servicio q mas realiza");

                entity.Property(e => e.DenominacionAdicionel)
                    .IsFixedLength()
                    .HasComment("Adicional al nombre de la entidad");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.SoporteTecnico)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_SoporteTecnico_Empleado");
            });

            modelBuilder.Entity<SoporteTecnicoServicios>(entity =>
            {
                entity.Property(e => e.TecnicoSoporteId).HasComment("Codigo a utilizar como tecnico de Soporte");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.SoporteTecnicoServicios)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_SoporteTecnicoServicios_Producto");

                entity.HasOne(d => d.TecnicoSoporte)
                    .WithMany(p => p.SoporteTecnicoServicios)
                    .HasForeignKey(d => d.TecnicoSoporteId)
                    .HasConstraintName("FK_SoporteTecnicoServicios_SoporteTecnico");
            });

            modelBuilder.Entity<Sucursal>(entity =>
            {
                entity.Property(e => e.SucursalId)
                    .ValueGeneratedNever()
                    .HasComment("N° de Sucursal");

                entity.Property(e => e.CiudadId).HasComment("Codigo Ciudad Mediante la cual tambien se optiene Provincia y Pais al que pertenece el Domicilio");

                entity.Property(e => e.DescripcionSucursal).HasComment("Denominacion de la Sucursal");

                entity.Property(e => e.EmpresaId).HasComment("EmpresaID  Vinculada para la sincronizacion en la Centralizadora");

                entity.Property(e => e.PorcentCredito).HasComment("Indica el Porcentaje del Credito que tiene asigando el cliente q puede tomar en esta sucursal (Arbol Real)");

                entity.Property(e => e.ProductoUbicacionId).HasComment("Codigo Q determina la Ubicacion de un Producto en el Deposito");

                entity.Property(e => e.RepiteProductoOtraUbicacion).HasComment("Indica q el producto puede tener mas de una ubicacion de stock");

                entity.HasOne(d => d.ProductoUbicacion)
                    .WithMany(p => p.Sucursal)
                    .HasForeignKey(d => d.ProductoUbicacionId)
                    .HasConstraintName("FK_Sucursal_ProductoUbicacion");
            });

            modelBuilder.Entity<Supervisor>(entity =>
            {
                entity.HasComment("Supervisor de Ventas (Tienen asignado el Control y supervicion de las Ventas por parte de los Vendedores)");

                entity.Property(e => e.SupervisorId).ValueGeneratedNever();

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Supervisor)
                    .HasForeignKey<Supervisor>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Supervisor_EntidadSucursal");
            });

            modelBuilder.Entity<SupervisorVendedor>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Supervisor)
                    .WithMany(p => p.SupervisorVendedor)
                    .HasForeignKey(d => d.SupervisorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupervisorVendedor_Supervisor");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.SupervisorVendedor)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_SupervisorVendedor_Vendedor");
            });

            modelBuilder.Entity<TableDb>(entity =>
            {
                entity.HasKey(e => e.TableId)
                    .HasName("PK_Tablas");

                entity.Property(e => e.TableId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Transporte>(entity =>
            {
                entity.Property(e => e.TransporteId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo de trasnporte");

                entity.Property(e => e.CodigoInternacional).HasComment("Codigo transporte internacional");

                entity.Property(e => e.EntidadSucId).HasComment("Entidad Sucursal a la q relaciona");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.TransporteNavigation)
                    .HasForeignKey<Transporte>(d => d.EntidadSucId)
                    .HasConstraintName("FK_EntidadTransporte_EntidadSucursal");

                entity.HasOne(d => d.TranspClasificacion)
                    .WithMany(p => p.Transporte)
                    .HasForeignKey(d => d.TranspClasificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Transporte_TransporteClasificacion");
            });

            modelBuilder.Entity<TransporteAduana>(entity =>
            {
                entity.Property(e => e.AduanaId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteAutorizacionCarga>(entity =>
            {
                entity.HasKey(e => e.AutoizacionCargaId)
                    .HasName("PK_OrdenCarga");

                entity.Property(e => e.AutoizacionCargaId).ValueGeneratedNever();

                entity.Property(e => e.PeriodoAño).HasComment("Año del Período en el cuál se imputará la autorización");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.TipoCargaId).HasComment("Codio tipo Carga q puede Trasnportar");

                entity.HasOne(d => d.Camion)
                    .WithMany(p => p.TransporteAutorizacionCargaCamion)
                    .HasForeignKey(d => d.CamionId)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteVehiculo1");

                entity.HasOne(d => d.ChasisAcop)
                    .WithMany(p => p.TransporteAutorizacionCargaChasisAcop)
                    .HasForeignKey(d => d.ChasisAcopId)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteVehiculo");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteConductor");

                entity.HasOne(d => d.Destino)
                    .WithMany(p => p.TransporteAutorizacionCargaDestino)
                    .HasForeignKey(d => d.DestinoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteOrigenDestino1");

                entity.HasOne(d => d.Operador)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.OperadorId)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_Usuario");

                entity.HasOne(d => d.Origen)
                    .WithMany(p => p.TransporteAutorizacionCargaOrigen)
                    .HasForeignKey(d => d.OrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteOrigenDestino");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_Sucursal");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteTipoCarga");

                entity.HasOne(d => d.TransporteUnidad)
                    .WithMany(p => p.TransporteAutorizacionCarga)
                    .HasForeignKey(d => d.TransporteUnidadId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCarga_TransporteUnidad");
            });

            modelBuilder.Entity<TransporteAutorizacionCargaDetalle>(entity =>
            {
                entity.HasKey(e => e.AutorizDetalleId)
                    .HasName("PK_AutorizacionCargaDetalle");

                entity.Property(e => e.AutorizDetalleId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_Usuario");

                entity.HasOne(d => d.AutoizacionCarga)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.AutoizacionCargaId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteAutorizacionCarga");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteConductor");

                entity.HasOne(d => d.Destinol)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalleDestinol)
                    .HasForeignKey(d => d.DestinolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteOrigenDestino1");

                entity.HasOne(d => d.LiquidacionChofer)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.LiquidacionChoferId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteCargaLiquidacion");

                entity.HasOne(d => d.Origen)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalleOrigen)
                    .HasForeignKey(d => d.OrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteOrigenDestino");

                entity.HasOne(d => d.TraspViaje)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.TraspViajeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteViaje");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalle)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalle_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteAutorizacionCargaDetalleTransporteCarga>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.AutorizDetalle)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalleTransporteCarga)
                    .HasForeignKey(d => d.AutorizDetalleId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalleTransporteCarga_TransporteAutorizacionCargaDetalle");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalleTransporteCarga)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalleTransporteCarga_ProductoListaPrecio");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransporteAutorizacionCargaDetalleTransporteCarga)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteAutorizacionCargaDetalleTransporteCarga_TransporteCarga");
            });

            modelBuilder.Entity<TransporteAutorizacionRemito>(entity =>
            {
                entity.Property(e => e.TrasnpRemitoId).ValueGeneratedNever();

                entity.HasOne(d => d.AutorizDetalle)
                    .WithMany(p => p.TransporteAutorizacionRemito)
                    .HasForeignKey(d => d.AutorizDetalleId)
                    .HasConstraintName("FK_TransporteAutorizacionRemito_TransporteAutorizacionCargaDetalle");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TransporteAutorizacionRemito)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_TransporteAutorizacionRemito_OperacionItemProducto");

                entity.HasOne(d => d.Registro)
                    .WithMany(p => p.TransporteAutorizacionRemito)
                    .HasForeignKey(d => d.RegistroId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteAutorizacionRemito_TransporteAutorizacionCargaDetalleTransporteCarga1");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransporteAutorizacionRemito)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .HasConstraintName("FK_TransporteAutorizacionRemito_TransporteCarga");
            });

            modelBuilder.Entity<TransporteCapacidad>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.TransporteCapacidad)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_TransporteCapacidad_Transporte");
            });

            modelBuilder.Entity<TransporteCarga>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.CargaId });

                entity.HasComment("Aca se registran las guias");

                entity.Property(e => e.CargaId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro De Guia");

                entity.Property(e => e.AlmaUserIdanulo).HasComment("Usuario q anulo la Guia");

                entity.Property(e => e.DetalleAnulacion).HasComment("Referencia sobre la anulacion");

                entity.Property(e => e.FechaAnulacion).HasComment("Indica la Fecha y hora en la que fue anulado");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCargaAlmaUser)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteCarga_Usuario");

                entity.HasOne(d => d.AlmaUserIdanuloNavigation)
                    .WithMany(p => p.TransporteCargaAlmaUserIdanuloNavigation)
                    .HasForeignKey(d => d.AlmaUserIdanulo)
                    .HasConstraintName("FK_TransporteCarga_Usuario1");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_TransporteCarga_Cliente");

                entity.HasOne(d => d.DepositoIdingresaNavigation)
                    .WithMany(p => p.TransporteCargaDepositoIdingresaNavigation)
                    .HasForeignKey(d => d.DepositoIdingresa)
                    .HasConstraintName("FK_TransporteCarga_Deposito1");

                entity.HasOne(d => d.DepositoIdsaleNavigation)
                    .WithMany(p => p.TransporteCargaDepositoIdsaleNavigation)
                    .HasForeignKey(d => d.DepositoIdsale)
                    .HasConstraintName("FK_TransporteCarga_Deposito");

                entity.HasOne(d => d.Destino)
                    .WithMany(p => p.TransporteCargaDestino)
                    .HasForeignKey(d => d.DestinoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCarga_TransporteOrigenDestino1");

                entity.HasOne(d => d.EntidadSucIddestinoNavigation)
                    .WithMany(p => p.TransporteCargaEntidadSucIddestinoNavigation)
                    .HasForeignKey(d => d.EntidadSucIddestino)
                    .HasConstraintName("FK_TransporteCarga_EntidadSucursal1");

                entity.HasOne(d => d.EntidadSucIdorigenNavigation)
                    .WithMany(p => p.TransporteCargaEntidadSucIdorigenNavigation)
                    .HasForeignKey(d => d.EntidadSucIdorigen)
                    .HasConstraintName("FK_TransporteCarga_EntidadSucursal");

                entity.HasOne(d => d.EstadoCarga)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.EstadoCargaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCarga_TransporteCargaEstado");

                entity.HasOne(d => d.FacturaEstado)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.FacturaEstadoId)
                    .HasConstraintName("FK_TransporteCarga_TransporteCargaEstadoFactura");

                entity.HasOne(d => d.FleteEstado)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.FleteEstadoId)
                    .HasConstraintName("FK_TransporteCarga_TransporteCargaEstadoFlete");

                entity.HasOne(d => d.Origen)
                    .WithMany(p => p.TransporteCargaOrigen)
                    .HasForeignKey(d => d.OrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCarga_TransporteOrigenDestino");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCarga_ProductoListaPrecio");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteCarga_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteCarga_Sucursal");

                entity.HasOne(d => d.TraspViaje)
                    .WithMany(p => p.TransporteCarga)
                    .HasForeignKey(d => d.TraspViajeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCarga_TransporteViaje");
            });

            modelBuilder.Entity<TransporteCargaAdicionales>(entity =>
            {
                entity.HasKey(e => e.IdconceptoCarga)
                    .HasName("PK_ConceptosAdicionalesCarga");

                entity.Property(e => e.IdconceptoCarga).ValueGeneratedNever();

                entity.HasOne(d => d.ProductoPresentacion)
                    .WithMany(p => p.TransporteCargaAdicionales)
                    .HasForeignKey(d => d.ProductoPresentacionId)
                    .HasConstraintName("FK_ConceptosAdicionalesCarga_ProductoPresentacion");
            });

            modelBuilder.Entity<TransporteCargaCierrePeriodo>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.Modulos).HasComment("Módulos al cual se realiza la cierre del Período (0:Viajes - 1:Operaciones - etc.)");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCargaCierrePeriodo)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodo_Usuario");
            });

            modelBuilder.Entity<TransporteCargaCierrePeriodoDetalle>(entity =>
            {
                entity.Property(e => e.RegistroDetalleId).ValueGeneratedNever();

                entity.HasOne(d => d.CierreVehiculo)
                    .WithMany(p => p.TransporteCargaCierrePeriodoDetalle)
                    .HasForeignKey(d => d.CierreVehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoDetalle_TransporteCargaCierrePeriodoVehiculos");

                entity.HasOne(d => d.Cuenta)
                    .WithMany(p => p.TransporteCargaCierrePeriodoDetalle)
                    .HasForeignKey(d => d.CuentaId)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoDetalle_PlanDeCuenta");
            });

            modelBuilder.Entity<TransporteCargaCierrePeriodoTipoCarga>(entity =>
            {
                entity.Property(e => e.DetalleId).ValueGeneratedNever();

                entity.HasOne(d => d.Registro)
                    .WithMany(p => p.TransporteCargaCierrePeriodoTipoCarga)
                    .HasForeignKey(d => d.RegistroId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoTipoCarga_TransporteCargaCierrePeriodo");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteCargaCierrePeriodoTipoCarga)
                    .HasForeignKey(d => d.TipoCargaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoTipoCarga_TransporteTipoCarga");
            });

            modelBuilder.Entity<TransporteCargaCierrePeriodoVehiculos>(entity =>
            {
                entity.Property(e => e.CierreVehiculoId).ValueGeneratedNever();

                entity.HasOne(d => d.Registro)
                    .WithMany(p => p.TransporteCargaCierrePeriodoVehiculos)
                    .HasForeignKey(d => d.RegistroId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoVehiculos_TransporteCargaCierrePeriodo");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCargaCierrePeriodoVehiculos)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaCierrePeriodoVehiculos_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCargaConceptosAdicionales>(entity =>
            {
                entity.HasOne(d => d.FacturaEstado)
                    .WithMany(p => p.TransporteCargaConceptosAdicionales)
                    .HasForeignKey(d => d.FacturaEstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConceptosAdicionales_TransporteCargaEstadoFactura");

                entity.HasOne(d => d.IdconceptoCargaNavigation)
                    .WithMany(p => p.TransporteCargaConceptosAdicionales)
                    .HasForeignKey(d => d.IdconceptoCarga)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConceptosAdicionales_ConceptosAdicionalesCarga");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransporteCargaConceptosAdicionales)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .HasConstraintName("FK_TransporteCargaConceptosAdicionales_TransporteCarga");
            });

            modelBuilder.Entity<TransporteCargaConvencionColectivo>(entity =>
            {
                entity.Property(e => e.ConvColectivoId).ValueGeneratedNever();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCargaConvencionColectivo)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConvencionColectivo_Usuario");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteCargaConvencionColectivo)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConvencionColectivo_TransporteConductor");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.TransporteCargaConvencionColectivo)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConvencionColectivo_Sector");
            });

            modelBuilder.Entity<TransporteCargaConvenioColectivoDetalle>(entity =>
            {
                entity.Property(e => e.ConvColectivoDetalleId).ValueGeneratedNever();

                entity.HasOne(d => d.AutorizDetalle)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalle)
                    .HasForeignKey(d => d.AutorizDetalleId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteAutorizacionCargaDetalle");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalle)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_Producto");

                entity.HasOne(d => d.ConvColectivo)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalle)
                    .HasForeignKey(d => d.ConvColectivoId)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteCargaConvencionColectivo");

                entity.HasOne(d => d.Destinol)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalleDestinol)
                    .HasForeignKey(d => d.DestinolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteOrigenDestino1");

                entity.HasOne(d => d.Origen)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalleOrigen)
                    .HasForeignKey(d => d.OrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteOrigenDestino");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalle)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteTipoCarga");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCargaConvenioColectivoDetalle)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteCargaConvenioColectivoDetalle_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCargaEstado>(entity =>
            {
                entity.Property(e => e.EstadoCargaId)
                    .ValueGeneratedNever()
                    .HasComment("Indica el estado en q esta Una carga (ARetirar, En viaje, Completado, Facturado etc.)");

                entity.Property(e => e.DisponibleAutorizacion).HasComment("Indica si los registros en dicho estado quedan disponibles para ser asignados en las autorizaciones");
            });

            modelBuilder.Entity<TransporteCargaEstadoFactura>(entity =>
            {
                entity.Property(e => e.FacturaEstadoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCargaEstadoFlete>(entity =>
            {
                entity.Property(e => e.FleteEstadoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCargaLiquidacion>(entity =>
            {
                entity.HasComment("Contiene las Liquidaciones realizadas a los Choferes");

                entity.Property(e => e.LiquidacionChoferId)
                    .ValueGeneratedNever()
                    .HasComment("Nro ID de liquidacion");

                entity.Property(e => e.ComprobateId).HasComment("Tipo de Comprobante");

                entity.Property(e => e.ConductorId).HasComment("Chofer al q se le confecciona la Liquidacion");

                entity.Property(e => e.FechaDesde).HasComment("Periodo de la Liquidacion DESDE Fecha");

                entity.Property(e => e.FechaHasta).HasComment("Periodo de la Liquidacion HASTA Fecha");

                entity.Property(e => e.FechaYhora).HasComment("Fecha y Hora en q se confecciono la Liquidacion");

                entity.Property(e => e.Observacion).HasComment("Detalle referido a la Liquidacion");

                entity.Property(e => e.PlanillaNro).HasComment("Nro Planilla- Comprobante");
            });

            modelBuilder.Entity<TransporteCargaMovimiento>(entity =>
            {
                entity.Property(e => e.MovId).HasComment("Nro Reparto Planilla de Carga");

                entity.Property(e => e.Descripcion).HasComment("Detalle Reparto");

                entity.Property(e => e.EstadoId).HasComment("0-Cerrado 1-En Proceso 100-No vinculante");

                entity.Property(e => e.FechaRegreso).HasComment("Indica la fecha y hora de regreso del reparto al deposito");

                entity.Property(e => e.ImpCobrado).HasComment("Importe de ventas Cobradas");

                entity.Property(e => e.ImpCobroAnterior).HasComment("Importes de las ventas q fueron cobradas antes de las rendicion del reparto (Ventas se llevaron pero que ya estaban cobradas)");

                entity.Property(e => e.ImpCobrosImpu).HasComment("Importe de Cobros por Imputaciones (Importes q se entrego al repartidor para gastos, y otros)");

                entity.Property(e => e.ImpCtaCte).HasComment("Importe de las ventas q se entregaron pero no se cobraron, quedaron en la cta. Corriente del Ciente");

                entity.Property(e => e.ImpDevolucion).HasComment("Importe de las Ventas Devueltas (Suma de las Notas de credito)");

                entity.Property(e => e.ImpGastos).HasComment("Importe de Gastos/Compras que se cargaron a este reparto");

                entity.Property(e => e.ImpPagosImpu).HasComment("Importe por pagos imputaciones , Pases de caja ");

                entity.Property(e => e.ImpPendiente).HasComment("Importe de las ventas q se dejan como pendiente de entrega para el proximo reparto");

                entity.Property(e => e.ImpRendir).HasComment("Indico si hubieran diferencias pendientes ");

                entity.Property(e => e.ImpVentas).HasComment("Importe de las Vents de este Reparto");

                entity.Property(e => e.ImpoOtrosCobro).HasComment("Importes de otros cobros (Ventas q no corresponden a este reparto o de Adelantos)");

                entity.Property(e => e.MovTipo).HasComment("");

                entity.Property(e => e.TipoOperacionId).HasComment("De AlmaNet.OperacionTip, 60-Rendicion de Caja 70- Rendicion Reparto");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaMovimiento_Usuario");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteCargaMovimiento_TransporteConductor");

                entity.HasOne(d => d.DepositoIdsaleNavigation)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.DepositoIdsale)
                    .HasConstraintName("FK_TransporteCargaMovimiento_Deposito");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteCargaMovimiento_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteCargaMovimiento_Sucursal");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteCargaMovimiento_TransporteVehiculo");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.TransporteCargaMovimiento)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_TransporteCargaMovimiento_Vendedor");
            });

            modelBuilder.Entity<TransporteCargaMovimientoDetalle>(entity =>
            {
                entity.HasOne(d => d.AlmaUserIdingresaNavigation)
                    .WithMany(p => p.TransporteCargaMovimientoDetalleAlmaUserIdingresaNavigation)
                    .HasForeignKey(d => d.AlmaUserIdingresa)
                    .HasConstraintName("FK_TransporteCargaMovimientoDetalle_Usuario1");

                entity.HasOne(d => d.AlmaUserIdsaleNavigation)
                    .WithMany(p => p.TransporteCargaMovimientoDetalleAlmaUserIdsaleNavigation)
                    .HasForeignKey(d => d.AlmaUserIdsale)
                    .HasConstraintName("FK_TransporteCargaMovimientoDetalle_Usuario");

                entity.HasOne(d => d.MovDestino)
                    .WithMany(p => p.TransporteCargaMovimientoDetalle)
                    .HasForeignKey(d => d.MovDestinoId)
                    .HasConstraintName("FK_TransporteCargaMovimientoDetalle_TransporteMovimientoDestino");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransporteCargaMovimientoDetalle)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCargaMovimientoDetalle_TransporteCarga");
            });

            modelBuilder.Entity<TransporteCargaValorComercialTipo>(entity =>
            {
                entity.Property(e => e.ValorComercialTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteClaseBultos>(entity =>
            {
                entity.Property(e => e.IdclaseBultos).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteClasificacion>(entity =>
            {
                entity.Property(e => e.TranspClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCombustibleConsumoConductor>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCombustibleConsumoConductor)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleConsumoConductor_Usuario");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteCombustibleConsumoConductor)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleConsumoConductor_TransporteConductor");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteCombustibleConsumoConductor)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteCombustibleConsumoConductor_TransporteTipoCarga");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCombustibleConsumoConductor)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleConsumoConductor_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCombustibleConsumoVehiculo>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCombustibleConsumoVehiculo)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleConsumoVehiculo_Usuario");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteCombustibleConsumoVehiculo)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteCombustibleConsumoVehiculo_TransporteTipoCarga");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCombustibleConsumoVehiculo)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleConsumoVehiculo_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCombustibleImputacion>(entity =>
            {
                entity.Property(e => e.RegistroImputacion).HasComment("Registro de Imputacion");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteCombustibleImputacion)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteCombustibleImputacion_TransporteConductor");

                entity.HasOne(d => d.RegistroImputacionNavigation)
                    .WithMany(p => p.TransporteCombustibleImputacion)
                    .HasForeignKey(d => d.RegistroImputacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCombustibleImputacion_OperacionImputacion");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCombustibleImputacion)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteCombustibleImputacion_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCombustibleRuteo>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_CombustibleRuteo");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteCombustibleRuteo)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteCombustibleRuteo_Usuario");

                entity.HasOne(d => d.AutorizDetalle)
                    .WithMany(p => p.TransporteCombustibleRuteo)
                    .HasForeignKey(d => d.AutorizDetalleId)
                    .HasConstraintName("FK_TransporteCombustibleRuteo_TransporteAutorizacionCargaDetalle");

                entity.HasOne(d => d.RegistroCargComb)
                    .WithMany(p => p.TransporteCombustibleRuteo)
                    .HasForeignKey(d => d.RegistroCargCombId)
                    .HasConstraintName("FK_TransporteCombustibleRuteo_TransporteCombustibleImputacion");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteCombustibleRuteo)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteCombustibleRuteo_TransporteTipoCarga");
            });

            modelBuilder.Entity<TransporteConductor>(entity =>
            {
                entity.Property(e => e.ConductorId)
                    .ValueGeneratedNever()
                    .HasComment("Nro de Conductor/Chofer");

                entity.Property(e => e.EnteCarnetIdCond).HasComment("Ente Otorgador del Carnet de Conducir");

                entity.Property(e => e.EnteCarnetIdLib).HasComment("Ente otorgador de la Libreta de Sanidad");

                entity.Property(e => e.LibretaSanidadNro).HasComment("Nro de la Libreta de Sanidad.");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.TransporteConductor)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_TransporteConductor_Empleados");

                entity.HasOne(d => d.EnteCarnetIdCondNavigation)
                    .WithMany(p => p.TransporteConductorEnteCarnetIdCondNavigation)
                    .HasForeignKey(d => d.EnteCarnetIdCond)
                    .HasConstraintName("FK_TransporteConductor_TransporteConductorEnteCarnet");

                entity.HasOne(d => d.EnteCarnetIdLibNavigation)
                    .WithMany(p => p.TransporteConductorEnteCarnetIdLibNavigation)
                    .HasForeignKey(d => d.EnteCarnetIdLib)
                    .HasConstraintName("FK_TransporteConductor_TransporteConductorEnteCarnet1");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.TransporteConductor)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_TransporteConductor_Transporte");
            });

            modelBuilder.Entity<TransporteConductorEnteCarnet>(entity =>
            {
                entity.Property(e => e.EnteCarnetId).ValueGeneratedNever();

                entity.Property(e => e.Ubicacion).IsFixedLength();
            });

            modelBuilder.Entity<TransporteContrareembolso>(entity =>
            {
                entity.HasComment("Se lleva un registro de todos los cotra reembolsos");

                entity.Property(e => e.ContraReembolsoId).HasComment("ID registro contrareembolso");

                entity.Property(e => e.ClienteId).HasComment("Nro Cliente al que se cobra el Contrareembolso");

                entity.Property(e => e.CobroId).HasComment("Nro Imputacion del COBRO");

                entity.Property(e => e.Comprobante).HasComment("Comprobante con el q se cobro");

                entity.Property(e => e.Importe).HasComment("Indico el Importe Cobrado de Contrareembolso");

                entity.Property(e => e.MovId).HasComment("Nro Reparto Planilla de Carga");

                entity.Property(e => e.PagoId).HasComment("Nro Pago con el que se pago al remitente el contrareembolso");

                entity.Property(e => e.PocComision).HasComment("Indico el pocentaje q se cobra por el servicio de contrareembolso, aplica para el caluclo de TransporteRemito.ImporteCReembolso");

                entity.Property(e => e.ProveedorId).HasComment("Indico a quien le realizo la liquidacion (al mismo cliente asignado en el remtito, busco sobre esa entidadSucursal el Proveedor");

                entity.Property(e => e.RemitoId).HasComment("Nro Registro Remito/Guia");

                entity.Property(e => e.TipoOperacionIdcobro).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.TipoOperacionIdpago).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.TipoOperacionIdremito).HasComment("Tipo Movimiento al que pertenece (transporte Remito)");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_TransporteContrareembolso_Cliente");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_TransporteContrareembolso_TransporteCargaMovimiento");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteContrareembolso_Proveedor");

                entity.HasOne(d => d.OperacionCobro)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => new { d.TipoOperacionIdcobro, d.CobroId })
                    .HasConstraintName("FK_TransporteContrareembolso_OperacionCobro");

                entity.HasOne(d => d.OperacionPago)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => new { d.TipoOperacionIdpago, d.PagoId })
                    .HasConstraintName("FK_TransporteContrareembolso_OperacionPago");

                entity.HasOne(d => d.TransporteRemitos)
                    .WithMany(p => p.TransporteContrareembolso)
                    .HasForeignKey(d => new { d.TipoOperacionIdremito, d.RemitoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteContrareembolso_TransporteRemito");
            });

            modelBuilder.Entity<TransporteCrt>(entity =>
            {
                entity.Property(e => e.CrtId).ValueGeneratedNever();

                entity.HasOne(d => d.C11idclaseBultosNavigation)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => d.C11idclaseBultos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCRT_TransporteClaseBultos");

                entity.HasOne(d => d.C14valorComercialTipo)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => d.C14valorComercialTipoId)
                    .HasConstraintName("FK_TransporteCRT_TransporteCargaValorComercialTipo");

                entity.HasOne(d => d.C15clienteIddestinoNavigation)
                    .WithMany(p => p.TransporteCrtC15clienteIddestinoNavigation)
                    .HasForeignKey(d => d.C15clienteIddestino)
                    .HasConstraintName("FK_TransporteCRT_Cliente1");

                entity.HasOne(d => d.C15clienteIdorigenNavigation)
                    .WithMany(p => p.TransporteCrtC15clienteIdorigenNavigation)
                    .HasForeignKey(d => d.C15clienteIdorigen)
                    .HasConstraintName("FK_TransporteCRT_Cliente");

                entity.HasOne(d => d.C2crtmic)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => d.C2crtmicid)
                    .HasConstraintName("FK_TransporteCRT_PermisoEmpresaNroCRTMIC");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteCRT_Sucursal");

                entity.HasOne(d => d.TransporteCrtestado)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => d.TransporteCrtestadoId)
                    .HasConstraintName("FK_TransporteCRT_TransporteCRTEstado");

                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransporteCrt)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .HasConstraintName("FK_TransporteCRT_TransporteCarga");
            });

            modelBuilder.Entity<TransporteCrtestado>(entity =>
            {
                entity.Property(e => e.TransporteCrtestadoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCrtviajes>(entity =>
            {
                entity.Property(e => e.CrtviajesId).ValueGeneratedNever();

                entity.HasOne(d => d.Crt)
                    .WithMany(p => p.TransporteCrtviajes)
                    .HasForeignKey(d => d.CrtId)
                    .HasConstraintName("FK_TransporteCRTViajes_TransporteCRT");

                entity.HasOne(d => d.Destino)
                    .WithMany(p => p.TransporteCrtviajesDestino)
                    .HasForeignKey(d => d.DestinoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCRTViajes_TransporteOrigenDestino1");

                entity.HasOne(d => d.Origen)
                    .WithMany(p => p.TransporteCrtviajesOrigen)
                    .HasForeignKey(d => d.OrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteCRTViajes_TransporteOrigenDestino");
            });

            modelBuilder.Entity<TransporteCubierta>(entity =>
            {
                entity.Property(e => e.CubiertaId).ValueGeneratedNever();

                entity.Property(e => e.CodigoId).HasComment("Producto Relacionado");

                entity.Property(e => e.CondicionCubiertaId).HasComment("de AlmaNET TransporteCubiertaCondicion");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.Property(e => e.DiseñoCubiertaId).HasComment("de AlmaNET TransporteCubiertaDiseño");

                entity.Property(e => e.EstadoCubiertaId).HasComment("de AlmaNET TransporteCubiertaEstado");

                entity.Property(e => e.MedidaCubiertaId).HasComment("de AlmaNET TransporteCubiertaMedida");

                entity.Property(e => e.UbicacionId).HasComment("Ubicación Actual - Eje3_Der_2 ,Recambio1");

                entity.Property(e => e.VehiculoId).HasComment("Vehículo Actual");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_TransporteCubierta_Producto");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.DepositoId)
                    .HasConstraintName("FK_TransporteCubierta_Deposito");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_TransporteCubierta_Proveedor");

                entity.HasOne(d => d.TransporteCubiertaTipo)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.TransporteCubiertaTipoId)
                    .HasConstraintName("FK_TransporteCubierta_TransporteCubiertaTipo");

                entity.HasOne(d => d.Ubicacion)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.UbicacionId)
                    .HasConstraintName("FK_TransporteCubierta_TransporteCubiertaUbicacion");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteCubierta)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteCubierta_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteCubiertaMovimientoDetalle>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_TransporteCubiertaMovimientoDetalle_1");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CondicionCubiertaId).HasComment("de AlmaNET TransporteCubiertaCondicion");

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito");

                entity.Property(e => e.EstadoCubiertaId).HasComment("de AlmaNET TransporteCubiertaEstado");

                entity.Property(e => e.UbicacionAnteriorId).HasComment("ndica de donde se saco la cubierta en caso de rotacion");

                entity.Property(e => e.VehiculoId).HasComment("Vehículo");

                entity.HasOne(d => d.Cubierta)
                    .WithMany(p => p.TransporteCubiertaMovimientoDetalle)
                    .HasForeignKey(d => d.CubiertaId)
                    .HasConstraintName("FK_TransporteCubiertaMovimientoDetalle_TransporteCubierta");

                entity.HasOne(d => d.TransporteCubiertaTipo)
                    .WithMany(p => p.TransporteCubiertaMovimientoDetalle)
                    .HasForeignKey(d => d.TransporteCubiertaTipoId)
                    .HasConstraintName("FK_TransporteCubiertaMovimientoDetalle_TransporteCubiertaTipo");

                entity.HasOne(d => d.UbicacionAnterior)
                    .WithMany(p => p.TransporteCubiertaMovimientoDetalle)
                    .HasForeignKey(d => d.UbicacionAnteriorId)
                    .HasConstraintName("FK_TransporteCubiertaMovimientoDetalle_TransporteCubiertaUbicacion");
            });

            modelBuilder.Entity<TransporteCubiertaTipo>(entity =>
            {
                entity.Property(e => e.TransporteCubiertaTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteCubiertaUbicacion>(entity =>
            {
                entity.HasComment("Indical la Ubicacion Actual de cada Cubierta");

                entity.Property(e => e.UbicacionId).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).HasComment("Descripcion Ubicacion Eje3_Der_2 ,Recambio1");
            });

            modelBuilder.Entity<TransporteMandado>(entity =>
            {
                entity.Property(e => e.MandadoId).ValueGeneratedNever();

                entity.Property(e => e.Distancia).IsFixedLength();

                entity.Property(e => e.PaqueteId).IsFixedLength();

                entity.Property(e => e.ProductoAlto).IsFixedLength();

                entity.Property(e => e.ProductoAncho).IsFixedLength();

                entity.Property(e => e.ProductoPeso).IsFixedLength();

                entity.Property(e => e.ProductoProfundidad).IsFixedLength();

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteMandado)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteMandado_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.TransporteMandado)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_TransporteMandado_Cliente");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteMandado)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteMandado_TransporteConductor");

                entity.HasOne(d => d.EntidadSucIdconsNavigation)
                    .WithMany(p => p.TransporteMandadoEntidadSucIdconsNavigation)
                    .HasForeignKey(d => d.EntidadSucIdcons)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursal");

                entity.HasOne(d => d.EntidadSucIdremNavigation)
                    .WithMany(p => p.TransporteMandadoEntidadSucIdremNavigation)
                    .HasForeignKey(d => d.EntidadSucIdrem)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursal1");

                entity.HasOne(d => d.RegistroDomicilioIdconsNavigation)
                    .WithMany(p => p.TransporteMandadoRegistroDomicilioIdconsNavigation)
                    .HasForeignKey(d => d.RegistroDomicilioIdcons)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursalDomicilio");

                entity.HasOne(d => d.RegistroDomicilioIdremNavigation)
                    .WithMany(p => p.TransporteMandadoRegistroDomicilioIdremNavigation)
                    .HasForeignKey(d => d.RegistroDomicilioIdrem)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursalDomicilio1");

                entity.HasOne(d => d.RegistroTelefonoIdconsNavigation)
                    .WithMany(p => p.TransporteMandadoRegistroTelefonoIdconsNavigation)
                    .HasForeignKey(d => d.RegistroTelefonoIdcons)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursalTelefono");

                entity.HasOne(d => d.RegistroTelefonoIdremNavigation)
                    .WithMany(p => p.TransporteMandadoRegistroTelefonoIdremNavigation)
                    .HasForeignKey(d => d.RegistroTelefonoIdrem)
                    .HasConstraintName("FK_TransporteMandado_EntidadSucursalTelefono1");

                entity.HasOne(d => d.VehiculoIdretiraNavigation)
                    .WithMany(p => p.TransporteMandado)
                    .HasForeignKey(d => d.VehiculoIdretira)
                    .HasConstraintName("FK_TransporteMandado_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteMantenimiento>(entity =>
            {
                entity.Property(e => e.MantenimientoId).ValueGeneratedNever();

                entity.Property(e => e.MantenimientoTipoId).HasComment("Proviene de AlmaNET OrdenServicioMantenimientoTipo (Periodico o por Cantidad)");
            });

            modelBuilder.Entity<TransporteMantenimientoDetalle>(entity =>
            {
                entity.HasKey(e => e.ItemMantenimientoId)
                    .HasName("PK_OrdenServicioMantenimiento");

                entity.HasComment("Indica si el Codigo de Servico se Utiliza para la generacion de Mantenimientos Preventivos (Ejm. Codigo. Cambio Aceite), requiere un mantenimiento Preventivo cada 10mil Km.");

                entity.Property(e => e.ItemMantenimientoId)
                    .ValueGeneratedNever()
                    .HasComment("Indica El Codigo de Servicio q corresponde al mantenimineto");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.TransporteMantenimientoDetalle)
                    .HasForeignKey(d => d.CodigoId)
                    .HasConstraintName("FK_OrdenServicioMantenimiento_Producto");

                entity.HasOne(d => d.Mantenimiento)
                    .WithMany(p => p.TransporteMantenimientoDetalle)
                    .HasForeignKey(d => d.MantenimientoId)
                    .HasConstraintName("FK_TransporteMantenimientoDetalle_TransporteMantenimiento");
            });

            modelBuilder.Entity<TransporteMic>(entity =>
            {
                entity.Property(e => e.MicId).ValueGeneratedNever();

                entity.HasOne(d => d.Aduana)
                    .WithMany(p => p.TransporteMic)
                    .HasForeignKey(d => d.AduanaId)
                    .HasConstraintName("FK_TransporteMIC_TransporteAduana");

                entity.HasOne(d => d.AutoizacionCarga)
                    .WithMany(p => p.TransporteMic)
                    .HasForeignKey(d => d.AutoizacionCargaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteMIC_TransporteAutorizacionCarga");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteMic)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteMIC_TransporteConductor");

                entity.HasOne(d => d.Crtmic)
                    .WithMany(p => p.TransporteMic)
                    .HasForeignKey(d => d.Crtmicid)
                    .HasConstraintName("FK_TransporteMIC_PermisoEmpresaNroCRTMIC");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteMic)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteMIC_Sucursal");
            });

            modelBuilder.Entity<TransporteMiccrt>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Crt)
                    .WithMany(p => p.TransporteMiccrt)
                    .HasForeignKey(d => d.CrtId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteMICCRT_TransporteCRT");

                entity.HasOne(d => d.M24aduanaDestino)
                    .WithMany(p => p.TransporteMiccrt)
                    .HasForeignKey(d => d.M24aduanaDestinoId)
                    .HasConstraintName("FK_TransporteMICCRT_TransporteAduana");

                entity.HasOne(d => d.Mic)
                    .WithMany(p => p.TransporteMiccrt)
                    .HasForeignKey(d => d.MicId)
                    .HasConstraintName("FK_TransporteMICCRT_TransporteMIC");
            });

            modelBuilder.Entity<TransporteMovimientoDestino>(entity =>
            {
                entity.HasOne(d => d.DepositoIdingresaNavigation)
                    .WithMany(p => p.TransporteMovimientoDestino)
                    .HasForeignKey(d => d.DepositoIdingresa)
                    .HasConstraintName("FK_TransporteMovimientoDestino_Deposito1");

                entity.HasOne(d => d.Mov)
                    .WithMany(p => p.TransporteMovimientoDestino)
                    .HasForeignKey(d => d.MovId)
                    .HasConstraintName("FK_TransporteMovimientoDestino_TransporteCargaMovimiento");

                entity.HasOne(d => d.Zona)
                    .WithMany(p => p.TransporteMovimientoDestino)
                    .HasForeignKey(d => d.ZonaId)
                    .HasConstraintName("FK_TransporteMovimientoDestino_ZonaGeografica");
            });

            modelBuilder.Entity<TransporteOrigenDestino>(entity =>
            {
                entity.Property(e => e.OrigDestId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Destino/Origen de un Viaje");

                entity.Property(e => e.CiudadId).HasComment("Indica la Ciudad Dentro de una determinada Provincia/Region en un Pais");

                entity.HasOne(d => d.RegistroImpZona)
                    .WithMany(p => p.TransporteOrigenDestino)
                    .HasForeignKey(d => d.RegistroImpZonaId)
                    .HasConstraintName("FK_TransporteOrigenDestino_EmpresaImpuestoZona1");
            });

            modelBuilder.Entity<TransportePasCarnet>(entity =>
            {
                entity.Property(e => e.CarnetId)
                    .ValueGeneratedNever()
                    .HasComment("ID del Registro");

                entity.Property(e => e.Acompañante).HasComment("Acompañante en caso de ser pase sin cargo (etc.)");

                entity.Property(e => e.CupoMensual).HasComment("Cantidad de Bonos q se Pueden Consumir Mensualmente");

                entity.Property(e => e.EnteCarnetTipoId).HasComment("Proviene de AlmaNET TransportePasEnteCarnetTipo, Tipos de Carnet: Docentes, Universitarios, Escolares (Educ. Fisica), Pases sin Cargo.");

                entity.Property(e => e.EntidadSucId).HasComment("Proviene de EntidadSucursal");

                entity.Property(e => e.Inhabilitado).HasComment("Si el Carnet se encuentra Habilitado");

                entity.Property(e => e.NroCarnet).HasComment("Número del Carnet");

                entity.Property(e => e.PeriodoDesde).HasComment("Período en que Inicia el Ciclo");

                entity.Property(e => e.PeriodoHasta).HasComment("Período en que Finaliza");

                entity.Property(e => e.PeriodoValidez).HasComment("Ciclo Lectivo al cual corresponde el Carnet");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal");

                entity.HasOne(d => d.EnteCarnetTipo)
                    .WithMany(p => p.TransportePasCarnet)
                    .HasForeignKey(d => d.EnteCarnetTipoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasCarnet_TransportePasEnteCarnetTipo");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.TransportePasCarnet)
                    .HasForeignKey(d => d.EntidadSucId)
                    .HasConstraintName("FK_TransportePasCarnet_EntidadSucursal");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransportePasCarnet)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasCarnet_Sucursal");
            });

            modelBuilder.Entity<TransportePasCarnetDetalle>(entity =>
            {
                entity.HasKey(e => e.DetCarnetId)
                    .HasName("PK_TransportePasCarnetDet");

                entity.Property(e => e.DetCarnetId).ValueGeneratedNever();

                entity.Property(e => e.Turno).HasComment("0 Mañana-1 Tarde - 2 Noche");

                entity.HasOne(d => d.Carnet)
                    .WithMany(p => p.TransportePasCarnetDetalle)
                    .HasForeignKey(d => d.CarnetId)
                    .HasConstraintName("FK_TransportePasCarnetDet_TransportePasCarnet");

                entity.HasOne(d => d.EnteCarnet)
                    .WithMany(p => p.TransportePasCarnetDetalle)
                    .HasForeignKey(d => d.EnteCarnetId)
                    .HasConstraintName("FK_TransportePasCarnetDet_TransporteConductorEnteCarnet");
            });

            modelBuilder.Entity<TransportePasEnteCarnetTipo>(entity =>
            {
                entity.Property(e => e.EnteCarnetTipoId).ValueGeneratedNever();

                entity.Property(e => e.ProductoPrecioId).HasComment("CodigoPrecio para un producto en Deteminada Presentacion y lista de precio");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.TransportePasEnteCarnetTipo)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .HasConstraintName("FK_TransportePasEnteCarnetTipo_ProductoListaPrecio");
            });

            modelBuilder.Entity<TransportePasEntregaBoletoDetalle>(entity =>
            {
                entity.HasComment("Registro de que rollos de Boletos Tiene Cada Chofer");

                entity.Property(e => e.EntregaBoletoId).ValueGeneratedNever();

                entity.HasOne(d => d.EntregaBol)
                    .WithMany(p => p.TransportePasEntregaBoletoDetalle)
                    .HasForeignKey(d => d.EntregaBolId)
                    .HasConstraintName("FK_TransportePasEntregaBoletoDetalle_TransportePasEntregaRolloBoleto");

                entity.HasOne(d => d.LoteFraccion)
                    .WithMany(p => p.TransportePasEntregaBoletoDetalle)
                    .HasForeignKey(d => d.LoteFraccionId)
                    .HasConstraintName("FK_TransportePasEntregaBoletoDetalle_ProductoNroSerieLoteFraccion");
            });

            modelBuilder.Entity<TransportePasEntregaRolloBoleto>(entity =>
            {
                entity.Property(e => e.EntregaBolId).ValueGeneratedNever();

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransportePasEntregaRolloBoleto)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasEntregaRolloBoleto_TransporteConductor");
            });

            modelBuilder.Entity<TransportePasLinea>(entity =>
            {
                entity.HasComment("Trasnporte Pasajero Lineas  (se cargan los dintintos recorridos y se indica cual es el Recorido a realizar por cada Colectivo)");

                entity.Property(e => e.LineaId).ValueGeneratedNever();

                entity.Property(e => e.Detalle).HasComment("Se detalla datos referidos a la Linea,");
            });

            modelBuilder.Entity<TransportePasLineaPunto>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.Hora).HasComment("Hora del Primer Arribo");

                entity.HasOne(d => d.Recorrido)
                    .WithMany(p => p.TransportePasLineaPunto)
                    .HasForeignKey(d => d.RecorridoId)
                    .HasConstraintName("FK_TransportePasLineaPunto_TransportePasLineaRecorrido");
            });

            modelBuilder.Entity<TransportePasLineaRecorrido>(entity =>
            {
                entity.Property(e => e.RecorridoId).ValueGeneratedNever();

                entity.Property(e => e.Distancia).HasComment("Distancia en Kilometros");

                entity.Property(e => e.HoraFinal).HasComment("Hora Final (Cantidad de segundos depues de las 0hs.)");

                entity.Property(e => e.HoraInicio).HasComment("Hora Inicio (Cantidad de segundos depues de las 0hs.)");

                entity.HasOne(d => d.Linea)
                    .WithMany(p => p.TransportePasLineaRecorrido)
                    .HasForeignKey(d => d.LineaId)
                    .HasConstraintName("FK_TransportePasLineaRecorrido_TransportePasLinea");

                entity.HasOne(d => d.TipoRecorridoNavigation)
                    .WithMany(p => p.TransportePasLineaRecorrido)
                    .HasForeignKey(d => d.TipoRecorrido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasLineaRecorrido_TransportePasRecorridoTipo");
            });

            modelBuilder.Entity<TransportePasLiquidacion>(entity =>
            {
                entity.Property(e => e.LiquidacionId)
                    .ValueGeneratedNever()
                    .HasComment("Nro Liquidacion ");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransportePasLiquidacion)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransportePasLiquidacion_Usuario");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransportePasLiquidacion)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasLiquidacion_TransporteConductor");
            });

            modelBuilder.Entity<TransportePasLiquidacionDesglose>(entity =>
            {
                entity.Property(e => e.LiquidacionDesgloseId).ValueGeneratedNever();

                entity.Property(e => e.CantidadUnidad).HasComment("Cantidad Desglose");

                entity.Property(e => e.DesgloseId).HasComment("Tipo de Desglose. Proveniente de la base AlmaNET (table: BilletesDesglose)");

                entity.HasOne(d => d.Liquidacion)
                    .WithMany(p => p.TransportePasLiquidacionDesglose)
                    .HasForeignKey(d => d.LiquidacionId)
                    .HasConstraintName("FK_TransportePasLiquidacionDesglose_TransportePasLiquidacion");
            });

            modelBuilder.Entity<TransportePasLiquidacionDetalle>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_TransportePasL:iquidacionDetalle");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.LiquidacionId).HasComment("Nro Liquidacion ");

                entity.Property(e => e.ProductoPresentacionId).HasComment("Presentacion del producto que contiene el Nro de Serie");
            });

            modelBuilder.Entity<TransportePasLiquidacionPlanilla>(entity =>
            {
                entity.Property(e => e.LiquidacionPlanillaId)
                    .ValueGeneratedNever()
                    .HasComment("ID del Registro");

                entity.Property(e => e.AlmaUserId).HasComment("Usuario que Realiza la entrega de la planilla");

                entity.Property(e => e.ConductorId).HasComment("Cód. Conductor");

                entity.Property(e => e.DetalleBoletos).HasComment("Detalle Boletos Impresos y Entregados");

                entity.Property(e => e.EsVacia).HasComment("Indica si la Planilla impresa está con los nros. iniciales en blanco(false); o no (true)");

                entity.Property(e => e.EstaInHabilitada).HasComment("Indica si la Planilla se encuentra en baja");

                entity.Property(e => e.FechaEntrega).HasComment("Fecha en que se entrega la Planilla");

                entity.Property(e => e.LiquidacionId).HasComment("Nro. Rendición asociada (CUANDO DOY EL ALTA DEL REGISTRO TRANSPORTEPASLIQUIDACION)");

                entity.Property(e => e.Observacion).HasComment("Observación a Realizar");

                entity.Property(e => e.PlanillaNro).HasComment("Nro. Planilla");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransportePasLiquidacionPlanilla)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransportePasLiquidacionPlanilla_Usuario");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransportePasLiquidacionPlanilla)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasLiquidacionPlanilla_TransporteConductor");

                entity.HasOne(d => d.Liquidacion)
                    .WithMany(p => p.TransportePasLiquidacionPlanilla)
                    .HasForeignKey(d => d.LiquidacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransportePasLiquidacionPlanilla_TransportePasLiquidacion");
            });

            modelBuilder.Entity<TransportePasProgramacionDia>(entity =>
            {
                entity.Property(e => e.ProgId).ValueGeneratedNever();

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.TransportePasProgramacionDia)
                    .HasForeignKey(d => d.EmpleadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasProgramacionDia_Empleado");
            });

            modelBuilder.Entity<TransportePasProgramacionDiaDetalle>(entity =>
            {
                entity.Property(e => e.ProgDetalleId).ValueGeneratedNever();

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransportePasProgramacionDiaDetalle)
                    .HasForeignKey(d => d.ConductorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasProgramacionDiaDetalle_TransporteConductor");

                entity.HasOne(d => d.Prog)
                    .WithMany(p => p.TransportePasProgramacionDiaDetalle)
                    .HasForeignKey(d => d.ProgId)
                    .HasConstraintName("FK_TransportePasProgramacionDiaDetalle_TransportePasProgramacionDia1");

                entity.HasOne(d => d.Recorrido)
                    .WithMany(p => p.TransportePasProgramacionDiaDetalle)
                    .HasForeignKey(d => d.RecorridoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasProgramacionDiaDetalle_TransportePasLineaRecorrido");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransportePasProgramacionDiaDetalle)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasProgramacionDiaDetalle_TransporteVehiculo");
            });

            modelBuilder.Entity<TransportePasRecorrido>(entity =>
            {
                entity.HasKey(e => e.LiquidacionRecId)
                    .HasName("PK_TransportePasRecorrido_1");

                entity.HasComment("Indica el Tipo de Boleto");

                entity.Property(e => e.LiquidacionRecId)
                    .ValueGeneratedNever()
                    .HasComment("Liquidacuion RecorridoID");

                entity.Property(e => e.LiquidacionId).HasComment("Nro Liquidacion ");

                entity.HasOne(d => d.Liquidacion)
                    .WithMany(p => p.TransportePasRecorrido)
                    .HasForeignKey(d => d.LiquidacionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TransportePasRecorrido_TransportePasLiquidacion");

                entity.HasOne(d => d.ProgDetalle)
                    .WithMany(p => p.TransportePasRecorrido)
                    .HasForeignKey(d => d.ProgDetalleId)
                    .HasConstraintName("FK_TransportePasRecorrido_TransportePasProgramacionDiaDetalle");

                entity.HasOne(d => d.Recorrido)
                    .WithMany(p => p.TransportePasRecorrido)
                    .HasForeignKey(d => d.RecorridoId)
                    .HasConstraintName("FK_TransportePasRecorrido_TransportePasLineaRecorrido");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransportePasRecorrido)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransportePasRecorrido_TransporteVehiculo");
            });

            modelBuilder.Entity<TransportePasRecorridoDetalle>(entity =>
            {
                entity.Property(e => e.DetRecorridoId).ValueGeneratedNever();

                entity.HasOne(d => d.EntregaBoleto)
                    .WithMany(p => p.TransportePasRecorridoDetalle)
                    .HasForeignKey(d => d.EntregaBoletoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransportePasRecorridoDetalle_TransportePasEntregaBoletoDetalle");

                entity.HasOne(d => d.LiquidacionRec)
                    .WithMany(p => p.TransportePasRecorridoDetalle)
                    .HasForeignKey(d => d.LiquidacionRecId)
                    .HasConstraintName("FK_TransportePasRecorridoDetalle_TransportePasRecorrido1");
            });

            modelBuilder.Entity<TransportePasRecorridoTipo>(entity =>
            {
                entity.Property(e => e.TipoRecorridoId)
                    .ValueGeneratedNever()
                    .HasComment("ID del Tipo de Recorrido");

                entity.Property(e => e.Descripcion).HasComment("Descripción del Recorrido(Fijo - Eventuales - Escolares - etc..)");

                entity.Property(e => e.DiasLaborables).HasComment("Indicador si el recorriedo es realizado los dias Feriados");

                entity.Property(e => e.DiasRecorrido).HasComment("Dias en que se raliza el recorrido");
            });

            modelBuilder.Entity<TransporteRemitos>(entity =>
            {
                entity.HasKey(e => new { e.TipoOperacionId, e.RemitoId });

                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.Property(e => e.RemitoId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Nro Registro Remito/Guia");

                entity.Property(e => e.DetalleEntrega).HasComment("Un detalle y/o referencia para tener n cuenta en la entrega");

                entity.Property(e => e.EntidadSucIdcons).HasComment("Consigantario");

                entity.Property(e => e.EntidadSucIdrem).HasComment("Remitente");

                entity.Property(e => e.ImporteAdicional).HasComment("Importe q forma parte del importe del Flete");

                entity.Property(e => e.ImporteBonificacion).HasComment("Suma de todas las Bonificaciones");

                entity.Property(e => e.ImporteCreembolso).HasComment("Importe q suma al importe del flete");

                entity.Property(e => e.ImporteTotal).HasComment("Flete+Segururo-Bonificacion");

                entity.Property(e => e.Kg).HasComment("Ingresamos la cantidad de Kg. de la carga ");

                entity.Property(e => e.M3).HasComment("Ingresamos la cantidad de M3 de la carga");

                entity.Property(e => e.PorImporteDeclarado).HasComment("Pocentaje Sobre el valor declarado q se le cobra");

                entity.Property(e => e.PorSeguro).HasComment("Porcentaje Seguro sobre Valor Declarado");

                entity.Property(e => e.TurnoFecha).HasComment("Turno para la entrega");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteRemitos)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteRemitos_Usuario");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.TransporteRemitos)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteRemitos_Cliente");

                entity.HasOne(d => d.EntidadSucIdconsNavigation)
                    .WithMany(p => p.TransporteRemitosEntidadSucIdconsNavigation)
                    .HasForeignKey(d => d.EntidadSucIdcons)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteRemitos_EntidadSucursal1");

                entity.HasOne(d => d.EntidadSucIdremNavigation)
                    .WithMany(p => p.TransporteRemitosEntidadSucIdremNavigation)
                    .HasForeignKey(d => d.EntidadSucIdrem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteRemitos_EntidadSucursal");

                entity.HasOne(d => d.ListaPrec)
                    .WithMany(p => p.TransporteRemitos)
                    .HasForeignKey(d => d.ListaPrecId)
                    .HasConstraintName("FK_TransporteRemitos_ProductoLista");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteRemitos)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteRemitos_Sucursal");
            });

            modelBuilder.Entity<TransporteRemitosViajes>(entity =>
            {
                entity.Property(e => e.TipoOperacionId).HasComment("Tipo Movimiento al que pertenece (Ventas,Compras,Pagod,Cobros) de AlmaNET.OperacionTipo");

                entity.HasOne(d => d.TraspViaje)
                    .WithMany(p => p.TransporteRemitosViajes)
                    .HasForeignKey(d => d.TraspViajeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteRemitosViajes_TransporteViaje");

                entity.HasOne(d => d.TransporteRemitos)
                    .WithMany(p => p.TransporteRemitosViajes)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.RemitoId })
                    .HasConstraintName("FK_TransporteRemitosViajes_TransporteRemitos");
            });

            modelBuilder.Entity<TransporteTipoCarga>(entity =>
            {
                entity.Property(e => e.TipoCargaId)
                    .ValueGeneratedNever()
                    .HasComment("Codio tipo Carga q puede Trasnportar");

                entity.Property(e => e.EsExplicito).HasComment("Indica si el Registro de carga sólo soporta dicho tipo de carga (Ej. al asignar a un vehiculo; si el tipo de carga es Explícito; el vehículo únicamente podrá ser vinculado a cargas con productos de dicho tipo)");

                entity.HasOne(d => d.Registro)
                    .WithMany(p => p.TransporteTipoCarga)
                    .HasForeignKey(d => d.RegistroId)
                    .HasConstraintName("FK_TransporteTipoCarga_TransporteTipoCargaCalculoCC");
            });

            modelBuilder.Entity<TransporteTipoCargaCalculoCc>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.Campo).HasComment("0-Km; 1-Viajes");

                entity.Property(e => e.Cantidad).HasComment("Cantidad de Km. o Viajes... etc.");

                entity.Property(e => e.CantidadMinima).HasComment("Cantidad Mínima que debe cumplir");
            });

            modelBuilder.Entity<TransporteTipoCargaProducto>(entity =>
            {
                entity.HasComment("Contiene todos los productos q estan relacionado a un tipo de carga (Ejemplo Carga Peligrosa- en esta tabla especifico cuales son todos los productos q transportados se consideran carga Peligrosa)");

                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.Property(e => e.CodigoBaseId).HasComment("Codigo Base utilizado A partir del cual se crea el Producto");

                entity.Property(e => e.TipoCargaId).HasComment("Codigo q estable el tipo de carga q puede Trasnportar el Vehiculo");

                entity.HasOne(d => d.CodigoBase)
                    .WithMany(p => p.TransporteTipoCargaProducto)
                    .HasForeignKey(d => d.CodigoBaseId)
                    .HasConstraintName("FK_TransporteTipoCargaProducto_ProductoBase");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteTipoCargaProducto)
                    .HasForeignKey(d => d.TipoCargaId)
                    .HasConstraintName("FK_TransporteTipoCargaProducto_TransporteTipoCarga");
            });

            modelBuilder.Entity<TransporteUnidad>(entity =>
            {
                entity.Property(e => e.TransporteUnidadId)
                    .ValueGeneratedNever()
                    .HasComment("Representa Al Vheiculo de Remolque + Acoplado +Chofer");

                entity.Property(e => e.CamionId).HasComment("Codigo Vehiculo Remolque");

                entity.Property(e => e.ChasisAcopId).HasComment("Chasis/Semi Del Camion");

                entity.Property(e => e.ConductorId).HasComment("Nro de Conductor/Chofer");

                entity.Property(e => e.SucursalId).HasComment("N° de Sucursal a la q esta asignada la Ubidad");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteUnidad)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteUnidad_Usuario");

                entity.HasOne(d => d.Camion)
                    .WithMany(p => p.TransporteUnidadCamion)
                    .HasForeignKey(d => d.CamionId)
                    .HasConstraintName("FK_TransporteUnidad_TransporteVehiculo");

                entity.HasOne(d => d.ChasisAcop)
                    .WithMany(p => p.TransporteUnidadChasisAcop)
                    .HasForeignKey(d => d.ChasisAcopId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteUnidad_TransporteVehiculo1");

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteUnidad)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteUnidad_TransporteConductor");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteUnidad)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_TransporteUnidad_Sucursal");
            });

            modelBuilder.Entity<TransporteVehiculo>(entity =>
            {
                entity.Property(e => e.VehiculoId).ValueGeneratedNever();

                entity.Property(e => e.CombustibleTipoId).HasComment("Indica el Tipo de Combustible q Utiliza el Vehiculo (Nafta,Diesel,Gas,) AlmaNET TrasnporteCombustibleTipo");

                entity.Property(e => e.CombustionTipoId).HasComment("Indica el tipo de Combustion del Vehiculo,( Ejem. Carburado, Inyeccion, etc) (AlmaNET  TrasnporteCombustionTipo)");

                entity.Property(e => e.EmpleadoId).HasComment("");

                entity.Property(e => e.FechaBaja).HasComment("Fecha en que se establece de baja el vehículo");

                entity.Property(e => e.MarcaVehiculoId).HasComment("de AlmaNET TransporteVehiculoMarca");

                entity.Property(e => e.MovilNro).HasComment("Número Identificatorio del Vehículo. En los Transportes de pasajeros cada uno tiene un número");

                entity.Property(e => e.Obsevaciones).HasComment("Refiere a Datos tecnicos o q hacen al Vehiculo");

                entity.Property(e => e.PoseeAireCond).HasComment("Indicar si Posee Aire Acondicionado");

                entity.Property(e => e.TipoCargaId).HasComment("Codio tipo Carga q puede Trasnportar");

                entity.Property(e => e.TipoVehiculoId).HasComment("de AlmaNET TransporteVehiculoTipo Indica el tipo de Vehiculo q es");

                entity.Property(e => e.TransDireccionTipoId).HasComment("Indica el Tipo de Direccion q posee el Vheiculo (ejem. Hidraulica, Mecanica,etc.) AlmaNET TrasnporteDireccionTipo");

                entity.Property(e => e.TransmisionTipoId).HasComment("Indica el Tipo de Trasnmision del Vehiculo (Ejem Automatica, Sincronica, etc.) AlmaNET , TrasnporteTransmisionTipo");

                entity.HasOne(d => d.CentroCosto)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.CentroCostoId)
                    .HasConstraintName("FK_TransporteVehiculo_PlanDeCuentaCentroCosto");

                entity.HasOne(d => d.Empleado)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.EmpleadoId)
                    .HasConstraintName("FK_TransporteVehiculo_Empleado");

                entity.HasOne(d => d.EstadoUso)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.EstadoUsoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteVehiculo_TransporteVehiculoEstadoUso");

                entity.HasOne(d => d.ServicioTipo)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.ServicioTipoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteVehiculo_TransporteVehiculoServicioTipo");

                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.TipoCargaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteVehiculo_TransporteTipoCarga");

                entity.HasOne(d => d.Transporte)
                    .WithMany(p => p.TransporteVehiculo)
                    .HasForeignKey(d => d.TransporteId)
                    .HasConstraintName("FK_TransporteVehiculo_Transporte");
            });

            modelBuilder.Entity<TransporteVehiculoConductor>(entity =>
            {
                entity.Property(e => e.RegistroId).ValueGeneratedNever();

                entity.HasOne(d => d.Conductor)
                    .WithMany(p => p.TransporteVehiculoConductor)
                    .HasForeignKey(d => d.ConductorId)
                    .HasConstraintName("FK_TransporteVehiculoConductor_TransporteConductor");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoConductor)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteVehiculoConductor_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteVehiculoDatoCompra>(entity =>
            {
                entity.Property(e => e.RegistroCpaId).ValueGeneratedNever();

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.ProveedorId).HasComment("Quien es el Proveedor al q se compro el Vehiculo");

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.TransporteVehiculoDatoCompra)
                    .HasForeignKey(d => d.ProveedorId)
                    .HasConstraintName("FK_TransporteVehiculoDatoCompra_Proveedor");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoDatoCompra)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteVehiculoDatoCompra_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteVehiculoEstadoUso>(entity =>
            {
                entity.Property(e => e.EstadoUsoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteVehiculoEvento>(entity =>
            {
                entity.HasOne(d => d.RegEvento)
                    .WithMany(p => p.TransporteVehiculoEvento)
                    .HasForeignKey(d => d.RegEventoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteVehiculoEvento_Evento");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoEvento)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteVehiculoEvento_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteVehiculoFoto>(entity =>
            {
                entity.Property(e => e.RegFotoVehiId).ValueGeneratedNever();

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoFoto)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteVehiculoFoto_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteVehiculoMantenimiento>(entity =>
            {
                entity.HasComment("Indico por Vheiculo cuales son los mantenimientos preventivos a los q  tiene q ser sometido");

                entity.Property(e => e.VehicMantId).ValueGeneratedNever();

                entity.Property(e => e.KmIniciales).HasComment("Cantidad de km. Con lo q cuenta el Servicio al dar de alta el Masntenimiento preventivo");

                entity.Property(e => e.MantenimientoId).HasComment("Si el MantenimientoTipo es Cantidad en la OrdenServicioMantenimiento");

                entity.HasOne(d => d.Mantenimiento)
                    .WithMany(p => p.TransporteVehiculoMantenimiento)
                    .HasForeignKey(d => d.MantenimientoId)
                    .HasConstraintName("FK_TransporteVehiculoMantenimiento_TransporteMantenimiento");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoMantenimiento)
                    .HasForeignKey(d => d.VehiculoId)
                    .HasConstraintName("FK_TransporteVehiculoMantenimiento_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteVehiculoServicioTipo>(entity =>
            {
                entity.HasComment("Se cargan los tipos de Servicio q Hace el Vehiculo (Carga Combustible, Normal, Quimico, ALimenticio, general)");

                entity.Property(e => e.ServicioTipoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransporteVehiculoTipoCarga>(entity =>
            {
                entity.HasOne(d => d.TipoCarga)
                    .WithMany(p => p.TransporteVehiculoTipoCarga)
                    .HasForeignKey(d => d.TipoCargaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteVehiculoTipoCarga_TransporteTipoCarga");

                entity.HasOne(d => d.Vehiculo)
                    .WithMany(p => p.TransporteVehiculoTipoCarga)
                    .HasForeignKey(d => d.VehiculoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteVehiculoTipoCarga_TransporteVehiculo");
            });

            modelBuilder.Entity<TransporteViaje>(entity =>
            {
                entity.Property(e => e.TraspViajeId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Viaje, q especifica Lugar Origen, Lugar Destino, Distancia a recorrer, Producto Transporta, Cliente Origen, Cliente Destino");

                entity.Property(e => e.DuracionMinutos).HasComment("Tiempo estimado del Recorrido expresado en Minutos");

                entity.Property(e => e.KmRecorrido).HasComment("Cantidad de Kilomentros q representa el recorrido");

                entity.Property(e => e.ProductoPrecioId).HasComment("CodigoPrecio para un producto en Deteminada Presentacion y lista de precio");

                entity.Property(e => e.SectorId).HasComment("Sector que realizo la Venta");

                entity.Property(e => e.TarifaFot).HasComment("Se aplica cuando una Carga posee varios viajes dentro de una misma zona");

                entity.Property(e => e.ViajeEstadoId).HasComment("Codigo Estado de Viaje (Habilitado,NoHabilitado, Supendido)");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.ClienteId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteViaje_Cliente");

                entity.HasOne(d => d.DepositoIdsaleNavigation)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.DepositoIdsale)
                    .HasConstraintName("FK_TransporteViaje_Deposito");

                entity.HasOne(d => d.EntidadSucIddestinoNavigation)
                    .WithMany(p => p.TransporteViajeEntidadSucIddestinoNavigation)
                    .HasForeignKey(d => d.EntidadSucIddestino)
                    .HasConstraintName("FK_TransporteViaje_EntidadSucursal");

                entity.HasOne(d => d.EntidadSucIdorigenNavigation)
                    .WithMany(p => p.TransporteViajeEntidadSucIdorigenNavigation)
                    .HasForeignKey(d => d.EntidadSucIdorigen)
                    .HasConstraintName("FK_TransporteViaje_EntidadSucursal1");

                entity.HasOne(d => d.ProductoPrecio)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.ProductoPrecioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteViaje_ProductoListaPrecio");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteViaje_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.SucursalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransporteViaje_Sucursal");

                entity.HasOne(d => d.ViajeDestino)
                    .WithMany(p => p.TransporteViajeViajeDestino)
                    .HasForeignKey(d => d.ViajeDestinoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteViaje_TransporteOrigenDestino1");

                entity.HasOne(d => d.ViajeEstado)
                    .WithMany(p => p.TransporteViaje)
                    .HasForeignKey(d => d.ViajeEstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteViaje_TransporteViajeEstado");

                entity.HasOne(d => d.ViajeOrigen)
                    .WithMany(p => p.TransporteViajeViajeOrigen)
                    .HasForeignKey(d => d.ViajeOrigenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteViaje_TransporteOrigenDestino");
            });

            modelBuilder.Entity<TransporteViajeAdicionales>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_TransporteViajeConcepto");

                entity.Property(e => e.TraspViajeId).HasComment("Codigo Viaje, q especifica Lugar Origen, Lugar Destino, Distancia a recorrer, Producto Transporta, Cliente Origen, Cliente Destino");

                entity.HasOne(d => d.IdconceptoCargaNavigation)
                    .WithMany(p => p.TransporteViajeAdicionales)
                    .HasForeignKey(d => d.IdconceptoCarga)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransporteViajeAdicionales_TransporteCargaAdicionales");

                entity.HasOne(d => d.TraspViaje)
                    .WithMany(p => p.TransporteViajeAdicionales)
                    .HasForeignKey(d => d.TraspViajeId)
                    .HasConstraintName("FK_TransporteViajeConcepto_TransporteViaje");
            });

            modelBuilder.Entity<TransporteViajeCelular>(entity =>
            {
                entity.HasKey(e => e.RegistroId)
                    .HasName("PK_LogisticaViajesCelular");

                entity.HasComment("Para Armar el Ruteo (Circuito de Vehiculo)");

                entity.Property(e => e.ViajeAccion).HasComment("0=A CARGAR,1=A DESCARGAR,2=DESCARGA PARCIAL,3=DESCARGA FINAL,4=SIN VIAJE");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.TransporteViajeCelular)
                    .HasForeignKey(d => d.AlmaUserId)
                    .HasConstraintName("FK_TransporteViajeCelular_Usuario");
            });

            modelBuilder.Entity<TransporteViajeEstado>(entity =>
            {
                entity.Property(e => e.ViajeEstadoId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Estado de Viaje (Habilitado,NoHabilitado, Supendido)");
            });

            modelBuilder.Entity<TransproteCargaRemitos>(entity =>
            {
                entity.HasOne(d => d.TransporteCarga)
                    .WithMany(p => p.TransproteCargaRemitos)
                    .HasForeignKey(d => new { d.TipoOperacionId, d.CargaId })
                    .HasConstraintName("FK_TransproteCargaRemitos_TransporteCarga");

                entity.HasOne(d => d.TransporteRemitos)
                    .WithMany(p => p.TransproteCargaRemitos)
                    .HasForeignKey(d => new { d.TipoOperacionIdremito, d.RemitoId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransproteCargaRemitos_TransporteRemitos");
            });

            modelBuilder.Entity<Turno>(entity =>
            {
                entity.HasComment("Turnos de Trabajo que tiene la empresa ");

                entity.Property(e => e.TurnoId).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).HasComment("Nocturno-Diurno, etc..");

                entity.Property(e => e.HoraEntrada).HasComment("Hora de entrada del personal");

                entity.Property(e => e.HoraEntradaReceso).HasComment("Hora de entrada para Almuerzo");

                entity.Property(e => e.HoraSalida).HasComment("Hora salida");

                entity.Property(e => e.HoraSalidaReceso).HasComment("Hora salida del almuerzo");

                entity.Property(e => e.Inhabilitado).HasComment("Indica q este turno ya no se utiliza");

                entity.Property(e => e.Tolerancia).HasComment("Cantidad Minutos Tolerancia");
            });

            modelBuilder.Entity<UnidadFacturacion>(entity =>
            {
                entity.Property(e => e.UnidadFactId).HasComment("Indica la COnexion O Mensualidad");

                entity.Property(e => e.ClienteId).HasComment("Codigo Cliente");

                entity.Property(e => e.DireccionUnidad).HasComment("Direccion donde esta la Unidada");

                entity.Property(e => e.Inhabilitado).HasComment("Indica q este Unidad esta dada de baja");

                entity.Property(e => e.RutaId).HasComment("Indica el Orden del Recorido (Reparto)");

                entity.Property(e => e.UfCaslificacionId).HasComment("Calsificacion Unidades Facturacion");

                entity.Property(e => e.ZonaId).HasComment("Indica la Zona en la q se encuentra la Sucursal");

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.UnidadFacturacion)
                    .HasForeignKey(d => d.ClienteId)
                    .HasConstraintName("FK_UnidadFacturacion_Cliente");

                entity.HasOne(d => d.UfCaslificacion)
                    .WithMany(p => p.UnidadFacturacion)
                    .HasForeignKey(d => d.UfCaslificacionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UnidadFacturacion_UnidadFacturacionClasificacion");
            });

            modelBuilder.Entity<UnidadFacturacionClasificacion>(entity =>
            {
                entity.HasComment("Permite separar las Unidades de Facturacion");

                entity.Property(e => e.UfCaslificacionId)
                    .ValueGeneratedNever()
                    .HasComment("Calsificacion Unidades Facturacion");
            });

            modelBuilder.Entity<UnidadFacturacionConceptos>(entity =>
            {
                entity.HasComment("Indica q este concepto no se puede utilizar mas");

                entity.Property(e => e.Bonificacion).HasComment("Bonificacion Item");

                entity.Property(e => e.Cantidad).HasComment("Cantidad, Puede estar expresado hasta con 4 decimales");

                entity.Property(e => e.CodigoIdExedente).HasComment("Codigo aplicar para cobro exedente");

                entity.Property(e => e.Inhabilitado).HasComment("Indica q este concepto no se puede aplicar mas a las facturacio");

                entity.Property(e => e.TipoCalculo).HasComment("0-Ninguno ,1-EquipoMedidor (La cantidad esta determinada por la toma de estado) ");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.UnidadFacturacionConceptos)
                    .HasForeignKey(d => d.CodigoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadFacturacionConceptos_Producto");
            });

            modelBuilder.Entity<UnidadFacturacionEquipo>(entity =>
            {
                entity.Property(e => e.EquipoId).ValueGeneratedNever();

                entity.Property(e => e.NroInventario).HasComment("Nro asignado por inventario a este equipo/Medidor");

                entity.Property(e => e.PrecintoActual).HasComment("Precinto actualmente colocado en el Medidor");

                entity.Property(e => e.UfEstadoId).HasComment("Indico el estado del equipo/Medidor");

                entity.Property(e => e.UltimaValorOdometro).HasComment("Indad el valor actual del contador");

                entity.HasOne(d => d.UfEstado)
                    .WithMany(p => p.UnidadFacturacionEquipo)
                    .HasForeignKey(d => d.UfEstadoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UnidadFacturacionEquipo_UnidadFacturacionEquipoEstado");
            });

            modelBuilder.Entity<UnidadFacturacionEquipoEstado>(entity =>
            {
                entity.Property(e => e.UfEstadoId)
                    .ValueGeneratedNever()
                    .HasComment("Indico el estado del equipo/Medidor");
            });

            modelBuilder.Entity<UnidadFacturacionEquipoTomaEstado>(entity =>
            {
                entity.Property(e => e.PeriodoId).HasComment("Periodo en el que se factura");

                entity.HasOne(d => d.Equipo)
                    .WithMany(p => p.UnidadFacturacionEquipoTomaEstado)
                    .HasForeignKey(d => d.EquipoId)
                    .HasConstraintName("FK_UnidadFacturacionEquipoTomaEstado_UnidadFacturacionEquipo");

                entity.HasOne(d => d.Periodo)
                    .WithMany(p => p.UnidadFacturacionEquipoTomaEstado)
                    .HasForeignKey(d => d.PeriodoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UnidadFacturacionEquipoTomaEstado_UnidadFacturacionPeriodo");
            });

            modelBuilder.Entity<UnidadFacturacionItem>(entity =>
            {
                entity.Property(e => e.EquipoId).HasComment("Equipo cuyo contador determina la cantidad a facturar en este Item");

                entity.Property(e => e.UnidadFactId).HasComment("Indica la COnexion O Mensualidad");

                entity.HasOne(d => d.Equipo)
                    .WithMany(p => p.UnidadFacturacionItem)
                    .HasForeignKey(d => d.EquipoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UnidadFacturacionItem_UnidadFacturacionEquipo");

                entity.HasOne(d => d.UfConcepto)
                    .WithMany(p => p.UnidadFacturacionItem)
                    .HasForeignKey(d => d.UfConceptoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadFacturacionItem_UnidadFacturacionConceptos");

                entity.HasOne(d => d.UnidadFact)
                    .WithMany(p => p.UnidadFacturacionItem)
                    .HasForeignKey(d => d.UnidadFactId)
                    .HasConstraintName("FK_UnidadFacturacionItem_UnidadFacturacion");
            });

            modelBuilder.Entity<UnidadFacturacionPeriodo>(entity =>
            {
                entity.Property(e => e.TalonarioIdfacA).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TalonarioIdfacB).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.TalonarioIdotros).HasComment("Nro Talonario al que pertenece la Numeracion del comprobante");

                entity.Property(e => e.UltimoOtros).IsFixedLength();
            });

            modelBuilder.Entity<UnidadFacturacionPeriodoVentas>(entity =>
            {
                entity.Property(e => e.UnidadFactId).HasComment("Indica la COnexion O Mensualidad");

                entity.Property(e => e.VentaId).HasComment("Nro Imputacion de la Venta");

                entity.HasOne(d => d.Periodo)
                    .WithMany(p => p.UnidadFacturacionPeriodoVentas)
                    .HasForeignKey(d => d.PeriodoId)
                    .HasConstraintName("FK_UnidadFacturacionPeriodoVentas_UnidadFacturacionPeriodo");

                entity.HasOne(d => d.UnidadFact)
                    .WithMany(p => p.UnidadFacturacionPeriodoVentas)
                    .HasForeignKey(d => d.UnidadFactId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_UnidadFacturacionPeriodoVentas_UnidadFacturacion");

                entity.HasOne(d => d.Venta)
                    .WithMany(p => p.UnidadFacturacionPeriodoVentas)
                    .HasPrincipalKey(p => p.VentaId)
                    .HasForeignKey(d => d.VentaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadFacturacionPeriodoVentas_OperacionVenta");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.Property(e => e.AlmaUserId).ValueGeneratedNever();

                entity.Property(e => e.DepositoId).HasComment("Nro de Deposito a utilizar por Defecto para verificar stock al realizar la venta");

                entity.Property(e => e.EntidadSucId).HasComment("Nro Sucursal/Entidad");

                entity.Property(e => e.MenuAcceso).HasComment("Indica Menu q se configura por default");

                entity.Property(e => e.TipoUsuario).HasComment("null 0 -Normal 1-indico es Proveedor (Vinculado a un Proveedor) 2-Es Cliente (Vinculado a Cliente)");

                entity.HasOne(d => d.Deposito)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.DepositoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Usuario_Deposito");

                entity.HasOne(d => d.EntidadSuc)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.EntidadSucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Usuario_EntidadSucursal");
            });

            modelBuilder.Entity<UsuarioAuditoria>(entity =>
            {
                entity.HasKey(e => e.RegTransaccionId)
                    .HasName("PK_UsuarioAuditoria_1");

                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioAuditoria)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioAuditoria_Usuario");
            });

            modelBuilder.Entity<UsuarioAuditoriaTabla>(entity =>
            {
                entity.HasKey(e => e.RegAuditoriaId)
                    .HasName("PK_UsuarioAuditoria");

                entity.Property(e => e.RegAuditoriaId).HasComment("ID Del Registro de Auditoria");

                entity.Property(e => e.DetalleAuditoria).HasComment("Detalle cambios en el Registro de la Tabla , en Formato SQL");

                entity.Property(e => e.Proceso).HasComment("10 -Alta 20-Actualizacion 30-Eliminacion ");

                entity.HasOne(d => d.RegTransaccion)
                    .WithMany(p => p.UsuarioAuditoriaTabla)
                    .HasForeignKey(d => d.RegTransaccionId)
                    .HasConstraintName("FK_UsuarioAuditoriaTabla_UsuarioAuditoria");
            });

            modelBuilder.Entity<UsuarioAutorizacionSolicitud>(entity =>
            {
                entity.HasOne(d => d.AlmaUser)
                    .WithMany(p => p.UsuarioAutorizacionSolicitud)
                    .HasForeignKey(d => d.AlmaUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioAutorizacionSolicitud_Usuario");

                entity.HasOne(d => d.TipoSolicitudAutorizacion)
                    .WithMany(p => p.UsuarioAutorizacionSolicitud)
                    .HasForeignKey(d => d.TipoSolicitudAutorizacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuarioAutorizacionSolicitud_UsuarioAutorizacionSolicitudTipo");
            });

            modelBuilder.Entity<UsuarioAutorizacionSolicitudTipo>(entity =>
            {
                entity.HasKey(e => e.TipoSolicitudAutorizacionId)
                    .HasName("PK_UsuarioAutorizacionSolicitudAprobacion");

                entity.Property(e => e.TipoSolicitudAutorizacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Vendedor>(entity =>
            {
                entity.Property(e => e.VendedorId).ValueGeneratedNever();

                entity.Property(e => e.CalculaComision).HasComment("Calcula comisión (0=Sobre Ventas; 1= Sobre Crédito)");

                entity.Property(e => e.Comicion).HasComment("Porcentaje Comicion que Percive por las Ventas");

                entity.Property(e => e.CuentaIdcomisGral).HasComment("Cuenta contable representa la Comision General");

                entity.Property(e => e.CuentaIdcomisProd).HasComment("Cuenta contable representa la Comision sobre productos determinados");

                entity.Property(e => e.Denominacion).HasComment("Permite Especificar un Nombre Independiente de la Razon Social de la Entidad");

                entity.Property(e => e.Inhabilitado).HasComment("Indica si esta Inhabilitado");

                entity.Property(e => e.MontoPiso).HasComment("Si  supera el monto Piso  aplica comision  PorcentajePisa (si no tiene especificado utiliza la comision general Comicion)");

                entity.Property(e => e.TipoEntidadId).HasComment("Viene de AlmaNET EntidadTipo utilizado para relacionar con registro de Operaciones (1)");

                entity.HasOne(d => d.Clasificacion)
                    .WithMany(p => p.Vendedor)
                    .HasForeignKey(d => d.ClasificacionId)
                    .HasConstraintName("FK_Vendedor_VendedorClasificacion");

                entity.HasOne(d => d.CuentaIdcomisGralNavigation)
                    .WithMany(p => p.VendedorCuentaIdcomisGralNavigation)
                    .HasForeignKey(d => d.CuentaIdcomisGral)
                    .HasConstraintName("FK_Vendedor_PlanDeCuenta");

                entity.HasOne(d => d.CuentaIdcomisProdNavigation)
                    .WithMany(p => p.VendedorCuentaIdcomisProdNavigation)
                    .HasForeignKey(d => d.CuentaIdcomisProd)
                    .HasConstraintName("FK_Vendedor_PlanDeCuenta1");

                entity.HasOne(d => d.EntidadSuc)
                    .WithOne(p => p.Vendedor)
                    .HasForeignKey<Vendedor>(d => d.EntidadSucId)
                    .HasConstraintName("FK_Vendedor_EntidadSucursal");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.Vendedor)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Vendedor_Sector");

                entity.HasOne(d => d.Sucursal)
                    .WithMany(p => p.Vendedor)
                    .HasForeignKey(d => d.SucursalId)
                    .HasConstraintName("FK_Vendedor_Sucursal");
            });

            modelBuilder.Entity<VendedorClasificacion>(entity =>
            {
                entity.Property(e => e.ClasificacionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<VendedorRepresentada>(entity =>
            {
                entity.Property(e => e.VendedorRepretsentadaId).ValueGeneratedNever();

                entity.HasOne(d => d.Proveedor)
                    .WithMany(p => p.VendedorRepresentada)
                    .HasForeignKey(d => d.ProveedorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VendedorRepresentada_Proveedor");

                entity.HasOne(d => d.Vendedor)
                    .WithMany(p => p.VendedorRepresentada)
                    .HasForeignKey(d => d.VendedorId)
                    .HasConstraintName("FK_VendedorRepresentada_Vendedor");
            });

            modelBuilder.Entity<VersionLog>(entity =>
            {
                entity.Property(e => e.VersionId)
                    .ValueGeneratedNever()
                    .HasComment("VersionID Combinancion de los Cutro valores");

                entity.Property(e => e.Detalle).HasComment("Descripcion de los Cambios realizados en esta Version.");

                entity.Property(e => e.FechaCambio).HasComment("Fecha en q se realizo el Cambio");

                entity.Property(e => e.VersionNumero).HasComment("Nro de Version en Formato \"9999.9999.9999.9999\"");
            });

            modelBuilder.Entity<ZonaGeografica>(entity =>
            {
                entity.Property(e => e.ZonaId)
                    .ValueGeneratedNever()
                    .HasComment("Codigo Zona");

                entity.Property(e => e.Descripcion).HasComment("Descripcion de la Zona");

                entity.Property(e => e.Orden).HasComment("Idem a Familia Completo pero rellena con 0 para que quede correctamete ordenado los Registros ([dbo].[HerarchyOrder]([FamiliaCompleto]))");

                entity.Property(e => e.ZonaHierarchy).HasComment("Clasificacion de Zonas en Forma Jerarquica  ejem 1.2.3");

                entity.Property(e => e.ZonaNro).HasComment("Nro de Familia que se le asigna (Se comienza a emumerar  de 1 a por cada Familia) nu puede repetirse el mismo numero de familia en una misma SubFamiliaDe");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}